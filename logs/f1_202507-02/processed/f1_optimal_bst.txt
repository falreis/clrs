I0715 11:37:38.895432 133586423690752 run.py:723] (val) algo optimal_bst step 0: {'root': 0.477238321799308, 'score': 0.477238321799308, 'examples_seen': 64, 'step': 0, 'algorithm': 'optimal_bst'}
I0715 11:39:18.687380 133586423690752 run.py:723] (val) algo optimal_bst step 50: {'root': 0.5916955017301038, 'score': 0.5916955017301038, 'examples_seen': 2080, 'step': 50, 'algorithm': 'optimal_bst'}
I0715 11:39:21.578707 133586423690752 run.py:723] (val) algo optimal_bst step 100: {'root': 0.5997512975778547, 'score': 0.5997512975778547, 'examples_seen': 4064, 'step': 100, 'algorithm': 'optimal_bst'}
I0715 11:39:24.515671 133586423690752 run.py:723] (val) algo optimal_bst step 150: {'root': 0.7566500865051903, 'score': 0.7566500865051903, 'examples_seen': 6016, 'step': 150, 'algorithm': 'optimal_bst'}
I0715 11:39:27.473518 133586423690752 run.py:723] (val) algo optimal_bst step 200: {'root': 0.8207720588235294, 'score': 0.8207720588235294, 'examples_seen': 8016, 'step': 200, 'algorithm': 'optimal_bst'}
I0715 11:39:30.511624 133586423690752 run.py:723] (val) algo optimal_bst step 250: {'root': 0.8422902249134948, 'score': 0.8422902249134948, 'examples_seen': 9952, 'step': 250, 'algorithm': 'optimal_bst'}
I0715 11:39:33.417998 133586423690752 run.py:723] (val) algo optimal_bst step 300: {'root': 0.8614294982698962, 'score': 0.8614294982698962, 'examples_seen': 12000, 'step': 300, 'algorithm': 'optimal_bst'}
I0715 11:39:36.284650 133586423690752 run.py:723] (val) algo optimal_bst step 350: {'root': 0.8349913494809689, 'score': 0.8349913494809689, 'examples_seen': 14032, 'step': 350, 'algorithm': 'optimal_bst'}
I0715 11:39:39.154843 133586423690752 run.py:723] (val) algo optimal_bst step 400: {'root': 0.8355320069204152, 'score': 0.8355320069204152, 'examples_seen': 16000, 'step': 400, 'algorithm': 'optimal_bst'}
I0715 11:39:42.016599 133586423690752 run.py:723] (val) algo optimal_bst step 450: {'root': 0.834234429065744, 'score': 0.834234429065744, 'examples_seen': 18000, 'step': 450, 'algorithm': 'optimal_bst'}
I0715 11:39:44.914315 133586423690752 run.py:723] (val) algo optimal_bst step 500: {'root': 0.8759191176470589, 'score': 0.8759191176470589, 'examples_seen': 19952, 'step': 500, 'algorithm': 'optimal_bst'}
I0715 11:39:47.865175 133586423690752 run.py:723] (val) algo optimal_bst step 550: {'root': 0.893760813148789, 'score': 0.893760813148789, 'examples_seen': 21920, 'step': 550, 'algorithm': 'optimal_bst'}
I0715 11:39:50.893194 133586423690752 run.py:723] (val) algo optimal_bst step 600: {'root': 0.8699178200692042, 'score': 0.8699178200692042, 'examples_seen': 23904, 'step': 600, 'algorithm': 'optimal_bst'}
I0715 11:39:53.789898 133586423690752 run.py:723] (val) algo optimal_bst step 650: {'root': 0.8885164359861591, 'score': 0.8885164359861591, 'examples_seen': 25920, 'step': 650, 'algorithm': 'optimal_bst'}
I0715 11:39:56.639044 133586423690752 run.py:723] (val) algo optimal_bst step 700: {'root': 0.8768923010380623, 'score': 0.8768923010380623, 'examples_seen': 27952, 'step': 700, 'algorithm': 'optimal_bst'}
I0715 11:39:59.474710 133586423690752 run.py:723] (val) algo optimal_bst step 750: {'root': 0.8706206747404844, 'score': 0.8706206747404844, 'examples_seen': 29936, 'step': 750, 'algorithm': 'optimal_bst'}
I0715 11:40:02.350352 133586423690752 run.py:723] (val) algo optimal_bst step 800: {'root': 0.8942474048442907, 'score': 0.8942474048442907, 'examples_seen': 31920, 'step': 800, 'algorithm': 'optimal_bst'}
I0715 11:40:05.270583 133586423690752 run.py:723] (val) algo optimal_bst step 850: {'root': 0.8979779411764706, 'score': 0.8979779411764706, 'examples_seen': 33904, 'step': 850, 'algorithm': 'optimal_bst'}
I0715 11:40:08.230168 133586423690752 run.py:723] (val) algo optimal_bst step 900: {'root': 0.8951665224913494, 'score': 0.8951665224913494, 'examples_seen': 35856, 'step': 900, 'algorithm': 'optimal_bst'}
I0715 11:40:11.236534 133586423690752 run.py:723] (val) algo optimal_bst step 950: {'root': 0.9008434256055363, 'score': 0.9008434256055363, 'examples_seen': 37808, 'step': 950, 'algorithm': 'optimal_bst'}
I0715 11:40:14.148876 133586423690752 run.py:723] (val) algo optimal_bst step 1000: {'root': 0.889003027681661, 'score': 0.889003027681661, 'examples_seen': 39872, 'step': 1000, 'algorithm': 'optimal_bst'}
I0715 11:40:17.024959 133586423690752 run.py:723] (val) algo optimal_bst step 1050: {'root': 0.8824610726643599, 'score': 0.8824610726643599, 'examples_seen': 41872, 'step': 1050, 'algorithm': 'optimal_bst'}
I0715 11:40:19.880609 133586423690752 run.py:723] (val) algo optimal_bst step 1100: {'root': 0.9009515570934256, 'score': 0.9009515570934256, 'examples_seen': 43872, 'step': 1100, 'algorithm': 'optimal_bst'}
I0715 11:40:22.770622 133586423690752 run.py:723] (val) algo optimal_bst step 1150: {'root': 0.9006271626297578, 'score': 0.9006271626297578, 'examples_seen': 45856, 'step': 1150, 'algorithm': 'optimal_bst'}
I0715 11:40:25.686690 133586423690752 run.py:723] (val) algo optimal_bst step 1200: {'root': 0.9005190311418685, 'score': 0.9005190311418685, 'examples_seen': 47808, 'step': 1200, 'algorithm': 'optimal_bst'}
I0715 11:40:28.627274 133586423690752 run.py:723] (val) algo optimal_bst step 1250: {'root': 0.9153871107266436, 'score': 0.9153871107266436, 'examples_seen': 49808, 'step': 1250, 'algorithm': 'optimal_bst'}
I0715 11:40:31.657833 133586423690752 run.py:723] (val) algo optimal_bst step 1300: {'root': 0.8966262975778547, 'score': 0.8966262975778547, 'examples_seen': 51760, 'step': 1300, 'algorithm': 'optimal_bst'}
I0715 11:40:34.557352 133586423690752 run.py:723] (val) algo optimal_bst step 1350: {'root': 0.9038170415224913, 'score': 0.9038170415224913, 'examples_seen': 53792, 'step': 1350, 'algorithm': 'optimal_bst'}
I0715 11:40:37.423042 133586423690752 run.py:723] (val) algo optimal_bst step 1400: {'root': 0.8691608996539792, 'score': 0.8691608996539792, 'examples_seen': 55824, 'step': 1400, 'algorithm': 'optimal_bst'}
I0715 11:40:40.295174 133586423690752 run.py:723] (val) algo optimal_bst step 1450: {'root': 0.8996539792387543, 'score': 0.8996539792387543, 'examples_seen': 57792, 'step': 1450, 'algorithm': 'optimal_bst'}
I0715 11:40:43.165656 133586423690752 run.py:723] (val) algo optimal_bst step 1500: {'root': 0.9127378892733564, 'score': 0.9127378892733564, 'examples_seen': 59792, 'step': 1500, 'algorithm': 'optimal_bst'}
I0715 11:40:46.071257 133586423690752 run.py:723] (val) algo optimal_bst step 1550: {'root': 0.903276384083045, 'score': 0.903276384083045, 'examples_seen': 61744, 'step': 1550, 'algorithm': 'optimal_bst'}
I0715 11:40:49.017633 133586423690752 run.py:723] (val) algo optimal_bst step 1600: {'root': 0.8768382352941176, 'score': 0.8768382352941176, 'examples_seen': 63712, 'step': 1600, 'algorithm': 'optimal_bst'}
I0715 11:40:52.031065 133586423690752 run.py:723] (val) algo optimal_bst step 1650: {'root': 0.9205774221453287, 'score': 0.9205774221453287, 'examples_seen': 65712, 'step': 1650, 'algorithm': 'optimal_bst'}
I0715 11:40:54.958041 133586423690752 run.py:723] (val) algo optimal_bst step 1700: {'root': 0.9125756920415224, 'score': 0.9125756920415224, 'examples_seen': 67712, 'step': 1700, 'algorithm': 'optimal_bst'}
I0715 11:40:57.835978 133586423690752 run.py:723] (val) algo optimal_bst step 1750: {'root': 0.925010813148789, 'score': 0.925010813148789, 'examples_seen': 69744, 'step': 1750, 'algorithm': 'optimal_bst'}
I0715 11:41:00.711147 133586423690752 run.py:723] (val) algo optimal_bst step 1800: {'root': 0.9097102076124568, 'score': 0.9097102076124568, 'examples_seen': 71728, 'step': 1800, 'algorithm': 'optimal_bst'}
I0715 11:41:03.587316 133586423690752 run.py:723] (val) algo optimal_bst step 1850: {'root': 0.9256596020761245, 'score': 0.9256596020761245, 'examples_seen': 73712, 'step': 1850, 'algorithm': 'optimal_bst'}
I0715 11:41:06.516070 133586423690752 run.py:723] (val) algo optimal_bst step 1900: {'root': 0.9137110726643599, 'score': 0.9137110726643599, 'examples_seen': 75712, 'step': 1900, 'algorithm': 'optimal_bst'}
I0715 11:41:09.457657 133586423690752 run.py:723] (val) algo optimal_bst step 1950: {'root': 0.9150086505190311, 'score': 0.9150086505190311, 'examples_seen': 77664, 'step': 1950, 'algorithm': 'optimal_bst'}
I0715 11:41:12.478698 133586423690752 run.py:723] (val) algo optimal_bst step 2000: {'root': 0.9213884083044983, 'score': 0.9213884083044983, 'examples_seen': 79632, 'step': 2000, 'algorithm': 'optimal_bst'}
I0715 11:41:15.372535 133586423690752 run.py:723] (val) algo optimal_bst step 2050: {'root': 0.9239294982698962, 'score': 0.9239294982698962, 'examples_seen': 81680, 'step': 2050, 'algorithm': 'optimal_bst'}
I0715 11:41:18.255005 133586423690752 run.py:723] (val) algo optimal_bst step 2100: {'root': 0.9016544117647058, 'score': 0.9016544117647058, 'examples_seen': 83680, 'step': 2100, 'algorithm': 'optimal_bst'}
I0715 11:41:21.129377 133586423690752 run.py:723] (val) algo optimal_bst step 2150: {'root': 0.9179282006920415, 'score': 0.9179282006920415, 'examples_seen': 85680, 'step': 2150, 'algorithm': 'optimal_bst'}
I0715 11:41:23.997262 133586423690752 run.py:723] (val) algo optimal_bst step 2200: {'root': 0.9106833910034602, 'score': 0.9106833910034602, 'examples_seen': 87664, 'step': 2200, 'algorithm': 'optimal_bst'}
I0715 11:41:26.916242 133586423690752 run.py:723] (val) algo optimal_bst step 2250: {'root': 0.8978157439446367, 'score': 0.8978157439446367, 'examples_seen': 89632, 'step': 2250, 'algorithm': 'optimal_bst'}
I0715 11:41:29.870456 133586423690752 run.py:723] (val) algo optimal_bst step 2300: {'root': 0.9298226643598616, 'score': 0.9298226643598616, 'examples_seen': 91616, 'step': 2300, 'algorithm': 'optimal_bst'}
I0715 11:41:32.901014 133586423690752 run.py:723] (val) algo optimal_bst step 2350: {'root': 0.9332288062283737, 'score': 0.9332288062283737, 'examples_seen': 93568, 'step': 2350, 'algorithm': 'optimal_bst'}
I0715 11:41:35.822648 133586423690752 run.py:723] (val) algo optimal_bst step 2400: {'root': 0.8994377162629758, 'score': 0.8994377162629758, 'examples_seen': 95600, 'step': 2400, 'algorithm': 'optimal_bst'}
I0715 11:41:38.698164 133586423690752 run.py:723] (val) algo optimal_bst step 2450: {'root': 0.9267409169550173, 'score': 0.9267409169550173, 'examples_seen': 97632, 'step': 2450, 'algorithm': 'optimal_bst'}
I0715 11:41:41.568220 133586423690752 run.py:723] (val) algo optimal_bst step 2500: {'root': 0.934364186851211, 'score': 0.934364186851211, 'examples_seen': 99600, 'step': 2500, 'algorithm': 'optimal_bst'}
I0715 11:41:44.459389 133586423690752 run.py:723] (val) algo optimal_bst step 2550: {'root': 0.9027357266435986, 'score': 0.9027357266435986, 'examples_seen': 101600, 'step': 2550, 'algorithm': 'optimal_bst'}
I0715 11:41:47.369966 133586423690752 run.py:723] (val) algo optimal_bst step 2600: {'root': 0.9000865051903114, 'score': 0.9000865051903114, 'examples_seen': 103568, 'step': 2600, 'algorithm': 'optimal_bst'}
I0715 11:41:50.311461 133586423690752 run.py:723] (val) algo optimal_bst step 2650: {'root': 0.9237132352941176, 'score': 0.9237132352941176, 'examples_seen': 105520, 'step': 2650, 'algorithm': 'optimal_bst'}
I0715 11:41:53.325352 133586423690752 run.py:723] (val) algo optimal_bst step 2700: {'root': 0.928416955017301, 'score': 0.928416955017301, 'examples_seen': 107520, 'step': 2700, 'algorithm': 'optimal_bst'}
I0715 11:41:56.235763 133586423690752 run.py:723] (val) algo optimal_bst step 2750: {'root': 0.9313365051903114, 'score': 0.9313365051903114, 'examples_seen': 109520, 'step': 2750, 'algorithm': 'optimal_bst'}
I0715 11:41:59.117056 133586423690752 run.py:723] (val) algo optimal_bst step 2800: {'root': 0.9383109861591695, 'score': 0.9383109861591695, 'examples_seen': 111552, 'step': 2800, 'algorithm': 'optimal_bst'}
I0715 11:42:02.002359 133586423690752 run.py:723] (val) algo optimal_bst step 2850: {'root': 0.907871972318339, 'score': 0.907871972318339, 'examples_seen': 113552, 'step': 2850, 'algorithm': 'optimal_bst'}
I0715 11:42:04.879693 133586423690752 run.py:723] (val) algo optimal_bst step 2900: {'root': 0.9139273356401384, 'score': 0.9139273356401384, 'examples_seen': 115520, 'step': 2900, 'algorithm': 'optimal_bst'}
I0715 11:42:07.787865 133586423690752 run.py:723] (val) algo optimal_bst step 2950: {'root': 0.9391760380622838, 'score': 0.9391760380622838, 'examples_seen': 117520, 'step': 2950, 'algorithm': 'optimal_bst'}
I0715 11:42:10.744591 133586423690752 run.py:723] (val) algo optimal_bst step 3000: {'root': 0.9328503460207612, 'score': 0.9328503460207612, 'examples_seen': 119456, 'step': 3000, 'algorithm': 'optimal_bst'}
I0715 11:42:13.758036 133586423690752 run.py:723] (val) algo optimal_bst step 3050: {'root': 0.9378243944636678, 'score': 0.9378243944636678, 'examples_seen': 121424, 'step': 3050, 'algorithm': 'optimal_bst'}
I0715 11:42:16.654364 133586423690752 run.py:723] (val) algo optimal_bst step 3100: {'root': 0.9347426470588235, 'score': 0.9347426470588235, 'examples_seen': 123472, 'step': 3100, 'algorithm': 'optimal_bst'}
I0715 11:42:19.534417 133586423690752 run.py:723] (val) algo optimal_bst step 3150: {'root': 0.9373918685121108, 'score': 0.9373918685121108, 'examples_seen': 125472, 'step': 3150, 'algorithm': 'optimal_bst'}
I0715 11:42:22.404569 133586423690752 run.py:723] (val) algo optimal_bst step 3200: {'root': 0.9298226643598616, 'score': 0.9298226643598616, 'examples_seen': 127488, 'step': 3200, 'algorithm': 'optimal_bst'}
I0715 11:42:25.274695 133586423690752 run.py:723] (val) algo optimal_bst step 3250: {'root': 0.9191176470588235, 'score': 0.9191176470588235, 'examples_seen': 129456, 'step': 3250, 'algorithm': 'optimal_bst'}
I0715 11:42:28.193968 133586423690752 run.py:723] (val) algo optimal_bst step 3300: {'root': 0.9371215397923875, 'score': 0.9371215397923875, 'examples_seen': 131424, 'step': 3300, 'algorithm': 'optimal_bst'}
I0715 11:42:31.133977 133586423690752 run.py:723] (val) algo optimal_bst step 3350: {'root': 0.9424740484429066, 'score': 0.9424740484429066, 'examples_seen': 133408, 'step': 3350, 'algorithm': 'optimal_bst'}
I0715 11:42:34.444643 133586423690752 run.py:723] (val) algo optimal_bst step 3400: {'root': 0.9453395328719724, 'score': 0.9453395328719724, 'examples_seen': 135360, 'step': 3400, 'algorithm': 'optimal_bst'}
I0715 11:42:37.359383 133586423690752 run.py:723] (val) algo optimal_bst step 3450: {'root': 0.9396626297577855, 'score': 0.9396626297577855, 'examples_seen': 137392, 'step': 3450, 'algorithm': 'optimal_bst'}
I0715 11:42:40.229159 133586423690752 run.py:723] (val) algo optimal_bst step 3500: {'root': 0.9071150519031141, 'score': 0.9071150519031141, 'examples_seen': 139424, 'step': 3500, 'algorithm': 'optimal_bst'}
I0715 11:42:43.107234 133586423690752 run.py:723] (val) algo optimal_bst step 3550: {'root': 0.89657223183391, 'score': 0.89657223183391, 'examples_seen': 141408, 'step': 3550, 'algorithm': 'optimal_bst'}
I0715 11:42:45.959079 133586423690752 run.py:723] (val) algo optimal_bst step 3600: {'root': 0.9399329584775087, 'score': 0.9399329584775087, 'examples_seen': 143392, 'step': 3600, 'algorithm': 'optimal_bst'}
I0715 11:42:48.864672 133586423690752 run.py:723] (val) algo optimal_bst step 3650: {'root': 0.9456639273356401, 'score': 0.9456639273356401, 'examples_seen': 145360, 'step': 3650, 'algorithm': 'optimal_bst'}
I0715 11:42:51.826445 133586423690752 run.py:723] (val) algo optimal_bst step 3700: {'root': 0.9444744809688581, 'score': 0.9444744809688581, 'examples_seen': 147312, 'step': 3700, 'algorithm': 'optimal_bst'}
I0715 11:42:54.844736 133586423690752 run.py:723] (val) algo optimal_bst step 3750: {'root': 0.9443122837370242, 'score': 0.9443122837370242, 'examples_seen': 149312, 'step': 3750, 'algorithm': 'optimal_bst'}
I0715 11:42:57.749981 133586423690752 run.py:723] (val) algo optimal_bst step 3800: {'root': 0.9377703287197232, 'score': 0.9377703287197232, 'examples_seen': 151328, 'step': 3800, 'algorithm': 'optimal_bst'}
I0715 11:43:00.627218 133586423690752 run.py:723] (val) algo optimal_bst step 3850: {'root': 0.9319312283737025, 'score': 0.9319312283737025, 'examples_seen': 153344, 'step': 3850, 'algorithm': 'optimal_bst'}
I0715 11:43:03.494536 133586423690752 run.py:723] (val) algo optimal_bst step 3900: {'root': 0.9300389273356401, 'score': 0.9300389273356401, 'examples_seen': 155344, 'step': 3900, 'algorithm': 'optimal_bst'}
I0715 11:43:06.369211 133586423690752 run.py:723] (val) algo optimal_bst step 3950: {'root': 0.9418793252595156, 'score': 0.9418793252595156, 'examples_seen': 157312, 'step': 3950, 'algorithm': 'optimal_bst'}
I0715 11:43:09.279011 133586423690752 run.py:723] (val) algo optimal_bst step 4000: {'root': 0.9283628892733564, 'score': 0.9283628892733564, 'examples_seen': 159312, 'step': 4000, 'algorithm': 'optimal_bst'}
I0715 11:43:12.219900 133586423690752 run.py:723] (val) algo optimal_bst step 4050: {'root': 0.9478806228373703, 'score': 0.9478806228373703, 'examples_seen': 161248, 'step': 4050, 'algorithm': 'optimal_bst'}
I0715 11:43:15.251699 133586423690752 run.py:723] (val) algo optimal_bst step 4100: {'root': 0.943609429065744, 'score': 0.943609429065744, 'examples_seen': 163216, 'step': 4100, 'algorithm': 'optimal_bst'}
I0715 11:43:18.147299 133586423690752 run.py:723] (val) algo optimal_bst step 4150: {'root': 0.9477184256055363, 'score': 0.9477184256055363, 'examples_seen': 165280, 'step': 4150, 'algorithm': 'optimal_bst'}
I0715 11:43:21.031286 133586423690752 run.py:723] (val) algo optimal_bst step 4200: {'root': 0.9247404844290658, 'score': 0.9247404844290658, 'examples_seen': 167264, 'step': 4200, 'algorithm': 'optimal_bst'}
I0715 11:43:23.903142 133586423690752 run.py:723] (val) algo optimal_bst step 4250: {'root': 0.9182525951557093, 'score': 0.9182525951557093, 'examples_seen': 169280, 'step': 4250, 'algorithm': 'optimal_bst'}
I0715 11:43:26.771598 133586423690752 run.py:723] (val) algo optimal_bst step 4300: {'root': 0.9433391003460208, 'score': 0.9433391003460208, 'examples_seen': 171248, 'step': 4300, 'algorithm': 'optimal_bst'}
I0715 11:43:29.689242 133586423690752 run.py:723] (val) algo optimal_bst step 4350: {'root': 0.9375, 'score': 0.9375, 'examples_seen': 173216, 'step': 4350, 'algorithm': 'optimal_bst'}
I0715 11:43:32.608510 133586423690752 run.py:723] (val) algo optimal_bst step 4400: {'root': 0.9503135813148789, 'score': 0.9503135813148789, 'examples_seen': 175232, 'step': 4400, 'algorithm': 'optimal_bst'}
I0715 11:43:35.639433 133586423690752 run.py:723] (val) algo optimal_bst step 4450: {'root': 0.9457720588235294, 'score': 0.9457720588235294, 'examples_seen': 177168, 'step': 4450, 'algorithm': 'optimal_bst'}
I0715 11:43:38.539691 133586423690752 run.py:723] (val) algo optimal_bst step 4500: {'root': 0.9502595155709342, 'score': 0.9502595155709342, 'examples_seen': 179216, 'step': 4500, 'algorithm': 'optimal_bst'}
I0715 11:43:41.414616 133586423690752 run.py:723] (val) algo optimal_bst step 4550: {'root': 0.9503676470588235, 'score': 0.9503676470588235, 'examples_seen': 181232, 'step': 4550, 'algorithm': 'optimal_bst'}
I0715 11:43:44.309057 133586423690752 run.py:723] (val) algo optimal_bst step 4600: {'root': 0.9053308823529411, 'score': 0.9053308823529411, 'examples_seen': 183216, 'step': 4600, 'algorithm': 'optimal_bst'}
I0715 11:43:47.180591 133586423690752 run.py:723] (val) algo optimal_bst step 4650: {'root': 0.9431769031141869, 'score': 0.9431769031141869, 'examples_seen': 185200, 'step': 4650, 'algorithm': 'optimal_bst'}
I0715 11:43:50.086030 133586423690752 run.py:723] (val) algo optimal_bst step 4700: {'root': 0.9470696366782007, 'score': 0.9470696366782007, 'examples_seen': 187168, 'step': 4700, 'algorithm': 'optimal_bst'}
I0715 11:43:53.038725 133586423690752 run.py:723] (val) algo optimal_bst step 4750: {'root': 0.9458801903114187, 'score': 0.9458801903114187, 'examples_seen': 189136, 'step': 4750, 'algorithm': 'optimal_bst'}
I0715 11:43:56.012258 133586423690752 run.py:723] (val) algo optimal_bst step 4800: {'root': 0.948799740484429, 'score': 0.948799740484429, 'examples_seen': 191120, 'step': 4800, 'algorithm': 'optimal_bst'}
I0715 11:43:58.917109 133586423690752 run.py:723] (val) algo optimal_bst step 4850: {'root': 0.9486916089965398, 'score': 0.9486916089965398, 'examples_seen': 193136, 'step': 4850, 'algorithm': 'optimal_bst'}
I0715 11:44:01.794384 133586423690752 run.py:723] (val) algo optimal_bst step 4900: {'root': 0.9539359861591695, 'score': 0.9539359861591695, 'examples_seen': 195152, 'step': 4900, 'algorithm': 'optimal_bst'}
I0715 11:44:04.680648 133586423690752 run.py:723] (val) algo optimal_bst step 4950: {'root': 0.9568555363321799, 'score': 0.9568555363321799, 'examples_seen': 197152, 'step': 4950, 'algorithm': 'optimal_bst'}
I0715 11:44:07.576868 133586423690752 run.py:723] (val) algo optimal_bst step 5000: {'root': 0.9255514705882353, 'score': 0.9255514705882353, 'examples_seen': 199120, 'step': 5000, 'algorithm': 'optimal_bst'}
I0715 11:44:10.482669 133586423690752 run.py:723] (val) algo optimal_bst step 5050: {'root': 0.9285250865051903, 'score': 0.9285250865051903, 'examples_seen': 201120, 'step': 5050, 'algorithm': 'optimal_bst'}
I0715 11:44:13.422325 133586423690752 run.py:723] (val) algo optimal_bst step 5100: {'root': 0.9453395328719724, 'score': 0.9453395328719724, 'examples_seen': 203072, 'step': 5100, 'algorithm': 'optimal_bst'}
I0715 11:44:16.435142 133586423690752 run.py:723] (val) algo optimal_bst step 5150: {'root': 0.9492322664359861, 'score': 0.9492322664359861, 'examples_seen': 205024, 'step': 5150, 'algorithm': 'optimal_bst'}
I0715 11:44:19.330139 133586423690752 run.py:723] (val) algo optimal_bst step 5200: {'root': 0.9491241349480969, 'score': 0.9491241349480969, 'examples_seen': 207088, 'step': 5200, 'algorithm': 'optimal_bst'}
I0715 11:44:22.210922 133586423690752 run.py:723] (val) algo optimal_bst step 5250: {'root': 0.9491241349480969, 'score': 0.9491241349480969, 'examples_seen': 209072, 'step': 5250, 'algorithm': 'optimal_bst'}
I0715 11:44:25.082408 133586423690752 run.py:723] (val) algo optimal_bst step 5300: {'root': 0.9416089965397924, 'score': 0.9416089965397924, 'examples_seen': 211088, 'step': 5300, 'algorithm': 'optimal_bst'}
I0715 11:44:27.952342 133586423690752 run.py:723] (val) algo optimal_bst step 5350: {'root': 0.945231401384083, 'score': 0.945231401384083, 'examples_seen': 213072, 'step': 5350, 'algorithm': 'optimal_bst'}
I0715 11:44:30.874088 133586423690752 run.py:723] (val) algo optimal_bst step 5400: {'root': 0.9462586505190311, 'score': 0.9462586505190311, 'examples_seen': 215024, 'step': 5400, 'algorithm': 'optimal_bst'}
I0715 11:44:33.818253 133586423690752 run.py:723] (val) algo optimal_bst step 5450: {'root': 0.9496647923875432, 'score': 0.9496647923875432, 'examples_seen': 217024, 'step': 5450, 'algorithm': 'optimal_bst'}
I0715 11:44:36.831679 133586423690752 run.py:723] (val) algo optimal_bst step 5500: {'root': 0.9461505190311419, 'score': 0.9461505190311419, 'examples_seen': 218960, 'step': 5500, 'algorithm': 'optimal_bst'}
I0715 11:44:39.733050 133586423690752 run.py:723] (val) algo optimal_bst step 5550: {'root': 0.9536115916955017, 'score': 0.9536115916955017, 'examples_seen': 221008, 'step': 5550, 'algorithm': 'optimal_bst'}
I0715 11:44:42.607660 133586423690752 run.py:723] (val) algo optimal_bst step 5600: {'root': 0.9524221453287197, 'score': 0.9524221453287197, 'examples_seen': 223024, 'step': 5600, 'algorithm': 'optimal_bst'}
I0715 11:44:45.477897 133586423690752 run.py:723] (val) algo optimal_bst step 5650: {'root': 0.9537737889273357, 'score': 0.9537737889273357, 'examples_seen': 225008, 'step': 5650, 'algorithm': 'optimal_bst'}
I0715 11:44:48.345060 133586423690752 run.py:723] (val) algo optimal_bst step 5700: {'root': 0.9481509515570934, 'score': 0.9481509515570934, 'examples_seen': 227008, 'step': 5700, 'algorithm': 'optimal_bst'}
I0715 11:44:51.254558 133586423690752 run.py:723] (val) algo optimal_bst step 5750: {'root': 0.9533953287197232, 'score': 0.9533953287197232, 'examples_seen': 228960, 'step': 5750, 'algorithm': 'optimal_bst'}
I0715 11:44:54.195207 133586423690752 run.py:723] (val) algo optimal_bst step 5800: {'root': 0.9444744809688581, 'score': 0.9444744809688581, 'examples_seen': 230928, 'step': 5800, 'algorithm': 'optimal_bst'}
I0715 11:44:57.210401 133586423690752 run.py:723] (val) algo optimal_bst step 5850: {'root': 0.9502054498269896, 'score': 0.9502054498269896, 'examples_seen': 232912, 'step': 5850, 'algorithm': 'optimal_bst'}
I0715 11:45:00.118393 133586423690752 run.py:723] (val) algo optimal_bst step 5900: {'root': 0.936148356401384, 'score': 0.936148356401384, 'examples_seen': 234928, 'step': 5900, 'algorithm': 'optimal_bst'}
I0715 11:45:02.984750 133586423690752 run.py:723] (val) algo optimal_bst step 5950: {'root': 0.9460423875432526, 'score': 0.9460423875432526, 'examples_seen': 236944, 'step': 5950, 'algorithm': 'optimal_bst'}
I0715 11:45:05.837786 133586423690752 run.py:723] (val) algo optimal_bst step 6000: {'root': 0.9209558823529411, 'score': 0.9209558823529411, 'examples_seen': 238944, 'step': 6000, 'algorithm': 'optimal_bst'}
I0715 11:45:08.715954 133586423690752 run.py:723] (val) algo optimal_bst step 6050: {'root': 0.951773356401384, 'score': 0.951773356401384, 'examples_seen': 240928, 'step': 6050, 'algorithm': 'optimal_bst'}
I0715 11:45:11.620823 133586423690752 run.py:723] (val) algo optimal_bst step 6100: {'root': 0.9515570934256056, 'score': 0.9515570934256056, 'examples_seen': 242912, 'step': 6100, 'algorithm': 'optimal_bst'}
I0715 11:45:14.563659 133586423690752 run.py:723] (val) algo optimal_bst step 6150: {'root': 0.9550173010380623, 'score': 0.9550173010380623, 'examples_seen': 244864, 'step': 6150, 'algorithm': 'optimal_bst'}
I0715 11:45:17.580260 133586423690752 run.py:723] (val) algo optimal_bst step 6200: {'root': 0.954314446366782, 'score': 0.954314446366782, 'examples_seen': 246816, 'step': 6200, 'algorithm': 'optimal_bst'}
I0715 11:45:20.477858 133586423690752 run.py:723] (val) algo optimal_bst step 6250: {'root': 0.9544225778546713, 'score': 0.9544225778546713, 'examples_seen': 248880, 'step': 6250, 'algorithm': 'optimal_bst'}
I0715 11:45:23.360685 133586423690752 run.py:723] (val) algo optimal_bst step 6300: {'root': 0.951340830449827, 'score': 0.951340830449827, 'examples_seen': 250880, 'step': 6300, 'algorithm': 'optimal_bst'}
I0715 11:45:26.238057 133586423690752 run.py:723] (val) algo optimal_bst step 6350: {'root': 0.926794982698962, 'score': 0.926794982698962, 'examples_seen': 252880, 'step': 6350, 'algorithm': 'optimal_bst'}
I0715 11:45:29.106289 133586423690752 run.py:723] (val) algo optimal_bst step 6400: {'root': 0.950151384083045, 'score': 0.950151384083045, 'examples_seen': 254864, 'step': 6400, 'algorithm': 'optimal_bst'}
I0715 11:45:32.025368 133586423690752 run.py:723] (val) algo optimal_bst step 6450: {'root': 0.9517192906574394, 'score': 0.9517192906574394, 'examples_seen': 256816, 'step': 6450, 'algorithm': 'optimal_bst'}
I0715 11:45:34.969717 133586423690752 run.py:723] (val) algo optimal_bst step 6500: {'root': 0.9451773356401384, 'score': 0.9451773356401384, 'examples_seen': 258816, 'step': 6500, 'algorithm': 'optimal_bst'}
I0715 11:45:37.988211 133586423690752 run.py:723] (val) algo optimal_bst step 6550: {'root': 0.9546388408304498, 'score': 0.9546388408304498, 'examples_seen': 260752, 'step': 6550, 'algorithm': 'optimal_bst'}
I0715 11:45:40.870823 133586423690752 run.py:723] (val) algo optimal_bst step 6600: {'root': 0.9567474048442907, 'score': 0.9567474048442907, 'examples_seen': 262800, 'step': 6600, 'algorithm': 'optimal_bst'}
I0715 11:45:43.721261 133586423690752 run.py:723] (val) algo optimal_bst step 6650: {'root': 0.9511786332179931, 'score': 0.9511786332179931, 'examples_seen': 264832, 'step': 6650, 'algorithm': 'optimal_bst'}
I0715 11:45:46.596084 133586423690752 run.py:723] (val) algo optimal_bst step 6700: {'root': 0.9505298442906575, 'score': 0.9505298442906575, 'examples_seen': 266800, 'step': 6700, 'algorithm': 'optimal_bst'}
I0715 11:45:49.460580 133586423690752 run.py:723] (val) algo optimal_bst step 6750: {'root': 0.9324178200692042, 'score': 0.9324178200692042, 'examples_seen': 268800, 'step': 6750, 'algorithm': 'optimal_bst'}
I0715 11:45:52.365064 133586423690752 run.py:723] (val) algo optimal_bst step 6800: {'root': 0.9459883217993079, 'score': 0.9459883217993079, 'examples_seen': 270752, 'step': 6800, 'algorithm': 'optimal_bst'}
I0715 11:45:55.294617 133586423690752 run.py:723] (val) algo optimal_bst step 6850: {'root': 0.9484212802768166, 'score': 0.9484212802768166, 'examples_seen': 272736, 'step': 6850, 'algorithm': 'optimal_bst'}
I0715 11:45:58.289808 133586423690752 run.py:723] (val) algo optimal_bst step 6900: {'root': 0.9526384083044983, 'score': 0.9526384083044983, 'examples_seen': 274720, 'step': 6900, 'algorithm': 'optimal_bst'}
I0715 11:46:01.200038 133586423690752 run.py:723] (val) algo optimal_bst step 6950: {'root': 0.9510705017301038, 'score': 0.9510705017301038, 'examples_seen': 276736, 'step': 6950, 'algorithm': 'optimal_bst'}
I0715 11:46:04.081519 133586423690752 run.py:723] (val) algo optimal_bst step 7000: {'root': 0.9516652249134948, 'score': 0.9516652249134948, 'examples_seen': 278768, 'step': 7000, 'algorithm': 'optimal_bst'}
I0715 11:46:06.944705 133586423690752 run.py:723] (val) algo optimal_bst step 7050: {'root': 0.9383650519031141, 'score': 0.9383650519031141, 'examples_seen': 280752, 'step': 7050, 'algorithm': 'optimal_bst'}
I0715 11:46:09.824958 133586423690752 run.py:723] (val) algo optimal_bst step 7100: {'root': 0.9377703287197232, 'score': 0.9377703287197232, 'examples_seen': 282736, 'step': 7100, 'algorithm': 'optimal_bst'}
I0715 11:46:12.733720 133586423690752 run.py:723] (val) algo optimal_bst step 7150: {'root': 0.9553957612456747, 'score': 0.9553957612456747, 'examples_seen': 284720, 'step': 7150, 'algorithm': 'optimal_bst'}
I0715 11:46:15.692953 133586423690752 run.py:723] (val) algo optimal_bst step 7200: {'root': 0.9599372837370242, 'score': 0.9599372837370242, 'examples_seen': 286672, 'step': 7200, 'algorithm': 'optimal_bst'}
I0715 11:46:18.722245 133586423690752 run.py:723] (val) algo optimal_bst step 7250: {'root': 0.9533412629757786, 'score': 0.9533412629757786, 'examples_seen': 288640, 'step': 7250, 'algorithm': 'optimal_bst'}
I0715 11:46:21.623044 133586423690752 run.py:723] (val) algo optimal_bst step 7300: {'root': 0.9583693771626297, 'score': 0.9583693771626297, 'examples_seen': 290688, 'step': 7300, 'algorithm': 'optimal_bst'}
I0715 11:46:24.502597 133586423690752 run.py:723] (val) algo optimal_bst step 7350: {'root': 0.9536656574394463, 'score': 0.9536656574394463, 'examples_seen': 292688, 'step': 7350, 'algorithm': 'optimal_bst'}
I0715 11:46:27.378540 133586423690752 run.py:723] (val) algo optimal_bst step 7400: {'root': 0.9551794982698962, 'score': 0.9551794982698962, 'examples_seen': 294688, 'step': 7400, 'algorithm': 'optimal_bst'}
I0715 11:46:30.259524 133586423690752 run.py:723] (val) algo optimal_bst step 7450: {'root': 0.9338235294117647, 'score': 0.9338235294117647, 'examples_seen': 296672, 'step': 7450, 'algorithm': 'optimal_bst'}
I0715 11:46:33.176786 133586423690752 run.py:723] (val) algo optimal_bst step 7500: {'root': 0.9565311418685121, 'score': 0.9565311418685121, 'examples_seen': 298624, 'step': 7500, 'algorithm': 'optimal_bst'}
I0715 11:46:36.119816 133586423690752 run.py:723] (val) algo optimal_bst step 7550: {'root': 0.9411224048442907, 'score': 0.9411224048442907, 'examples_seen': 300624, 'step': 7550, 'algorithm': 'optimal_bst'}
I0715 11:46:39.133090 133586423690752 run.py:723] (val) algo optimal_bst step 7600: {'root': 0.9538819204152249, 'score': 0.9538819204152249, 'examples_seen': 302576, 'step': 7600, 'algorithm': 'optimal_bst'}
I0715 11:46:42.038237 133586423690752 run.py:723] (val) algo optimal_bst step 7650: {'root': 0.9536656574394463, 'score': 0.9536656574394463, 'examples_seen': 304608, 'step': 7650, 'algorithm': 'optimal_bst'}
I0715 11:46:44.910427 133586423690752 run.py:723] (val) algo optimal_bst step 7700: {'root': 0.9571258650519031, 'score': 0.9571258650519031, 'examples_seen': 306640, 'step': 7700, 'algorithm': 'optimal_bst'}
I0715 11:46:47.786886 133586423690752 run.py:723] (val) algo optimal_bst step 7750: {'root': 0.9490160034602076, 'score': 0.9490160034602076, 'examples_seen': 308608, 'step': 7750, 'algorithm': 'optimal_bst'}
I0715 11:46:50.654067 133586423690752 run.py:723] (val) algo optimal_bst step 7800: {'root': 0.9523140138408305, 'score': 0.9523140138408305, 'examples_seen': 310608, 'step': 7800, 'algorithm': 'optimal_bst'}
I0715 11:46:53.559416 133586423690752 run.py:723] (val) algo optimal_bst step 7850: {'root': 0.9563148788927336, 'score': 0.9563148788927336, 'examples_seen': 312576, 'step': 7850, 'algorithm': 'optimal_bst'}
I0715 11:46:56.501542 133586423690752 run.py:723] (val) algo optimal_bst step 7900: {'root': 0.9587478373702422, 'score': 0.9587478373702422, 'examples_seen': 314528, 'step': 7900, 'algorithm': 'optimal_bst'}
I0715 11:46:59.515144 133586423690752 run.py:723] (val) algo optimal_bst step 7950: {'root': 0.9582612456747405, 'score': 0.9582612456747405, 'examples_seen': 316528, 'step': 7950, 'algorithm': 'optimal_bst'}
I0715 11:47:02.423893 133586423690752 run.py:723] (val) algo optimal_bst step 8000: {'root': 0.9619917820069204, 'score': 0.9619917820069204, 'examples_seen': 318528, 'step': 8000, 'algorithm': 'optimal_bst'}
I0715 11:47:05.323231 133586423690752 run.py:723] (val) algo optimal_bst step 8050: {'root': 0.9611267301038062, 'score': 0.9611267301038062, 'examples_seen': 320560, 'step': 8050, 'algorithm': 'optimal_bst'}
I0715 11:47:08.190541 133586423690752 run.py:723] (val) algo optimal_bst step 8100: {'root': 0.9551794982698962, 'score': 0.9551794982698962, 'examples_seen': 322544, 'step': 8100, 'algorithm': 'optimal_bst'}
I0715 11:47:11.066704 133586423690752 run.py:723] (val) algo optimal_bst step 8150: {'root': 0.9493944636678201, 'score': 0.9493944636678201, 'examples_seen': 324528, 'step': 8150, 'algorithm': 'optimal_bst'}
I0715 11:47:13.971040 133586423690752 run.py:723] (val) algo optimal_bst step 8200: {'root': 0.9408520761245674, 'score': 0.9408520761245674, 'examples_seen': 326528, 'step': 8200, 'algorithm': 'optimal_bst'}
I0715 11:47:16.917899 133586423690752 run.py:723] (val) algo optimal_bst step 8250: {'root': 0.9632352941176471, 'score': 0.9632352941176471, 'examples_seen': 328464, 'step': 8250, 'algorithm': 'optimal_bst'}
I0715 11:47:19.941823 133586423690752 run.py:723] (val) algo optimal_bst step 8300: {'root': 0.9555579584775087, 'score': 0.9555579584775087, 'examples_seen': 330432, 'step': 8300, 'algorithm': 'optimal_bst'}
I0715 11:47:22.838245 133586423690752 run.py:723] (val) algo optimal_bst step 8350: {'root': 0.9553957612456747, 'score': 0.9553957612456747, 'examples_seen': 332480, 'step': 8350, 'algorithm': 'optimal_bst'}
I0715 11:47:25.719802 133586423690752 run.py:723] (val) algo optimal_bst step 8400: {'root': 0.9567474048442907, 'score': 0.9567474048442907, 'examples_seen': 334480, 'step': 8400, 'algorithm': 'optimal_bst'}
I0715 11:47:28.596765 133586423690752 run.py:723] (val) algo optimal_bst step 8450: {'root': 0.9472858996539792, 'score': 0.9472858996539792, 'examples_seen': 336480, 'step': 8450, 'algorithm': 'optimal_bst'}
I0715 11:47:31.460979 133586423690752 run.py:723] (val) algo optimal_bst step 8500: {'root': 0.9364186851211073, 'score': 0.9364186851211073, 'examples_seen': 338464, 'step': 8500, 'algorithm': 'optimal_bst'}
I0715 11:47:34.379142 133586423690752 run.py:723] (val) algo optimal_bst step 8550: {'root': 0.9510705017301038, 'score': 0.9510705017301038, 'examples_seen': 340432, 'step': 8550, 'algorithm': 'optimal_bst'}
I0715 11:47:37.321775 133586423690752 run.py:723] (val) algo optimal_bst step 8600: {'root': 0.9584234429065744, 'score': 0.9584234429065744, 'examples_seen': 342416, 'step': 8600, 'algorithm': 'optimal_bst'}
I0715 11:47:40.337751 133586423690752 run.py:723] (val) algo optimal_bst step 8650: {'root': 0.9597750865051903, 'score': 0.9597750865051903, 'examples_seen': 344368, 'step': 8650, 'algorithm': 'optimal_bst'}
I0715 11:47:43.231865 133586423690752 run.py:723] (val) algo optimal_bst step 8700: {'root': 0.957450259515571, 'score': 0.957450259515571, 'examples_seen': 346400, 'step': 8700, 'algorithm': 'optimal_bst'}
I0715 11:47:46.102915 133586423690752 run.py:723] (val) algo optimal_bst step 8750: {'root': 0.9578287197231834, 'score': 0.9578287197231834, 'examples_seen': 348432, 'step': 8750, 'algorithm': 'optimal_bst'}
I0715 11:47:48.979794 133586423690752 run.py:723] (val) algo optimal_bst step 8800: {'root': 0.9417711937716263, 'score': 0.9417711937716263, 'examples_seen': 350416, 'step': 8800, 'algorithm': 'optimal_bst'}
I0715 11:47:51.849169 133586423690752 run.py:723] (val) algo optimal_bst step 8850: {'root': 0.9492322664359861, 'score': 0.9492322664359861, 'examples_seen': 352400, 'step': 8850, 'algorithm': 'optimal_bst'}
I0715 11:47:54.757389 133586423690752 run.py:723] (val) algo optimal_bst step 8900: {'root': 0.9518274221453287, 'score': 0.9518274221453287, 'examples_seen': 354368, 'step': 8900, 'algorithm': 'optimal_bst'}
I0715 11:47:57.700385 133586423690752 run.py:723] (val) algo optimal_bst step 8950: {'root': 0.9539359861591695, 'score': 0.9539359861591695, 'examples_seen': 356320, 'step': 8950, 'algorithm': 'optimal_bst'}
I0715 11:48:00.720552 133586423690752 run.py:723] (val) algo optimal_bst step 9000: {'root': 0.9616673875432526, 'score': 0.9616673875432526, 'examples_seen': 358320, 'step': 9000, 'algorithm': 'optimal_bst'}
I0715 11:48:03.627462 133586423690752 run.py:723] (val) algo optimal_bst step 9050: {'root': 0.9552876297577855, 'score': 0.9552876297577855, 'examples_seen': 360320, 'step': 9050, 'algorithm': 'optimal_bst'}
I0715 11:48:06.508176 133586423690752 run.py:723] (val) algo optimal_bst step 9100: {'root': 0.9441500865051903, 'score': 0.9441500865051903, 'examples_seen': 362352, 'step': 9100, 'algorithm': 'optimal_bst'}
I0715 11:48:09.374517 133586423690752 run.py:723] (val) algo optimal_bst step 9150: {'root': 0.9621539792387543, 'score': 0.9621539792387543, 'examples_seen': 364352, 'step': 9150, 'algorithm': 'optimal_bst'}
I0715 11:48:12.247341 133586423690752 run.py:723] (val) algo optimal_bst step 9200: {'root': 0.9496647923875432, 'score': 0.9496647923875432, 'examples_seen': 366320, 'step': 9200, 'algorithm': 'optimal_bst'}
I0715 11:48:15.152286 133586423690752 run.py:723] (val) algo optimal_bst step 9250: {'root': 0.9539359861591695, 'score': 0.9539359861591695, 'examples_seen': 368320, 'step': 9250, 'algorithm': 'optimal_bst'}
I0715 11:48:18.095041 133586423690752 run.py:723] (val) algo optimal_bst step 9300: {'root': 0.9611267301038062, 'score': 0.9611267301038062, 'examples_seen': 370272, 'step': 9300, 'algorithm': 'optimal_bst'}
I0715 11:48:21.115235 133586423690752 run.py:723] (val) algo optimal_bst step 9350: {'root': 0.9485294117647058, 'score': 0.9485294117647058, 'examples_seen': 372240, 'step': 9350, 'algorithm': 'optimal_bst'}
I0715 11:48:24.010849 133586423690752 run.py:723] (val) algo optimal_bst step 9400: {'root': 0.9624243079584776, 'score': 0.9624243079584776, 'examples_seen': 374288, 'step': 9400, 'algorithm': 'optimal_bst'}
I0715 11:48:26.892102 133586423690752 run.py:723] (val) algo optimal_bst step 9450: {'root': 0.954746972318339, 'score': 0.954746972318339, 'examples_seen': 376288, 'step': 9450, 'algorithm': 'optimal_bst'}
I0715 11:48:29.765230 133586423690752 run.py:723] (val) algo optimal_bst step 9500: {'root': 0.9356076989619377, 'score': 0.9356076989619377, 'examples_seen': 378304, 'step': 9500, 'algorithm': 'optimal_bst'}
I0715 11:48:32.633360 133586423690752 run.py:723] (val) algo optimal_bst step 9550: {'root': 0.9546388408304498, 'score': 0.9546388408304498, 'examples_seen': 380272, 'step': 9550, 'algorithm': 'optimal_bst'}
I0715 11:48:35.554772 133586423690752 run.py:723] (val) algo optimal_bst step 9600: {'root': 0.9592884948096886, 'score': 0.9592884948096886, 'examples_seen': 382240, 'step': 9600, 'algorithm': 'optimal_bst'}
I0715 11:48:38.510124 133586423690752 run.py:723] (val) algo optimal_bst step 9650: {'root': 0.9571799307958477, 'score': 0.9571799307958477, 'examples_seen': 384224, 'step': 9650, 'algorithm': 'optimal_bst'}
I0715 11:48:41.529751 133586423690752 run.py:723] (val) algo optimal_bst step 9700: {'root': 0.9564230103806228, 'score': 0.9564230103806228, 'examples_seen': 386176, 'step': 9700, 'algorithm': 'optimal_bst'}
I0715 11:48:44.430437 133586423690752 run.py:723] (val) algo optimal_bst step 9750: {'root': 0.9530168685121108, 'score': 0.9530168685121108, 'examples_seen': 388224, 'step': 9750, 'algorithm': 'optimal_bst'}
I0715 11:48:47.302084 133586423690752 run.py:723] (val) algo optimal_bst step 9800: {'root': 0.9542063148788927, 'score': 0.9542063148788927, 'examples_seen': 390240, 'step': 9800, 'algorithm': 'optimal_bst'}
I0715 11:48:50.176647 133586423690752 run.py:723] (val) algo optimal_bst step 9850: {'root': 0.9604238754325259, 'score': 0.9604238754325259, 'examples_seen': 392224, 'step': 9850, 'algorithm': 'optimal_bst'}
I0715 11:48:53.043606 133586423690752 run.py:723] (val) algo optimal_bst step 9900: {'root': 0.9531790657439446, 'score': 0.9531790657439446, 'examples_seen': 394208, 'step': 9900, 'algorithm': 'optimal_bst'}
I0715 11:48:55.950612 133586423690752 run.py:723] (val) algo optimal_bst step 9950: {'root': 0.9572339965397924, 'score': 0.9572339965397924, 'examples_seen': 396176, 'step': 9950, 'algorithm': 'optimal_bst'}
I0715 11:48:58.604836 133586423690752 run.py:753] Restoring best model from checkpoint...
I0715 11:49:12.334219 133586423690752 run.py:768] (test) algo optimal_bst : {'root': 0.7649334319526627, 'score': 0.7649334319526627, 'examples_seen': 398112, 'step': 10000, 'algorithm': 'optimal_bst'}
I0715 11:49:12.334399 133586423690752 run.py:770] Done!
