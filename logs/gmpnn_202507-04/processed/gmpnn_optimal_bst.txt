I0716 22:23:32.870569 128188165961216 run.py:722] (val) algo optimal_bst step 0: {'root': 0.5055147058823529, 'score': 0.5055147058823529, 'examples_seen': 64, 'step': 0, 'algorithm': 'optimal_bst'}
I0716 22:25:15.159733 128188165961216 run.py:722] (val) algo optimal_bst step 50: {'root': 0.6066176470588235, 'score': 0.6066176470588235, 'examples_seen': 2080, 'step': 50, 'algorithm': 'optimal_bst'}
I0716 22:25:18.125952 128188165961216 run.py:722] (val) algo optimal_bst step 100: {'root': 0.6773356401384083, 'score': 0.6773356401384083, 'examples_seen': 4064, 'step': 100, 'algorithm': 'optimal_bst'}
I0716 22:25:21.145545 128188165961216 run.py:722] (val) algo optimal_bst step 150: {'root': 0.7880082179930796, 'score': 0.7880082179930796, 'examples_seen': 6016, 'step': 150, 'algorithm': 'optimal_bst'}
I0716 22:25:24.188916 128188165961216 run.py:722] (val) algo optimal_bst step 200: {'root': 0.7787089100346021, 'score': 0.7787089100346021, 'examples_seen': 8016, 'step': 200, 'algorithm': 'optimal_bst'}
I0716 22:25:27.286746 128188165961216 run.py:722] (val) algo optimal_bst step 250: {'root': 0.7827638408304498, 'score': 0.7827638408304498, 'examples_seen': 9952, 'step': 250, 'algorithm': 'optimal_bst'}
I0716 22:25:30.267810 128188165961216 run.py:722] (val) algo optimal_bst step 300: {'root': 0.7648140138408305, 'score': 0.7648140138408305, 'examples_seen': 12000, 'step': 300, 'algorithm': 'optimal_bst'}
I0716 22:25:33.215838 128188165961216 run.py:722] (val) algo optimal_bst step 350: {'root': 0.8754865916955017, 'score': 0.8754865916955017, 'examples_seen': 14032, 'step': 350, 'algorithm': 'optimal_bst'}
I0716 22:25:36.180049 128188165961216 run.py:722] (val) algo optimal_bst step 400: {'root': 0.8841911764705882, 'score': 0.8841911764705882, 'examples_seen': 16000, 'step': 400, 'algorithm': 'optimal_bst'}
I0716 22:25:39.138231 128188165961216 run.py:722] (val) algo optimal_bst step 450: {'root': 0.8872188581314879, 'score': 0.8872188581314879, 'examples_seen': 18000, 'step': 450, 'algorithm': 'optimal_bst'}
I0716 22:25:42.141924 128188165961216 run.py:722] (val) algo optimal_bst step 500: {'root': 0.9039251730103807, 'score': 0.9039251730103807, 'examples_seen': 19952, 'step': 500, 'algorithm': 'optimal_bst'}
I0716 22:25:45.173151 128188165961216 run.py:722] (val) algo optimal_bst step 550: {'root': 0.8878135813148789, 'score': 0.8878135813148789, 'examples_seen': 21920, 'step': 550, 'algorithm': 'optimal_bst'}
I0716 22:25:48.268654 128188165961216 run.py:722] (val) algo optimal_bst step 600: {'root': 0.9052768166089965, 'score': 0.9052768166089965, 'examples_seen': 23904, 'step': 600, 'algorithm': 'optimal_bst'}
I0716 22:25:51.260898 128188165961216 run.py:722] (val) algo optimal_bst step 650: {'root': 0.8726751730103807, 'score': 0.8726751730103807, 'examples_seen': 25920, 'step': 650, 'algorithm': 'optimal_bst'}
I0716 22:25:54.209200 128188165961216 run.py:722] (val) algo optimal_bst step 700: {'root': 0.8713235294117647, 'score': 0.8713235294117647, 'examples_seen': 27952, 'step': 700, 'algorithm': 'optimal_bst'}
I0716 22:25:57.144757 128188165961216 run.py:722] (val) algo optimal_bst step 750: {'root': 0.9021410034602076, 'score': 0.9021410034602076, 'examples_seen': 29936, 'step': 750, 'algorithm': 'optimal_bst'}
I0716 22:26:00.097754 128188165961216 run.py:722] (val) algo optimal_bst step 800: {'root': 0.929768598615917, 'score': 0.929768598615917, 'examples_seen': 31920, 'step': 800, 'algorithm': 'optimal_bst'}
I0716 22:26:03.106141 128188165961216 run.py:722] (val) algo optimal_bst step 850: {'root': 0.8921929065743944, 'score': 0.8921929065743944, 'examples_seen': 33904, 'step': 850, 'algorithm': 'optimal_bst'}
I0716 22:26:06.123701 128188165961216 run.py:722] (val) algo optimal_bst step 900: {'root': 0.920685553633218, 'score': 0.920685553633218, 'examples_seen': 35856, 'step': 900, 'algorithm': 'optimal_bst'}
I0716 22:26:09.217552 128188165961216 run.py:722] (val) algo optimal_bst step 950: {'root': 0.9297145328719724, 'score': 0.9297145328719724, 'examples_seen': 37808, 'step': 950, 'algorithm': 'optimal_bst'}
I0716 22:26:12.190792 128188165961216 run.py:722] (val) algo optimal_bst step 1000: {'root': 0.8847318339100346, 'score': 0.8847318339100346, 'examples_seen': 39872, 'step': 1000, 'algorithm': 'optimal_bst'}
I0716 22:26:15.143303 128188165961216 run.py:722] (val) algo optimal_bst step 1050: {'root': 0.9154411764705882, 'score': 0.9154411764705882, 'examples_seen': 41872, 'step': 1050, 'algorithm': 'optimal_bst'}
I0716 22:26:18.091986 128188165961216 run.py:722] (val) algo optimal_bst step 1100: {'root': 0.889273356401384, 'score': 0.889273356401384, 'examples_seen': 43872, 'step': 1100, 'algorithm': 'optimal_bst'}
I0716 22:26:21.035023 128188165961216 run.py:722] (val) algo optimal_bst step 1150: {'root': 0.8650519031141869, 'score': 0.8650519031141869, 'examples_seen': 45856, 'step': 1150, 'algorithm': 'optimal_bst'}
I0716 22:26:24.032132 128188165961216 run.py:722] (val) algo optimal_bst step 1200: {'root': 0.9255514705882353, 'score': 0.9255514705882353, 'examples_seen': 47808, 'step': 1200, 'algorithm': 'optimal_bst'}
I0716 22:26:27.048295 128188165961216 run.py:722] (val) algo optimal_bst step 1250: {'root': 0.9157115051903114, 'score': 0.9157115051903114, 'examples_seen': 49808, 'step': 1250, 'algorithm': 'optimal_bst'}
I0716 22:26:30.142073 128188165961216 run.py:722] (val) algo optimal_bst step 1300: {'root': 0.9297145328719724, 'score': 0.9297145328719724, 'examples_seen': 51760, 'step': 1300, 'algorithm': 'optimal_bst'}
I0716 22:26:33.118624 128188165961216 run.py:722] (val) algo optimal_bst step 1350: {'root': 0.9322556228373703, 'score': 0.9322556228373703, 'examples_seen': 53792, 'step': 1350, 'algorithm': 'optimal_bst'}
I0716 22:26:36.084872 128188165961216 run.py:722] (val) algo optimal_bst step 1400: {'root': 0.9045739619377162, 'score': 0.9045739619377162, 'examples_seen': 55824, 'step': 1400, 'algorithm': 'optimal_bst'}
I0716 22:26:39.036681 128188165961216 run.py:722] (val) algo optimal_bst step 1450: {'root': 0.933336937716263, 'score': 0.933336937716263, 'examples_seen': 57792, 'step': 1450, 'algorithm': 'optimal_bst'}
I0716 22:26:42.011873 128188165961216 run.py:722] (val) algo optimal_bst step 1500: {'root': 0.9023572664359861, 'score': 0.9023572664359861, 'examples_seen': 59792, 'step': 1500, 'algorithm': 'optimal_bst'}
I0716 22:26:45.005251 128188165961216 run.py:722] (val) algo optimal_bst step 1550: {'root': 0.9313365051903114, 'score': 0.9313365051903114, 'examples_seen': 61744, 'step': 1550, 'algorithm': 'optimal_bst'}
I0716 22:26:48.031618 128188165961216 run.py:722] (val) algo optimal_bst step 1600: {'root': 0.9374459342560554, 'score': 0.9374459342560554, 'examples_seen': 63712, 'step': 1600, 'algorithm': 'optimal_bst'}
I0716 22:26:51.150329 128188165961216 run.py:722] (val) algo optimal_bst step 1650: {'root': 0.9416089965397924, 'score': 0.9416089965397924, 'examples_seen': 65712, 'step': 1650, 'algorithm': 'optimal_bst'}
I0716 22:26:54.159277 128188165961216 run.py:722] (val) algo optimal_bst step 1700: {'root': 0.9359320934256056, 'score': 0.9359320934256056, 'examples_seen': 67712, 'step': 1700, 'algorithm': 'optimal_bst'}
I0716 22:26:57.119273 128188165961216 run.py:722] (val) algo optimal_bst step 1750: {'root': 0.9160358996539792, 'score': 0.9160358996539792, 'examples_seen': 69744, 'step': 1750, 'algorithm': 'optimal_bst'}
I0716 22:27:00.068225 128188165961216 run.py:722] (val) algo optimal_bst step 1800: {'root': 0.9154411764705882, 'score': 0.9154411764705882, 'examples_seen': 71728, 'step': 1800, 'algorithm': 'optimal_bst'}
I0716 22:27:03.025667 128188165961216 run.py:722] (val) algo optimal_bst step 1850: {'root': 0.9083585640138409, 'score': 0.9083585640138409, 'examples_seen': 73712, 'step': 1850, 'algorithm': 'optimal_bst'}
I0716 22:27:06.015074 128188165961216 run.py:722] (val) algo optimal_bst step 1900: {'root': 0.9124134948096886, 'score': 0.9124134948096886, 'examples_seen': 75712, 'step': 1900, 'algorithm': 'optimal_bst'}
I0716 22:27:09.042165 128188165961216 run.py:722] (val) algo optimal_bst step 1950: {'root': 0.9425821799307958, 'score': 0.9425821799307958, 'examples_seen': 77664, 'step': 1950, 'algorithm': 'optimal_bst'}
I0716 22:27:12.163510 128188165961216 run.py:722] (val) algo optimal_bst step 2000: {'root': 0.94344723183391, 'score': 0.94344723183391, 'examples_seen': 79632, 'step': 2000, 'algorithm': 'optimal_bst'}
I0716 22:27:15.154502 128188165961216 run.py:722] (val) algo optimal_bst step 2050: {'root': 0.9449070069204152, 'score': 0.9449070069204152, 'examples_seen': 81680, 'step': 2050, 'algorithm': 'optimal_bst'}
I0716 22:27:18.136490 128188165961216 run.py:722] (val) algo optimal_bst step 2100: {'root': 0.9114943771626297, 'score': 0.9114943771626297, 'examples_seen': 83680, 'step': 2100, 'algorithm': 'optimal_bst'}
I0716 22:27:21.094382 128188165961216 run.py:722] (val) algo optimal_bst step 2150: {'root': 0.923226643598616, 'score': 0.923226643598616, 'examples_seen': 85680, 'step': 2150, 'algorithm': 'optimal_bst'}
I0716 22:27:24.046996 128188165961216 run.py:722] (val) algo optimal_bst step 2200: {'root': 0.9011678200692042, 'score': 0.9011678200692042, 'examples_seen': 87664, 'step': 2200, 'algorithm': 'optimal_bst'}
I0716 22:27:27.052660 128188165961216 run.py:722] (val) algo optimal_bst step 2250: {'root': 0.9354455017301038, 'score': 0.9354455017301038, 'examples_seen': 89632, 'step': 2250, 'algorithm': 'optimal_bst'}
I0716 22:27:30.090032 128188165961216 run.py:722] (val) algo optimal_bst step 2300: {'root': 0.9449610726643599, 'score': 0.9449610726643599, 'examples_seen': 91616, 'step': 2300, 'algorithm': 'optimal_bst'}
I0716 22:27:33.206037 128188165961216 run.py:722] (val) algo optimal_bst step 2350: {'root': 0.9437175605536332, 'score': 0.9437175605536332, 'examples_seen': 93568, 'step': 2350, 'algorithm': 'optimal_bst'}
I0716 22:27:36.178271 128188165961216 run.py:722] (val) algo optimal_bst step 2400: {'root': 0.9214965397923875, 'score': 0.9214965397923875, 'examples_seen': 95600, 'step': 2400, 'algorithm': 'optimal_bst'}
I0716 22:27:39.134562 128188165961216 run.py:722] (val) algo optimal_bst step 2450: {'root': 0.9352833044982699, 'score': 0.9352833044982699, 'examples_seen': 97632, 'step': 2450, 'algorithm': 'optimal_bst'}
I0716 22:27:42.089795 128188165961216 run.py:722] (val) algo optimal_bst step 2500: {'root': 0.91219723183391, 'score': 0.91219723183391, 'examples_seen': 99600, 'step': 2500, 'algorithm': 'optimal_bst'}
I0716 22:27:45.047876 128188165961216 run.py:722] (val) algo optimal_bst step 2550: {'root': 0.8963559688581315, 'score': 0.8963559688581315, 'examples_seen': 101600, 'step': 2550, 'algorithm': 'optimal_bst'}
I0716 22:27:48.038195 128188165961216 run.py:722] (val) algo optimal_bst step 2600: {'root': 0.9465289792387543, 'score': 0.9465289792387543, 'examples_seen': 103568, 'step': 2600, 'algorithm': 'optimal_bst'}
I0716 22:27:51.085664 128188165961216 run.py:722] (val) algo optimal_bst step 2650: {'root': 0.9430687716262975, 'score': 0.9430687716262975, 'examples_seen': 105520, 'step': 2650, 'algorithm': 'optimal_bst'}
I0716 22:27:54.189806 128188165961216 run.py:722] (val) algo optimal_bst step 2700: {'root': 0.9422037197231834, 'score': 0.9422037197231834, 'examples_seen': 107520, 'step': 2700, 'algorithm': 'optimal_bst'}
I0716 22:27:57.171603 128188165961216 run.py:722] (val) algo optimal_bst step 2750: {'root': 0.9191717128027682, 'score': 0.9191717128027682, 'examples_seen': 109520, 'step': 2750, 'algorithm': 'optimal_bst'}
I0716 22:28:00.131072 128188165961216 run.py:722] (val) algo optimal_bst step 2800: {'root': 0.9421496539792388, 'score': 0.9421496539792388, 'examples_seen': 111552, 'step': 2800, 'algorithm': 'optimal_bst'}
I0716 22:28:03.079216 128188165961216 run.py:722] (val) algo optimal_bst step 2850: {'root': 0.9403114186851211, 'score': 0.9403114186851211, 'examples_seen': 113552, 'step': 2850, 'algorithm': 'optimal_bst'}
I0716 22:28:06.036908 128188165961216 run.py:722] (val) algo optimal_bst step 2900: {'root': 0.939121972318339, 'score': 0.939121972318339, 'examples_seen': 115520, 'step': 2900, 'algorithm': 'optimal_bst'}
I0716 22:28:09.028276 128188165961216 run.py:722] (val) algo optimal_bst step 2950: {'root': 0.9405817474048442, 'score': 0.9405817474048442, 'examples_seen': 117520, 'step': 2950, 'algorithm': 'optimal_bst'}
I0716 22:28:12.056913 128188165961216 run.py:722] (val) algo optimal_bst step 3000: {'root': 0.9435012975778547, 'score': 0.9435012975778547, 'examples_seen': 119456, 'step': 3000, 'algorithm': 'optimal_bst'}
I0716 22:28:15.159726 128188165961216 run.py:722] (val) algo optimal_bst step 3050: {'root': 0.9439338235294118, 'score': 0.9439338235294118, 'examples_seen': 121424, 'step': 3050, 'algorithm': 'optimal_bst'}
I0716 22:28:18.134950 128188165961216 run.py:722] (val) algo optimal_bst step 3100: {'root': 0.9351211072664359, 'score': 0.9351211072664359, 'examples_seen': 123472, 'step': 3100, 'algorithm': 'optimal_bst'}
I0716 22:28:21.097412 128188165961216 run.py:722] (val) algo optimal_bst step 3150: {'root': 0.9427984429065744, 'score': 0.9427984429065744, 'examples_seen': 125472, 'step': 3150, 'algorithm': 'optimal_bst'}
I0716 22:28:24.048799 128188165961216 run.py:722] (val) algo optimal_bst step 3200: {'root': 0.9198205017301038, 'score': 0.9198205017301038, 'examples_seen': 127488, 'step': 3200, 'algorithm': 'optimal_bst'}
I0716 22:28:27.002367 128188165961216 run.py:722] (val) algo optimal_bst step 3250: {'root': 0.9493944636678201, 'score': 0.9493944636678201, 'examples_seen': 129456, 'step': 3250, 'algorithm': 'optimal_bst'}
I0716 22:28:30.025797 128188165961216 run.py:722] (val) algo optimal_bst step 3300: {'root': 0.9180363321799307, 'score': 0.9180363321799307, 'examples_seen': 131424, 'step': 3300, 'algorithm': 'optimal_bst'}
I0716 22:28:33.053000 128188165961216 run.py:722] (val) algo optimal_bst step 3350: {'root': 0.9453395328719724, 'score': 0.9453395328719724, 'examples_seen': 133408, 'step': 3350, 'algorithm': 'optimal_bst'}
I0716 22:28:36.155224 128188165961216 run.py:722] (val) algo optimal_bst step 3400: {'root': 0.9419333910034602, 'score': 0.9419333910034602, 'examples_seen': 135360, 'step': 3400, 'algorithm': 'optimal_bst'}
I0716 22:28:39.137820 128188165961216 run.py:722] (val) algo optimal_bst step 3450: {'root': 0.9445285467128027, 'score': 0.9445285467128027, 'examples_seen': 137392, 'step': 3450, 'algorithm': 'optimal_bst'}
I0716 22:28:42.091629 128188165961216 run.py:722] (val) algo optimal_bst step 3500: {'root': 0.9297145328719724, 'score': 0.9297145328719724, 'examples_seen': 139424, 'step': 3500, 'algorithm': 'optimal_bst'}
I0716 22:28:45.052451 128188165961216 run.py:722] (val) algo optimal_bst step 3550: {'root': 0.9156574394463668, 'score': 0.9156574394463668, 'examples_seen': 141408, 'step': 3550, 'algorithm': 'optimal_bst'}
I0716 22:28:48.005289 128188165961216 run.py:722] (val) algo optimal_bst step 3600: {'root': 0.9486375432525952, 'score': 0.9486375432525952, 'examples_seen': 143392, 'step': 3600, 'algorithm': 'optimal_bst'}
I0716 22:28:50.998944 128188165961216 run.py:722] (val) algo optimal_bst step 3650: {'root': 0.9423118512110726, 'score': 0.9423118512110726, 'examples_seen': 145360, 'step': 3650, 'algorithm': 'optimal_bst'}
I0716 22:28:54.028476 128188165961216 run.py:722] (val) algo optimal_bst step 3700: {'root': 0.9522058823529411, 'score': 0.9522058823529411, 'examples_seen': 147312, 'step': 3700, 'algorithm': 'optimal_bst'}
I0716 22:28:57.151407 128188165961216 run.py:722] (val) algo optimal_bst step 3750: {'root': 0.951773356401384, 'score': 0.951773356401384, 'examples_seen': 149312, 'step': 3750, 'algorithm': 'optimal_bst'}
I0716 22:29:00.140349 128188165961216 run.py:722] (val) algo optimal_bst step 3800: {'root': 0.926038062283737, 'score': 0.926038062283737, 'examples_seen': 151328, 'step': 3800, 'algorithm': 'optimal_bst'}
I0716 22:29:03.101160 128188165961216 run.py:722] (val) algo optimal_bst step 3850: {'root': 0.9232807093425606, 'score': 0.9232807093425606, 'examples_seen': 153344, 'step': 3850, 'algorithm': 'optimal_bst'}
I0716 22:29:06.047794 128188165961216 run.py:722] (val) algo optimal_bst step 3900: {'root': 0.9458801903114187, 'score': 0.9458801903114187, 'examples_seen': 155344, 'step': 3900, 'algorithm': 'optimal_bst'}
I0716 22:29:09.006798 128188165961216 run.py:722] (val) algo optimal_bst step 3950: {'root': 0.9479346885813149, 'score': 0.9479346885813149, 'examples_seen': 157312, 'step': 3950, 'algorithm': 'optimal_bst'}
I0716 22:29:11.997358 128188165961216 run.py:722] (val) algo optimal_bst step 4000: {'root': 0.9478806228373703, 'score': 0.9478806228373703, 'examples_seen': 159312, 'step': 4000, 'algorithm': 'optimal_bst'}
I0716 22:29:15.029433 128188165961216 run.py:722] (val) algo optimal_bst step 4050: {'root': 0.9504757785467128, 'score': 0.9504757785467128, 'examples_seen': 161248, 'step': 4050, 'algorithm': 'optimal_bst'}
I0716 22:29:18.129135 128188165961216 run.py:722] (val) algo optimal_bst step 4100: {'root': 0.9462045847750865, 'score': 0.9462045847750865, 'examples_seen': 163216, 'step': 4100, 'algorithm': 'optimal_bst'}
I0716 22:29:21.106377 128188165961216 run.py:722] (val) algo optimal_bst step 4150: {'root': 0.9535034602076125, 'score': 0.9535034602076125, 'examples_seen': 165280, 'step': 4150, 'algorithm': 'optimal_bst'}
I0716 22:29:24.090588 128188165961216 run.py:722] (val) algo optimal_bst step 4200: {'root': 0.9312824394463668, 'score': 0.9312824394463668, 'examples_seen': 167264, 'step': 4200, 'algorithm': 'optimal_bst'}
I0716 22:29:27.044437 128188165961216 run.py:722] (val) algo optimal_bst step 4250: {'root': 0.9429606401384083, 'score': 0.9429606401384083, 'examples_seen': 169280, 'step': 4250, 'algorithm': 'optimal_bst'}
I0716 22:29:29.992163 128188165961216 run.py:722] (val) algo optimal_bst step 4300: {'root': 0.9464749134948097, 'score': 0.9464749134948097, 'examples_seen': 171248, 'step': 4300, 'algorithm': 'optimal_bst'}
I0716 22:29:32.993028 128188165961216 run.py:722] (val) algo optimal_bst step 4350: {'root': 0.9107374567474048, 'score': 0.9107374567474048, 'examples_seen': 173216, 'step': 4350, 'algorithm': 'optimal_bst'}
I0716 22:29:36.018968 128188165961216 run.py:722] (val) algo optimal_bst step 4400: {'root': 0.9505298442906575, 'score': 0.9505298442906575, 'examples_seen': 175232, 'step': 4400, 'algorithm': 'optimal_bst'}
I0716 22:29:39.116083 128188165961216 run.py:722] (val) algo optimal_bst step 4450: {'root': 0.9487456747404844, 'score': 0.9487456747404844, 'examples_seen': 177168, 'step': 4450, 'algorithm': 'optimal_bst'}
I0716 22:29:42.099938 128188165961216 run.py:722] (val) algo optimal_bst step 4500: {'root': 0.9511245674740484, 'score': 0.9511245674740484, 'examples_seen': 179216, 'step': 4500, 'algorithm': 'optimal_bst'}
I0716 22:29:45.053784 128188165961216 run.py:722] (val) algo optimal_bst step 4550: {'root': 0.9412305363321799, 'score': 0.9412305363321799, 'examples_seen': 181232, 'step': 4550, 'algorithm': 'optimal_bst'}
I0716 22:29:48.010194 128188165961216 run.py:722] (val) algo optimal_bst step 4600: {'root': 0.9365808823529411, 'score': 0.9365808823529411, 'examples_seen': 183216, 'step': 4600, 'algorithm': 'optimal_bst'}
I0716 22:29:50.962482 128188165961216 run.py:722] (val) algo optimal_bst step 4650: {'root': 0.9432850346020761, 'score': 0.9432850346020761, 'examples_seen': 185200, 'step': 4650, 'algorithm': 'optimal_bst'}
I0716 22:29:53.954829 128188165961216 run.py:722] (val) algo optimal_bst step 4700: {'root': 0.917711937716263, 'score': 0.917711937716263, 'examples_seen': 187168, 'step': 4700, 'algorithm': 'optimal_bst'}
I0716 22:29:56.998008 128188165961216 run.py:722] (val) algo optimal_bst step 4750: {'root': 0.9511786332179931, 'score': 0.9511786332179931, 'examples_seen': 189136, 'step': 4750, 'algorithm': 'optimal_bst'}
I0716 22:30:00.065196 128188165961216 run.py:722] (val) algo optimal_bst step 4800: {'root': 0.9504217128027682, 'score': 0.9504217128027682, 'examples_seen': 191120, 'step': 4800, 'algorithm': 'optimal_bst'}
I0716 22:30:03.044944 128188165961216 run.py:722] (val) algo optimal_bst step 4850: {'root': 0.9564230103806228, 'score': 0.9564230103806228, 'examples_seen': 193136, 'step': 4850, 'algorithm': 'optimal_bst'}
I0716 22:30:06.028574 128188165961216 run.py:722] (val) algo optimal_bst step 4900: {'root': 0.9548551038062284, 'score': 0.9548551038062284, 'examples_seen': 195152, 'step': 4900, 'algorithm': 'optimal_bst'}
I0716 22:30:08.977719 128188165961216 run.py:722] (val) algo optimal_bst step 4950: {'root': 0.950151384083045, 'score': 0.950151384083045, 'examples_seen': 197152, 'step': 4950, 'algorithm': 'optimal_bst'}
I0716 22:30:11.935173 128188165961216 run.py:722] (val) algo optimal_bst step 5000: {'root': 0.9409602076124568, 'score': 0.9409602076124568, 'examples_seen': 199120, 'step': 5000, 'algorithm': 'optimal_bst'}
I0716 22:30:14.927975 128188165961216 run.py:722] (val) algo optimal_bst step 5050: {'root': 0.9498810553633218, 'score': 0.9498810553633218, 'examples_seen': 201120, 'step': 5050, 'algorithm': 'optimal_bst'}
I0716 22:30:17.953592 128188165961216 run.py:722] (val) algo optimal_bst step 5100: {'root': 0.942419982698962, 'score': 0.942419982698962, 'examples_seen': 203072, 'step': 5100, 'algorithm': 'optimal_bst'}
I0716 22:30:21.055494 128188165961216 run.py:722] (val) algo optimal_bst step 5150: {'root': 0.9508542387543253, 'score': 0.9508542387543253, 'examples_seen': 205024, 'step': 5150, 'algorithm': 'optimal_bst'}
I0716 22:30:24.030342 128188165961216 run.py:722] (val) algo optimal_bst step 5200: {'root': 0.9449070069204152, 'score': 0.9449070069204152, 'examples_seen': 207088, 'step': 5200, 'algorithm': 'optimal_bst'}
I0716 22:30:26.997839 128188165961216 run.py:722] (val) algo optimal_bst step 5250: {'root': 0.9473399653979239, 'score': 0.9473399653979239, 'examples_seen': 209072, 'step': 5250, 'algorithm': 'optimal_bst'}
I0716 22:30:29.957199 128188165961216 run.py:722] (val) algo optimal_bst step 5300: {'root': 0.948961937716263, 'score': 0.948961937716263, 'examples_seen': 211088, 'step': 5300, 'algorithm': 'optimal_bst'}
I0716 22:30:32.909020 128188165961216 run.py:722] (val) algo optimal_bst step 5350: {'root': 0.9535575259515571, 'score': 0.9535575259515571, 'examples_seen': 213072, 'step': 5350, 'algorithm': 'optimal_bst'}
I0716 22:30:35.916539 128188165961216 run.py:722] (val) algo optimal_bst step 5400: {'root': 0.9365268166089965, 'score': 0.9365268166089965, 'examples_seen': 215024, 'step': 5400, 'algorithm': 'optimal_bst'}
I0716 22:30:38.942891 128188165961216 run.py:722] (val) algo optimal_bst step 5450: {'root': 0.9524221453287197, 'score': 0.9524221453287197, 'examples_seen': 217024, 'step': 5450, 'algorithm': 'optimal_bst'}
I0716 22:30:42.039920 128188165961216 run.py:722] (val) algo optimal_bst step 5500: {'root': 0.9537737889273357, 'score': 0.9537737889273357, 'examples_seen': 218960, 'step': 5500, 'algorithm': 'optimal_bst'}
I0716 22:30:45.021155 128188165961216 run.py:722] (val) algo optimal_bst step 5550: {'root': 0.9485834775086506, 'score': 0.9485834775086506, 'examples_seen': 221008, 'step': 5550, 'algorithm': 'optimal_bst'}
I0716 22:30:47.976941 128188165961216 run.py:722] (val) algo optimal_bst step 5600: {'root': 0.9570177335640139, 'score': 0.9570177335640139, 'examples_seen': 223024, 'step': 5600, 'algorithm': 'optimal_bst'}
I0716 22:30:50.949857 128188165961216 run.py:722] (val) algo optimal_bst step 5650: {'root': 0.9428525086505191, 'score': 0.9428525086505191, 'examples_seen': 225008, 'step': 5650, 'algorithm': 'optimal_bst'}
I0716 22:30:53.903450 128188165961216 run.py:722] (val) algo optimal_bst step 5700: {'root': 0.9485834775086506, 'score': 0.9485834775086506, 'examples_seen': 227008, 'step': 5700, 'algorithm': 'optimal_bst'}
I0716 22:30:56.893427 128188165961216 run.py:722] (val) algo optimal_bst step 5750: {'root': 0.9560445501730104, 'score': 0.9560445501730104, 'examples_seen': 228960, 'step': 5750, 'algorithm': 'optimal_bst'}
I0716 22:30:59.917337 128188165961216 run.py:722] (val) algo optimal_bst step 5800: {'root': 0.9521518166089965, 'score': 0.9521518166089965, 'examples_seen': 230928, 'step': 5800, 'algorithm': 'optimal_bst'}
I0716 22:31:03.019604 128188165961216 run.py:722] (val) algo optimal_bst step 5850: {'root': 0.9529087370242214, 'score': 0.9529087370242214, 'examples_seen': 232912, 'step': 5850, 'algorithm': 'optimal_bst'}
I0716 22:31:06.004897 128188165961216 run.py:722] (val) algo optimal_bst step 5900: {'root': 0.9511245674740484, 'score': 0.9511245674740484, 'examples_seen': 234928, 'step': 5900, 'algorithm': 'optimal_bst'}
I0716 22:31:08.968503 128188165961216 run.py:722] (val) algo optimal_bst step 5950: {'root': 0.9498269896193772, 'score': 0.9498269896193772, 'examples_seen': 236944, 'step': 5950, 'algorithm': 'optimal_bst'}
I0716 22:31:11.911741 128188165961216 run.py:722] (val) algo optimal_bst step 6000: {'root': 0.9231185121107266, 'score': 0.9231185121107266, 'examples_seen': 238944, 'step': 6000, 'algorithm': 'optimal_bst'}
I0716 22:31:14.864846 128188165961216 run.py:722] (val) algo optimal_bst step 6050: {'root': 0.954476643598616, 'score': 0.954476643598616, 'examples_seen': 240928, 'step': 6050, 'algorithm': 'optimal_bst'}
I0716 22:31:17.853914 128188165961216 run.py:722] (val) algo optimal_bst step 6100: {'root': 0.9524221453287197, 'score': 0.9524221453287197, 'examples_seen': 242912, 'step': 6100, 'algorithm': 'optimal_bst'}
I0716 22:31:20.880637 128188165961216 run.py:722] (val) algo optimal_bst step 6150: {'root': 0.9570717993079585, 'score': 0.9570717993079585, 'examples_seen': 244864, 'step': 6150, 'algorithm': 'optimal_bst'}
I0716 22:31:24.001103 128188165961216 run.py:722] (val) algo optimal_bst step 6200: {'root': 0.9544225778546713, 'score': 0.9544225778546713, 'examples_seen': 246816, 'step': 6200, 'algorithm': 'optimal_bst'}
I0716 22:31:26.975461 128188165961216 run.py:722] (val) algo optimal_bst step 6250: {'root': 0.9506379757785467, 'score': 0.9506379757785467, 'examples_seen': 248880, 'step': 6250, 'algorithm': 'optimal_bst'}
I0716 22:31:29.937099 128188165961216 run.py:722] (val) algo optimal_bst step 6300: {'root': 0.9484212802768166, 'score': 0.9484212802768166, 'examples_seen': 250880, 'step': 6300, 'algorithm': 'optimal_bst'}
I0716 22:31:32.892037 128188165961216 run.py:722] (val) algo optimal_bst step 6350: {'root': 0.9539900519031141, 'score': 0.9539900519031141, 'examples_seen': 252880, 'step': 6350, 'algorithm': 'optimal_bst'}
I0716 22:31:35.842684 128188165961216 run.py:722] (val) algo optimal_bst step 6400: {'root': 0.9529628027681661, 'score': 0.9529628027681661, 'examples_seen': 254864, 'step': 6400, 'algorithm': 'optimal_bst'}
I0716 22:31:38.847775 128188165961216 run.py:722] (val) algo optimal_bst step 6450: {'root': 0.9543685121107266, 'score': 0.9543685121107266, 'examples_seen': 256816, 'step': 6450, 'algorithm': 'optimal_bst'}
I0716 22:31:41.872940 128188165961216 run.py:722] (val) algo optimal_bst step 6500: {'root': 0.9583153114186851, 'score': 0.9583153114186851, 'examples_seen': 258816, 'step': 6500, 'algorithm': 'optimal_bst'}
I0716 22:31:44.995441 128188165961216 run.py:722] (val) algo optimal_bst step 6550: {'root': 0.9510164359861591, 'score': 0.9510164359861591, 'examples_seen': 260752, 'step': 6550, 'algorithm': 'optimal_bst'}
I0716 22:31:47.978621 128188165961216 run.py:722] (val) algo optimal_bst step 6600: {'root': 0.9557742214532872, 'score': 0.9557742214532872, 'examples_seen': 262800, 'step': 6600, 'algorithm': 'optimal_bst'}
I0716 22:31:50.931843 128188165961216 run.py:722] (val) algo optimal_bst step 6650: {'root': 0.9551794982698962, 'score': 0.9551794982698962, 'examples_seen': 264832, 'step': 6650, 'algorithm': 'optimal_bst'}
I0716 22:31:53.883736 128188165961216 run.py:722] (val) algo optimal_bst step 6700: {'root': 0.9538278546712803, 'score': 0.9538278546712803, 'examples_seen': 266800, 'step': 6700, 'algorithm': 'optimal_bst'}
I0716 22:31:56.835593 128188165961216 run.py:722] (val) algo optimal_bst step 6750: {'root': 0.9522058823529411, 'score': 0.9522058823529411, 'examples_seen': 268800, 'step': 6750, 'algorithm': 'optimal_bst'}
I0716 22:31:59.825564 128188165961216 run.py:722] (val) algo optimal_bst step 6800: {'root': 0.9555038927335641, 'score': 0.9555038927335641, 'examples_seen': 270752, 'step': 6800, 'algorithm': 'optimal_bst'}
I0716 22:32:02.850336 128188165961216 run.py:722] (val) algo optimal_bst step 6850: {'root': 0.954314446366782, 'score': 0.954314446366782, 'examples_seen': 272736, 'step': 6850, 'algorithm': 'optimal_bst'}
I0716 22:32:05.951791 128188165961216 run.py:722] (val) algo optimal_bst step 6900: {'root': 0.9591803633217993, 'score': 0.9591803633217993, 'examples_seen': 274720, 'step': 6900, 'algorithm': 'optimal_bst'}
I0716 22:32:08.959251 128188165961216 run.py:722] (val) algo optimal_bst step 6950: {'root': 0.9559364186851211, 'score': 0.9559364186851211, 'examples_seen': 276736, 'step': 6950, 'algorithm': 'optimal_bst'}
I0716 22:32:11.919248 128188165961216 run.py:722] (val) algo optimal_bst step 7000: {'root': 0.9492863321799307, 'score': 0.9492863321799307, 'examples_seen': 278768, 'step': 7000, 'algorithm': 'optimal_bst'}
I0716 22:32:14.868476 128188165961216 run.py:722] (val) algo optimal_bst step 7050: {'root': 0.9559904844290658, 'score': 0.9559904844290658, 'examples_seen': 280752, 'step': 7050, 'algorithm': 'optimal_bst'}
I0716 22:32:17.825358 128188165961216 run.py:722] (val) algo optimal_bst step 7100: {'root': 0.9323096885813149, 'score': 0.9323096885813149, 'examples_seen': 282736, 'step': 7100, 'algorithm': 'optimal_bst'}
I0716 22:32:20.799679 128188165961216 run.py:722] (val) algo optimal_bst step 7150: {'root': 0.9536115916955017, 'score': 0.9536115916955017, 'examples_seen': 284720, 'step': 7150, 'algorithm': 'optimal_bst'}
I0716 22:32:23.819470 128188165961216 run.py:722] (val) algo optimal_bst step 7200: {'root': 0.9580990484429066, 'score': 0.9580990484429066, 'examples_seen': 286672, 'step': 7200, 'algorithm': 'optimal_bst'}
I0716 22:32:26.923143 128188165961216 run.py:722] (val) algo optimal_bst step 7250: {'root': 0.9528006055363322, 'score': 0.9528006055363322, 'examples_seen': 288640, 'step': 7250, 'algorithm': 'optimal_bst'}
I0716 22:32:29.902223 128188165961216 run.py:722] (val) algo optimal_bst step 7300: {'root': 0.9526924740484429, 'score': 0.9526924740484429, 'examples_seen': 290688, 'step': 7300, 'algorithm': 'optimal_bst'}
I0716 22:32:32.866508 128188165961216 run.py:722] (val) algo optimal_bst step 7350: {'root': 0.9577746539792388, 'score': 0.9577746539792388, 'examples_seen': 292688, 'step': 7350, 'algorithm': 'optimal_bst'}
I0716 22:32:35.821876 128188165961216 run.py:722] (val) algo optimal_bst step 7400: {'root': 0.9548010380622838, 'score': 0.9548010380622838, 'examples_seen': 294688, 'step': 7400, 'algorithm': 'optimal_bst'}
I0716 22:32:38.776675 128188165961216 run.py:722] (val) algo optimal_bst step 7450: {'root': 0.9323637543252595, 'score': 0.9323637543252595, 'examples_seen': 296672, 'step': 7450, 'algorithm': 'optimal_bst'}
I0716 22:32:41.776871 128188165961216 run.py:722] (val) algo optimal_bst step 7500: {'root': 0.9532331314878892, 'score': 0.9532331314878892, 'examples_seen': 298624, 'step': 7500, 'algorithm': 'optimal_bst'}
I0716 22:32:44.782418 128188165961216 run.py:722] (val) algo optimal_bst step 7550: {'root': 0.9595047577854672, 'score': 0.9595047577854672, 'examples_seen': 300624, 'step': 7550, 'algorithm': 'optimal_bst'}
I0716 22:32:47.904649 128188165961216 run.py:722] (val) algo optimal_bst step 7600: {'root': 0.9588019031141869, 'score': 0.9588019031141869, 'examples_seen': 302576, 'step': 7600, 'algorithm': 'optimal_bst'}
I0716 22:32:50.888087 128188165961216 run.py:722] (val) algo optimal_bst step 7650: {'root': 0.956260813148789, 'score': 0.956260813148789, 'examples_seen': 304608, 'step': 7650, 'algorithm': 'optimal_bst'}
I0716 22:32:53.844681 128188165961216 run.py:722] (val) algo optimal_bst step 7700: {'root': 0.9475562283737025, 'score': 0.9475562283737025, 'examples_seen': 306640, 'step': 7700, 'algorithm': 'optimal_bst'}
I0716 22:32:56.797300 128188165961216 run.py:722] (val) algo optimal_bst step 7750: {'root': 0.9438797577854672, 'score': 0.9438797577854672, 'examples_seen': 308608, 'step': 7750, 'algorithm': 'optimal_bst'}
I0716 22:32:59.751215 128188165961216 run.py:722] (val) algo optimal_bst step 7800: {'root': 0.9569096020761245, 'score': 0.9569096020761245, 'examples_seen': 310608, 'step': 7800, 'algorithm': 'optimal_bst'}
I0716 22:33:02.743937 128188165961216 run.py:722] (val) algo optimal_bst step 7850: {'root': 0.9542063148788927, 'score': 0.9542063148788927, 'examples_seen': 312576, 'step': 7850, 'algorithm': 'optimal_bst'}
I0716 22:33:05.769917 128188165961216 run.py:722] (val) algo optimal_bst step 7900: {'root': 0.9542603806228374, 'score': 0.9542603806228374, 'examples_seen': 314528, 'step': 7900, 'algorithm': 'optimal_bst'}
I0716 22:33:08.872926 128188165961216 run.py:722] (val) algo optimal_bst step 7950: {'root': 0.959666955017301, 'score': 0.959666955017301, 'examples_seen': 316528, 'step': 7950, 'algorithm': 'optimal_bst'}
I0716 22:33:11.882259 128188165961216 run.py:722] (val) algo optimal_bst step 8000: {'root': 0.9593425605536332, 'score': 0.9593425605536332, 'examples_seen': 318528, 'step': 8000, 'algorithm': 'optimal_bst'}
I0716 22:33:14.844734 128188165961216 run.py:722] (val) algo optimal_bst step 8050: {'root': 0.9478265570934256, 'score': 0.9478265570934256, 'examples_seen': 320560, 'step': 8050, 'algorithm': 'optimal_bst'}
I0716 22:33:17.792090 128188165961216 run.py:722] (val) algo optimal_bst step 8100: {'root': 0.9529087370242214, 'score': 0.9529087370242214, 'examples_seen': 322544, 'step': 8100, 'algorithm': 'optimal_bst'}
I0716 22:33:20.748540 128188165961216 run.py:722] (val) algo optimal_bst step 8150: {'root': 0.9602076124567474, 'score': 0.9602076124567474, 'examples_seen': 324528, 'step': 8150, 'algorithm': 'optimal_bst'}
I0716 22:33:23.763127 128188165961216 run.py:722] (val) algo optimal_bst step 8200: {'root': 0.9611807958477508, 'score': 0.9611807958477508, 'examples_seen': 326528, 'step': 8200, 'algorithm': 'optimal_bst'}
I0716 22:33:26.812455 128188165961216 run.py:722] (val) algo optimal_bst step 8250: {'root': 0.9616133217993079, 'score': 0.9616133217993079, 'examples_seen': 328464, 'step': 8250, 'algorithm': 'optimal_bst'}
I0716 22:33:29.929992 128188165961216 run.py:722] (val) algo optimal_bst step 8300: {'root': 0.9588559688581315, 'score': 0.9588559688581315, 'examples_seen': 330432, 'step': 8300, 'algorithm': 'optimal_bst'}
I0716 22:33:32.902208 128188165961216 run.py:722] (val) algo optimal_bst step 8350: {'root': 0.9558823529411765, 'score': 0.9558823529411765, 'examples_seen': 332480, 'step': 8350, 'algorithm': 'optimal_bst'}
I0716 22:33:35.864928 128188165961216 run.py:722] (val) algo optimal_bst step 8400: {'root': 0.9425281141868512, 'score': 0.9425281141868512, 'examples_seen': 334480, 'step': 8400, 'algorithm': 'optimal_bst'}
I0716 22:33:38.807997 128188165961216 run.py:722] (val) algo optimal_bst step 8450: {'root': 0.9549632352941176, 'score': 0.9549632352941176, 'examples_seen': 336480, 'step': 8450, 'algorithm': 'optimal_bst'}
I0716 22:33:41.759710 128188165961216 run.py:722] (val) algo optimal_bst step 8500: {'root': 0.9389057093425606, 'score': 0.9389057093425606, 'examples_seen': 338464, 'step': 8500, 'algorithm': 'optimal_bst'}
I0716 22:33:44.768161 128188165961216 run.py:722] (val) algo optimal_bst step 8550: {'root': 0.9576124567474048, 'score': 0.9576124567474048, 'examples_seen': 340432, 'step': 8550, 'algorithm': 'optimal_bst'}
I0716 22:33:47.795175 128188165961216 run.py:722] (val) algo optimal_bst step 8600: {'root': 0.9570177335640139, 'score': 0.9570177335640139, 'examples_seen': 342416, 'step': 8600, 'algorithm': 'optimal_bst'}
I0716 22:33:50.900604 128188165961216 run.py:722] (val) algo optimal_bst step 8650: {'root': 0.9580990484429066, 'score': 0.9580990484429066, 'examples_seen': 344368, 'step': 8650, 'algorithm': 'optimal_bst'}
I0716 22:33:53.863476 128188165961216 run.py:722] (val) algo optimal_bst step 8700: {'root': 0.9600454152249135, 'score': 0.9600454152249135, 'examples_seen': 346400, 'step': 8700, 'algorithm': 'optimal_bst'}
I0716 22:33:56.815142 128188165961216 run.py:722] (val) algo optimal_bst step 8750: {'root': 0.9536115916955017, 'score': 0.9536115916955017, 'examples_seen': 348432, 'step': 8750, 'algorithm': 'optimal_bst'}
I0716 22:33:59.758434 128188165961216 run.py:722] (val) algo optimal_bst step 8800: {'root': 0.9532871972318339, 'score': 0.9532871972318339, 'examples_seen': 350416, 'step': 8800, 'algorithm': 'optimal_bst'}
I0716 22:34:02.711396 128188165961216 run.py:722] (val) algo optimal_bst step 8850: {'root': 0.956098615916955, 'score': 0.956098615916955, 'examples_seen': 352400, 'step': 8850, 'algorithm': 'optimal_bst'}
I0716 22:34:05.703721 128188165961216 run.py:722] (val) algo optimal_bst step 8900: {'root': 0.9572339965397924, 'score': 0.9572339965397924, 'examples_seen': 354368, 'step': 8900, 'algorithm': 'optimal_bst'}
I0716 22:34:08.731300 128188165961216 run.py:722] (val) algo optimal_bst step 8950: {'root': 0.9469615051903114, 'score': 0.9469615051903114, 'examples_seen': 356320, 'step': 8950, 'algorithm': 'optimal_bst'}
I0716 22:34:11.832353 128188165961216 run.py:722] (val) algo optimal_bst step 9000: {'root': 0.964586937716263, 'score': 0.964586937716263, 'examples_seen': 358320, 'step': 9000, 'algorithm': 'optimal_bst'}
I0716 22:34:14.838722 128188165961216 run.py:722] (val) algo optimal_bst step 9050: {'root': 0.957882785467128, 'score': 0.957882785467128, 'examples_seen': 360320, 'step': 9050, 'algorithm': 'optimal_bst'}
I0716 22:34:17.799550 128188165961216 run.py:722] (val) algo optimal_bst step 9100: {'root': 0.9480968858131488, 'score': 0.9480968858131488, 'examples_seen': 362352, 'step': 9100, 'algorithm': 'optimal_bst'}
I0716 22:34:20.744888 128188165961216 run.py:722] (val) algo optimal_bst step 9150: {'root': 0.9605860726643599, 'score': 0.9605860726643599, 'examples_seen': 364352, 'step': 9150, 'algorithm': 'optimal_bst'}
I0716 22:34:23.700267 128188165961216 run.py:722] (val) algo optimal_bst step 9200: {'root': 0.9566392733564014, 'score': 0.9566392733564014, 'examples_seen': 366320, 'step': 9200, 'algorithm': 'optimal_bst'}
I0716 22:34:26.692425 128188165961216 run.py:722] (val) algo optimal_bst step 9250: {'root': 0.9585315743944637, 'score': 0.9585315743944637, 'examples_seen': 368320, 'step': 9250, 'algorithm': 'optimal_bst'}
I0716 22:34:29.716949 128188165961216 run.py:722] (val) algo optimal_bst step 9300: {'root': 0.9620458477508651, 'score': 0.9620458477508651, 'examples_seen': 370272, 'step': 9300, 'algorithm': 'optimal_bst'}
I0716 22:34:32.822832 128188165961216 run.py:722] (val) algo optimal_bst step 9350: {'root': 0.9565852076124568, 'score': 0.9565852076124568, 'examples_seen': 372240, 'step': 9350, 'algorithm': 'optimal_bst'}
I0716 22:34:35.800309 128188165961216 run.py:722] (val) algo optimal_bst step 9400: {'root': 0.9526924740484429, 'score': 0.9526924740484429, 'examples_seen': 374288, 'step': 9400, 'algorithm': 'optimal_bst'}
I0716 22:34:38.765748 128188165961216 run.py:722] (val) algo optimal_bst step 9450: {'root': 0.9366890138408305, 'score': 0.9366890138408305, 'examples_seen': 376288, 'step': 9450, 'algorithm': 'optimal_bst'}
I0716 22:34:41.703565 128188165961216 run.py:722] (val) algo optimal_bst step 9500: {'root': 0.9565852076124568, 'score': 0.9565852076124568, 'examples_seen': 378304, 'step': 9500, 'algorithm': 'optimal_bst'}
I0716 22:34:44.654563 128188165961216 run.py:722] (val) algo optimal_bst step 9550: {'root': 0.9598291522491349, 'score': 0.9598291522491349, 'examples_seen': 380272, 'step': 9550, 'algorithm': 'optimal_bst'}
I0716 22:34:47.659282 128188165961216 run.py:722] (val) algo optimal_bst step 9600: {'root': 0.957882785467128, 'score': 0.957882785467128, 'examples_seen': 382240, 'step': 9600, 'algorithm': 'optimal_bst'}
I0716 22:34:50.697400 128188165961216 run.py:722] (val) algo optimal_bst step 9650: {'root': 0.95907223183391, 'score': 0.95907223183391, 'examples_seen': 384224, 'step': 9650, 'algorithm': 'optimal_bst'}
I0716 22:34:53.779361 128188165961216 run.py:722] (val) algo optimal_bst step 9700: {'root': 0.9606942041522492, 'score': 0.9606942041522492, 'examples_seen': 386176, 'step': 9700, 'algorithm': 'optimal_bst'}
I0716 22:34:56.763945 128188165961216 run.py:722] (val) algo optimal_bst step 9750: {'root': 0.9568014705882353, 'score': 0.9568014705882353, 'examples_seen': 388224, 'step': 9750, 'algorithm': 'optimal_bst'}
I0716 22:34:59.719002 128188165961216 run.py:722] (val) algo optimal_bst step 9800: {'root': 0.9597210207612457, 'score': 0.9597210207612457, 'examples_seen': 390240, 'step': 9800, 'algorithm': 'optimal_bst'}
I0716 22:35:02.676986 128188165961216 run.py:722] (val) algo optimal_bst step 9850: {'root': 0.9569096020761245, 'score': 0.9569096020761245, 'examples_seen': 392224, 'step': 9850, 'algorithm': 'optimal_bst'}
I0716 22:35:05.630533 128188165961216 run.py:722] (val) algo optimal_bst step 9900: {'root': 0.9540981833910035, 'score': 0.9540981833910035, 'examples_seen': 394208, 'step': 9900, 'algorithm': 'optimal_bst'}
I0716 22:35:08.621292 128188165961216 run.py:722] (val) algo optimal_bst step 9950: {'root': 0.9583153114186851, 'score': 0.9583153114186851, 'examples_seen': 396176, 'step': 9950, 'algorithm': 'optimal_bst'}