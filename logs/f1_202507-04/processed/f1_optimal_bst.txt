I0716 16:35:51.875974 132355217737216 run.py:722] (val) algo optimal_bst step 0: {'root': 0.477238321799308, 'score': 0.477238321799308, 'examples_seen': 64, 'step': 0, 'algorithm': 'optimal_bst'}
I0716 16:37:32.030088 132355217737216 run.py:722] (val) algo optimal_bst step 50: {'root': 0.5951557093425606, 'score': 0.5951557093425606, 'examples_seen': 2080, 'step': 50, 'algorithm': 'optimal_bst'}
I0716 16:37:34.911285 132355217737216 run.py:722] (val) algo optimal_bst step 100: {'root': 0.5969398788927336, 'score': 0.5969398788927336, 'examples_seen': 4064, 'step': 100, 'algorithm': 'optimal_bst'}
I0716 16:37:37.838640 132355217737216 run.py:722] (val) algo optimal_bst step 150: {'root': 0.7558931660899654, 'score': 0.7558931660899654, 'examples_seen': 6016, 'step': 150, 'algorithm': 'optimal_bst'}
I0716 16:37:40.789588 132355217737216 run.py:722] (val) algo optimal_bst step 200: {'root': 0.7693014705882353, 'score': 0.7693014705882353, 'examples_seen': 8016, 'step': 200, 'algorithm': 'optimal_bst'}
I0716 16:37:43.805025 132355217737216 run.py:722] (val) algo optimal_bst step 250: {'root': 0.810715830449827, 'score': 0.810715830449827, 'examples_seen': 9952, 'step': 250, 'algorithm': 'optimal_bst'}
I0716 16:37:46.705127 132355217737216 run.py:722] (val) algo optimal_bst step 300: {'root': 0.7965506055363322, 'score': 0.7965506055363322, 'examples_seen': 12000, 'step': 300, 'algorithm': 'optimal_bst'}
I0716 16:37:49.560041 132355217737216 run.py:722] (val) algo optimal_bst step 350: {'root': 0.8368295847750865, 'score': 0.8368295847750865, 'examples_seen': 14032, 'step': 350, 'algorithm': 'optimal_bst'}
I0716 16:37:52.430798 132355217737216 run.py:722] (val) algo optimal_bst step 400: {'root': 0.8647275086505191, 'score': 0.8647275086505191, 'examples_seen': 16000, 'step': 400, 'algorithm': 'optimal_bst'}
I0716 16:37:55.300501 132355217737216 run.py:722] (val) algo optimal_bst step 450: {'root': 0.8592668685121108, 'score': 0.8592668685121108, 'examples_seen': 18000, 'step': 450, 'algorithm': 'optimal_bst'}
I0716 16:37:58.187172 132355217737216 run.py:722] (val) algo optimal_bst step 500: {'root': 0.8669982698961938, 'score': 0.8669982698961938, 'examples_seen': 19952, 'step': 500, 'algorithm': 'optimal_bst'}
I0716 16:38:01.125778 132355217737216 run.py:722] (val) algo optimal_bst step 550: {'root': 0.8766760380622838, 'score': 0.8766760380622838, 'examples_seen': 21920, 'step': 550, 'algorithm': 'optimal_bst'}
I0716 16:38:04.141917 132355217737216 run.py:722] (val) algo optimal_bst step 600: {'root': 0.8684039792387543, 'score': 0.8684039792387543, 'examples_seen': 23904, 'step': 600, 'algorithm': 'optimal_bst'}
I0716 16:38:07.034815 132355217737216 run.py:722] (val) algo optimal_bst step 650: {'root': 0.8740268166089965, 'score': 0.8740268166089965, 'examples_seen': 25920, 'step': 650, 'algorithm': 'optimal_bst'}
I0716 16:38:09.899997 132355217737216 run.py:722] (val) algo optimal_bst step 700: {'root': 0.8815960207612457, 'score': 0.8815960207612457, 'examples_seen': 27952, 'step': 700, 'algorithm': 'optimal_bst'}
I0716 16:38:12.771826 132355217737216 run.py:722] (val) algo optimal_bst step 750: {'root': 0.8976535467128027, 'score': 0.8976535467128027, 'examples_seen': 29936, 'step': 750, 'algorithm': 'optimal_bst'}
I0716 16:38:15.647601 132355217737216 run.py:722] (val) algo optimal_bst step 800: {'root': 0.8821366782006921, 'score': 0.8821366782006921, 'examples_seen': 31920, 'step': 800, 'algorithm': 'optimal_bst'}
I0716 16:38:18.522044 132355217737216 run.py:722] (val) algo optimal_bst step 850: {'root': 0.8918685121107266, 'score': 0.8918685121107266, 'examples_seen': 33904, 'step': 850, 'algorithm': 'optimal_bst'}
I0716 16:38:21.442535 132355217737216 run.py:722] (val) algo optimal_bst step 900: {'root': 0.8822988754325259, 'score': 0.8822988754325259, 'examples_seen': 35856, 'step': 900, 'algorithm': 'optimal_bst'}
I0716 16:38:24.446019 132355217737216 run.py:722] (val) algo optimal_bst step 950: {'root': 0.8919225778546713, 'score': 0.8919225778546713, 'examples_seen': 37808, 'step': 950, 'algorithm': 'optimal_bst'}
I0716 16:38:27.328100 132355217737216 run.py:722] (val) algo optimal_bst step 1000: {'root': 0.9084666955017301, 'score': 0.9084666955017301, 'examples_seen': 39872, 'step': 1000, 'algorithm': 'optimal_bst'}
I0716 16:38:30.213037 132355217737216 run.py:722] (val) algo optimal_bst step 1050: {'root': 0.8333693771626297, 'score': 0.8333693771626297, 'examples_seen': 41872, 'step': 1050, 'algorithm': 'optimal_bst'}
I0716 16:38:33.069807 132355217737216 run.py:722] (val) algo optimal_bst step 1100: {'root': 0.8850021626297578, 'score': 0.8850021626297578, 'examples_seen': 43872, 'step': 1100, 'algorithm': 'optimal_bst'}
I0716 16:38:35.921155 132355217737216 run.py:722] (val) algo optimal_bst step 1150: {'root': 0.8472102076124568, 'score': 0.8472102076124568, 'examples_seen': 45856, 'step': 1150, 'algorithm': 'optimal_bst'}
I0716 16:38:38.823931 132355217737216 run.py:722] (val) algo optimal_bst step 1200: {'root': 0.8583477508650519, 'score': 0.8583477508650519, 'examples_seen': 47808, 'step': 1200, 'algorithm': 'optimal_bst'}
I0716 16:38:41.750133 132355217737216 run.py:722] (val) algo optimal_bst step 1250: {'root': 0.8770544982698962, 'score': 0.8770544982698962, 'examples_seen': 49808, 'step': 1250, 'algorithm': 'optimal_bst'}
I0716 16:38:44.751643 132355217737216 run.py:722] (val) algo optimal_bst step 1300: {'root': 0.9022491349480969, 'score': 0.9022491349480969, 'examples_seen': 51760, 'step': 1300, 'algorithm': 'optimal_bst'}
I0716 16:38:47.645604 132355217737216 run.py:722] (val) algo optimal_bst step 1350: {'root': 0.9040333044982699, 'score': 0.9040333044982699, 'examples_seen': 53792, 'step': 1350, 'algorithm': 'optimal_bst'}
I0716 16:38:50.494965 132355217737216 run.py:722] (val) algo optimal_bst step 1400: {'root': 0.8975454152249135, 'score': 0.8975454152249135, 'examples_seen': 55824, 'step': 1400, 'algorithm': 'optimal_bst'}
I0716 16:38:53.361608 132355217737216 run.py:722] (val) algo optimal_bst step 1450: {'root': 0.8607807093425606, 'score': 0.8607807093425606, 'examples_seen': 57792, 'step': 1450, 'algorithm': 'optimal_bst'}
I0716 16:38:56.220679 132355217737216 run.py:722] (val) algo optimal_bst step 1500: {'root': 0.8992755190311419, 'score': 0.8992755190311419, 'examples_seen': 59792, 'step': 1500, 'algorithm': 'optimal_bst'}
I0716 16:38:59.102037 132355217737216 run.py:722] (val) algo optimal_bst step 1550: {'root': 0.8866241349480969, 'score': 0.8866241349480969, 'examples_seen': 61744, 'step': 1550, 'algorithm': 'optimal_bst'}
I0716 16:39:02.034067 132355217737216 run.py:722] (val) algo optimal_bst step 1600: {'root': 0.8751081314878892, 'score': 0.8751081314878892, 'examples_seen': 63712, 'step': 1600, 'algorithm': 'optimal_bst'}
I0716 16:39:05.026067 132355217737216 run.py:722] (val) algo optimal_bst step 1650: {'root': 0.9174956747404844, 'score': 0.9174956747404844, 'examples_seen': 65712, 'step': 1650, 'algorithm': 'optimal_bst'}
I0716 16:39:07.947585 132355217737216 run.py:722] (val) algo optimal_bst step 1700: {'root': 0.8938689446366782, 'score': 0.8938689446366782, 'examples_seen': 67712, 'step': 1700, 'algorithm': 'optimal_bst'}
I0716 16:39:10.818472 132355217737216 run.py:722] (val) algo optimal_bst step 1750: {'root': 0.9178741349480969, 'score': 0.9178741349480969, 'examples_seen': 69744, 'step': 1750, 'algorithm': 'optimal_bst'}
I0716 16:39:13.693779 132355217737216 run.py:722] (val) algo optimal_bst step 1800: {'root': 0.8747296712802768, 'score': 0.8747296712802768, 'examples_seen': 71728, 'step': 1800, 'algorithm': 'optimal_bst'}
I0716 16:39:16.559586 132355217737216 run.py:722] (val) algo optimal_bst step 1850: {'root': 0.9250648788927336, 'score': 0.9250648788927336, 'examples_seen': 73712, 'step': 1850, 'algorithm': 'optimal_bst'}
I0716 16:39:19.474256 132355217737216 run.py:722] (val) algo optimal_bst step 1900: {'root': 0.9079260380622838, 'score': 0.9079260380622838, 'examples_seen': 75712, 'step': 1900, 'algorithm': 'optimal_bst'}
I0716 16:39:22.408454 132355217737216 run.py:722] (val) algo optimal_bst step 1950: {'root': 0.9069528546712803, 'score': 0.9069528546712803, 'examples_seen': 77664, 'step': 1950, 'algorithm': 'optimal_bst'}
I0716 16:39:25.416010 132355217737216 run.py:722] (val) algo optimal_bst step 2000: {'root': 0.9173875432525952, 'score': 0.9173875432525952, 'examples_seen': 79632, 'step': 2000, 'algorithm': 'optimal_bst'}
I0716 16:39:28.302249 132355217737216 run.py:722] (val) algo optimal_bst step 2050: {'root': 0.8889489619377162, 'score': 0.8889489619377162, 'examples_seen': 81680, 'step': 2050, 'algorithm': 'optimal_bst'}
I0716 16:39:31.179296 132355217737216 run.py:722] (val) algo optimal_bst step 2100: {'root': 0.9088451557093425, 'score': 0.9088451557093425, 'examples_seen': 83680, 'step': 2100, 'algorithm': 'optimal_bst'}
I0716 16:39:34.042927 132355217737216 run.py:722] (val) algo optimal_bst step 2150: {'root': 0.8685661764705882, 'score': 0.8685661764705882, 'examples_seen': 85680, 'step': 2150, 'algorithm': 'optimal_bst'}
I0716 16:39:36.900962 132355217737216 run.py:722] (val) algo optimal_bst step 2200: {'root': 0.891814446366782, 'score': 0.891814446366782, 'examples_seen': 87664, 'step': 2200, 'algorithm': 'optimal_bst'}
I0716 16:39:39.812862 132355217737216 run.py:722] (val) algo optimal_bst step 2250: {'root': 0.8786224048442907, 'score': 0.8786224048442907, 'examples_seen': 89632, 'step': 2250, 'algorithm': 'optimal_bst'}
I0716 16:39:42.757464 132355217737216 run.py:722] (val) algo optimal_bst step 2300: {'root': 0.935715830449827, 'score': 0.935715830449827, 'examples_seen': 91616, 'step': 2300, 'algorithm': 'optimal_bst'}
I0716 16:39:45.787672 132355217737216 run.py:722] (val) algo optimal_bst step 2350: {'root': 0.9131163494809689, 'score': 0.9131163494809689, 'examples_seen': 93568, 'step': 2350, 'algorithm': 'optimal_bst'}
I0716 16:39:48.680040 132355217737216 run.py:722] (val) algo optimal_bst step 2400: {'root': 0.9126297577854672, 'score': 0.9126297577854672, 'examples_seen': 95600, 'step': 2400, 'algorithm': 'optimal_bst'}
I0716 16:39:51.545703 132355217737216 run.py:722] (val) algo optimal_bst step 2450: {'root': 0.9133326124567474, 'score': 0.9133326124567474, 'examples_seen': 97632, 'step': 2450, 'algorithm': 'optimal_bst'}
I0716 16:39:54.410203 132355217737216 run.py:722] (val) algo optimal_bst step 2500: {'root': 0.916955017301038, 'score': 0.916955017301038, 'examples_seen': 99600, 'step': 2500, 'algorithm': 'optimal_bst'}
I0716 16:39:57.268026 132355217737216 run.py:722] (val) algo optimal_bst step 2550: {'root': 0.918901384083045, 'score': 0.918901384083045, 'examples_seen': 101600, 'step': 2550, 'algorithm': 'optimal_bst'}
I0716 16:40:00.164653 132355217737216 run.py:722] (val) algo optimal_bst step 2600: {'root': 0.9240376297577855, 'score': 0.9240376297577855, 'examples_seen': 103568, 'step': 2600, 'algorithm': 'optimal_bst'}
I0716 16:40:03.096814 132355217737216 run.py:722] (val) algo optimal_bst step 2650: {'root': 0.9269031141868512, 'score': 0.9269031141868512, 'examples_seen': 105520, 'step': 2650, 'algorithm': 'optimal_bst'}
I0716 16:40:06.101153 132355217737216 run.py:722] (val) algo optimal_bst step 2700: {'root': 0.9271734429065744, 'score': 0.9271734429065744, 'examples_seen': 107520, 'step': 2700, 'algorithm': 'optimal_bst'}
I0716 16:40:09.000327 132355217737216 run.py:722] (val) algo optimal_bst step 2750: {'root': 0.8966803633217993, 'score': 0.8966803633217993, 'examples_seen': 109520, 'step': 2750, 'algorithm': 'optimal_bst'}
I0716 16:40:11.870357 132355217737216 run.py:722] (val) algo optimal_bst step 2800: {'root': 0.9161440311418685, 'score': 0.9161440311418685, 'examples_seen': 111552, 'step': 2800, 'algorithm': 'optimal_bst'}
I0716 16:40:14.729138 132355217737216 run.py:722] (val) algo optimal_bst step 2850: {'root': 0.9009515570934256, 'score': 0.9009515570934256, 'examples_seen': 113552, 'step': 2850, 'algorithm': 'optimal_bst'}
I0716 16:40:17.593621 132355217737216 run.py:722] (val) algo optimal_bst step 2900: {'root': 0.9100886678200693, 'score': 0.9100886678200693, 'examples_seen': 115520, 'step': 2900, 'algorithm': 'optimal_bst'}
I0716 16:40:20.490571 132355217737216 run.py:722] (val) algo optimal_bst step 2950: {'root': 0.9216046712802768, 'score': 0.9216046712802768, 'examples_seen': 117520, 'step': 2950, 'algorithm': 'optimal_bst'}
I0716 16:40:23.419012 132355217737216 run.py:722] (val) algo optimal_bst step 3000: {'root': 0.929606401384083, 'score': 0.929606401384083, 'examples_seen': 119456, 'step': 3000, 'algorithm': 'optimal_bst'}
I0716 16:40:26.424700 132355217737216 run.py:722] (val) algo optimal_bst step 3050: {'root': 0.9352833044982699, 'score': 0.9352833044982699, 'examples_seen': 121424, 'step': 3050, 'algorithm': 'optimal_bst'}
I0716 16:40:29.314936 132355217737216 run.py:722] (val) algo optimal_bst step 3100: {'root': 0.9312824394463668, 'score': 0.9312824394463668, 'examples_seen': 123472, 'step': 3100, 'algorithm': 'optimal_bst'}
I0716 16:40:32.186961 132355217737216 run.py:722] (val) algo optimal_bst step 3150: {'root': 0.9413927335640139, 'score': 0.9413927335640139, 'examples_seen': 125472, 'step': 3150, 'algorithm': 'optimal_bst'}
I0716 16:40:35.065004 132355217737216 run.py:722] (val) algo optimal_bst step 3200: {'root': 0.9171712802768166, 'score': 0.9171712802768166, 'examples_seen': 127488, 'step': 3200, 'algorithm': 'optimal_bst'}
I0716 16:40:37.925830 132355217737216 run.py:722] (val) algo optimal_bst step 3250: {'root': 0.9426903114186851, 'score': 0.9426903114186851, 'examples_seen': 129456, 'step': 3250, 'algorithm': 'optimal_bst'}
I0716 16:40:40.855094 132355217737216 run.py:722] (val) algo optimal_bst step 3300: {'root': 0.9391760380622838, 'score': 0.9391760380622838, 'examples_seen': 131424, 'step': 3300, 'algorithm': 'optimal_bst'}
I0716 16:40:43.785940 132355217737216 run.py:722] (val) algo optimal_bst step 3350: {'root': 0.9266868512110726, 'score': 0.9266868512110726, 'examples_seen': 133408, 'step': 3350, 'algorithm': 'optimal_bst'}
I0716 16:40:46.792017 132355217737216 run.py:722] (val) algo optimal_bst step 3400: {'root': 0.9366890138408305, 'score': 0.9366890138408305, 'examples_seen': 135360, 'step': 3400, 'algorithm': 'optimal_bst'}
I0716 16:40:49.687561 132355217737216 run.py:722] (val) algo optimal_bst step 3450: {'root': 0.9393382352941176, 'score': 0.9393382352941176, 'examples_seen': 137392, 'step': 3450, 'algorithm': 'optimal_bst'}
I0716 16:40:52.549124 132355217737216 run.py:722] (val) algo optimal_bst step 3500: {'root': 0.9464749134948097, 'score': 0.9464749134948097, 'examples_seen': 139424, 'step': 3500, 'algorithm': 'optimal_bst'}
I0716 16:40:55.435758 132355217737216 run.py:722] (val) algo optimal_bst step 3550: {'root': 0.8868403979238755, 'score': 0.8868403979238755, 'examples_seen': 141408, 'step': 3550, 'algorithm': 'optimal_bst'}
I0716 16:40:58.294534 132355217737216 run.py:722] (val) algo optimal_bst step 3600: {'root': 0.9508542387543253, 'score': 0.9508542387543253, 'examples_seen': 143392, 'step': 3600, 'algorithm': 'optimal_bst'}
I0716 16:41:01.216784 132355217737216 run.py:722] (val) algo optimal_bst step 3650: {'root': 0.9346885813148789, 'score': 0.9346885813148789, 'examples_seen': 145360, 'step': 3650, 'algorithm': 'optimal_bst'}
I0716 16:41:04.147465 132355217737216 run.py:722] (val) algo optimal_bst step 3700: {'root': 0.9305255190311419, 'score': 0.9305255190311419, 'examples_seen': 147312, 'step': 3700, 'algorithm': 'optimal_bst'}
I0716 16:41:07.150628 132355217737216 run.py:722] (val) algo optimal_bst step 3750: {'root': 0.9396085640138409, 'score': 0.9396085640138409, 'examples_seen': 149312, 'step': 3750, 'algorithm': 'optimal_bst'}
I0716 16:41:10.040985 132355217737216 run.py:722] (val) algo optimal_bst step 3800: {'root': 0.9198205017301038, 'score': 0.9198205017301038, 'examples_seen': 151328, 'step': 3800, 'algorithm': 'optimal_bst'}
I0716 16:41:12.914063 132355217737216 run.py:722] (val) algo optimal_bst step 3850: {'root': 0.9338775951557093, 'score': 0.9338775951557093, 'examples_seen': 153344, 'step': 3850, 'algorithm': 'optimal_bst'}
I0716 16:41:15.770392 132355217737216 run.py:722] (val) algo optimal_bst step 3900: {'root': 0.9416089965397924, 'score': 0.9416089965397924, 'examples_seen': 155344, 'step': 3900, 'algorithm': 'optimal_bst'}
I0716 16:41:18.636907 132355217737216 run.py:722] (val) algo optimal_bst step 3950: {'root': 0.9360942906574394, 'score': 0.9360942906574394, 'examples_seen': 157312, 'step': 3950, 'algorithm': 'optimal_bst'}
I0716 16:41:21.535268 132355217737216 run.py:722] (val) algo optimal_bst step 4000: {'root': 0.9410142733564014, 'score': 0.9410142733564014, 'examples_seen': 159312, 'step': 4000, 'algorithm': 'optimal_bst'}
I0716 16:41:24.467944 132355217737216 run.py:722] (val) algo optimal_bst step 4050: {'root': 0.941825259515571, 'score': 0.941825259515571, 'examples_seen': 161248, 'step': 4050, 'algorithm': 'optimal_bst'}
I0716 16:41:27.475903 132355217737216 run.py:722] (val) algo optimal_bst step 4100: {'root': 0.9482590830449827, 'score': 0.9482590830449827, 'examples_seen': 163216, 'step': 4100, 'algorithm': 'optimal_bst'}
I0716 16:41:30.360299 132355217737216 run.py:722] (val) algo optimal_bst step 4150: {'root': 0.9479346885813149, 'score': 0.9479346885813149, 'examples_seen': 165280, 'step': 4150, 'algorithm': 'optimal_bst'}
I0716 16:41:33.230126 132355217737216 run.py:722] (val) algo optimal_bst step 4200: {'root': 0.9477184256055363, 'score': 0.9477184256055363, 'examples_seen': 167264, 'step': 4200, 'algorithm': 'optimal_bst'}
I0716 16:41:36.092105 132355217737216 run.py:722] (val) algo optimal_bst step 4250: {'root': 0.9221993944636678, 'score': 0.9221993944636678, 'examples_seen': 169280, 'step': 4250, 'algorithm': 'optimal_bst'}
I0716 16:41:38.951603 132355217737216 run.py:722] (val) algo optimal_bst step 4300: {'root': 0.9407439446366782, 'score': 0.9407439446366782, 'examples_seen': 171248, 'step': 4300, 'algorithm': 'optimal_bst'}
I0716 16:41:41.864501 132355217737216 run.py:722] (val) algo optimal_bst step 4350: {'root': 0.9381487889273357, 'score': 0.9381487889273357, 'examples_seen': 173216, 'step': 4350, 'algorithm': 'optimal_bst'}
I0716 16:41:44.798985 132355217737216 run.py:722] (val) algo optimal_bst step 4400: {'root': 0.9479887543252595, 'score': 0.9479887543252595, 'examples_seen': 175232, 'step': 4400, 'algorithm': 'optimal_bst'}
I0716 16:41:47.799588 132355217737216 run.py:722] (val) algo optimal_bst step 4450: {'root': 0.9466911764705882, 'score': 0.9466911764705882, 'examples_seen': 177168, 'step': 4450, 'algorithm': 'optimal_bst'}
I0716 16:41:50.680188 132355217737216 run.py:722] (val) algo optimal_bst step 4500: {'root': 0.9311743079584776, 'score': 0.9311743079584776, 'examples_seen': 179216, 'step': 4500, 'algorithm': 'optimal_bst'}
I0716 16:41:53.543612 132355217737216 run.py:722] (val) algo optimal_bst step 4550: {'root': 0.9472318339100346, 'score': 0.9472318339100346, 'examples_seen': 181232, 'step': 4550, 'algorithm': 'optimal_bst'}
I0716 16:41:56.410213 132355217737216 run.py:722] (val) algo optimal_bst step 4600: {'root': 0.9536656574394463, 'score': 0.9536656574394463, 'examples_seen': 183216, 'step': 4600, 'algorithm': 'optimal_bst'}
I0716 16:41:59.292972 132355217737216 run.py:722] (val) algo optimal_bst step 4650: {'root': 0.9340397923875432, 'score': 0.9340397923875432, 'examples_seen': 185200, 'step': 4650, 'algorithm': 'optimal_bst'}
I0716 16:42:02.193885 132355217737216 run.py:722] (val) algo optimal_bst step 4700: {'root': 0.9320393598615917, 'score': 0.9320393598615917, 'examples_seen': 187168, 'step': 4700, 'algorithm': 'optimal_bst'}
I0716 16:42:05.139827 132355217737216 run.py:722] (val) algo optimal_bst step 4750: {'root': 0.940473615916955, 'score': 0.940473615916955, 'examples_seen': 189136, 'step': 4750, 'algorithm': 'optimal_bst'}
I0716 16:42:08.108764 132355217737216 run.py:722] (val) algo optimal_bst step 4800: {'root': 0.9497188581314879, 'score': 0.9497188581314879, 'examples_seen': 191120, 'step': 4800, 'algorithm': 'optimal_bst'}
I0716 16:42:11.005107 132355217737216 run.py:722] (val) algo optimal_bst step 4850: {'root': 0.9412305363321799, 'score': 0.9412305363321799, 'examples_seen': 193136, 'step': 4850, 'algorithm': 'optimal_bst'}
I0716 16:42:13.876027 132355217737216 run.py:722] (val) algo optimal_bst step 4900: {'root': 0.9460964532871973, 'score': 0.9460964532871973, 'examples_seen': 195152, 'step': 4900, 'algorithm': 'optimal_bst'}
I0716 16:42:16.732178 132355217737216 run.py:722] (val) algo optimal_bst step 4950: {'root': 0.9370134083044983, 'score': 0.9370134083044983, 'examples_seen': 197152, 'step': 4950, 'algorithm': 'optimal_bst'}
I0716 16:42:19.598085 132355217737216 run.py:722] (val) algo optimal_bst step 5000: {'root': 0.9429065743944637, 'score': 0.9429065743944637, 'examples_seen': 199120, 'step': 5000, 'algorithm': 'optimal_bst'}
I0716 16:42:22.496100 132355217737216 run.py:722] (val) algo optimal_bst step 5050: {'root': 0.9529087370242214, 'score': 0.9529087370242214, 'examples_seen': 201120, 'step': 5050, 'algorithm': 'optimal_bst'}
I0716 16:42:25.426674 132355217737216 run.py:722] (val) algo optimal_bst step 5100: {'root': 0.9456639273356401, 'score': 0.9456639273356401, 'examples_seen': 203072, 'step': 5100, 'algorithm': 'optimal_bst'}
I0716 16:42:28.434050 132355217737216 run.py:722] (val) algo optimal_bst step 5150: {'root': 0.9435012975778547, 'score': 0.9435012975778547, 'examples_seen': 205024, 'step': 5150, 'algorithm': 'optimal_bst'}
I0716 16:42:31.321256 132355217737216 run.py:722] (val) algo optimal_bst step 5200: {'root': 0.948799740484429, 'score': 0.948799740484429, 'examples_seen': 207088, 'step': 5200, 'algorithm': 'optimal_bst'}
I0716 16:42:34.195332 132355217737216 run.py:722] (val) algo optimal_bst step 5250: {'root': 0.9489078719723183, 'score': 0.9489078719723183, 'examples_seen': 209072, 'step': 5250, 'algorithm': 'optimal_bst'}
I0716 16:42:37.056217 132355217737216 run.py:722] (val) algo optimal_bst step 5300: {'root': 0.9382569204152249, 'score': 0.9382569204152249, 'examples_seen': 211088, 'step': 5300, 'algorithm': 'optimal_bst'}
I0716 16:42:39.916820 132355217737216 run.py:722] (val) algo optimal_bst step 5350: {'root': 0.941825259515571, 'score': 0.941825259515571, 'examples_seen': 213072, 'step': 5350, 'algorithm': 'optimal_bst'}
I0716 16:42:42.827598 132355217737216 run.py:722] (val) algo optimal_bst step 5400: {'root': 0.9498810553633218, 'score': 0.9498810553633218, 'examples_seen': 215024, 'step': 5400, 'algorithm': 'optimal_bst'}
I0716 16:42:45.758204 132355217737216 run.py:722] (val) algo optimal_bst step 5450: {'root': 0.9252811418685121, 'score': 0.9252811418685121, 'examples_seen': 217024, 'step': 5450, 'algorithm': 'optimal_bst'}
I0716 16:42:48.765542 132355217737216 run.py:722] (val) algo optimal_bst step 5500: {'root': 0.9520436851211073, 'score': 0.9520436851211073, 'examples_seen': 218960, 'step': 5500, 'algorithm': 'optimal_bst'}
I0716 16:42:51.661966 132355217737216 run.py:722] (val) algo optimal_bst step 5550: {'root': 0.9542063148788927, 'score': 0.9542063148788927, 'examples_seen': 221008, 'step': 5550, 'algorithm': 'optimal_bst'}
I0716 16:42:54.547754 132355217737216 run.py:722] (val) algo optimal_bst step 5600: {'root': 0.9509623702422145, 'score': 0.9509623702422145, 'examples_seen': 223024, 'step': 5600, 'algorithm': 'optimal_bst'}
I0716 16:42:57.412796 132355217737216 run.py:722] (val) algo optimal_bst step 5650: {'root': 0.9532871972318339, 'score': 0.9532871972318339, 'examples_seen': 225008, 'step': 5650, 'algorithm': 'optimal_bst'}
I0716 16:43:00.275704 132355217737216 run.py:722] (val) algo optimal_bst step 5700: {'root': 0.9146842560553633, 'score': 0.9146842560553633, 'examples_seen': 227008, 'step': 5700, 'algorithm': 'optimal_bst'}
I0716 16:43:03.177984 132355217737216 run.py:722] (val) algo optimal_bst step 5750: {'root': 0.9554498269896193, 'score': 0.9554498269896193, 'examples_seen': 228960, 'step': 5750, 'algorithm': 'optimal_bst'}
I0716 16:43:06.126653 132355217737216 run.py:722] (val) algo optimal_bst step 5800: {'root': 0.9504757785467128, 'score': 0.9504757785467128, 'examples_seen': 230928, 'step': 5800, 'algorithm': 'optimal_bst'}
I0716 16:43:09.134838 132355217737216 run.py:722] (val) algo optimal_bst step 5850: {'root': 0.9509083044982699, 'score': 0.9509083044982699, 'examples_seen': 232912, 'step': 5850, 'algorithm': 'optimal_bst'}
I0716 16:43:12.034655 132355217737216 run.py:722] (val) algo optimal_bst step 5900: {'root': 0.9417711937716263, 'score': 0.9417711937716263, 'examples_seen': 234928, 'step': 5900, 'algorithm': 'optimal_bst'}
I0716 16:43:14.905239 132355217737216 run.py:722] (val) algo optimal_bst step 5950: {'root': 0.9505298442906575, 'score': 0.9505298442906575, 'examples_seen': 236944, 'step': 5950, 'algorithm': 'optimal_bst'}
I0716 16:43:17.761676 132355217737216 run.py:722] (val) algo optimal_bst step 6000: {'root': 0.9524762110726643, 'score': 0.9524762110726643, 'examples_seen': 238944, 'step': 6000, 'algorithm': 'optimal_bst'}
I0716 16:43:20.631058 132355217737216 run.py:722] (val) algo optimal_bst step 6050: {'root': 0.9355536332179931, 'score': 0.9355536332179931, 'examples_seen': 240928, 'step': 6050, 'algorithm': 'optimal_bst'}
I0716 16:43:23.526871 132355217737216 run.py:722] (val) algo optimal_bst step 6100: {'root': 0.9536115916955017, 'score': 0.9536115916955017, 'examples_seen': 242912, 'step': 6100, 'algorithm': 'optimal_bst'}
I0716 16:43:26.459795 132355217737216 run.py:722] (val) algo optimal_bst step 6150: {'root': 0.9536656574394463, 'score': 0.9536656574394463, 'examples_seen': 244864, 'step': 6150, 'algorithm': 'optimal_bst'}
I0716 16:43:29.466089 132355217737216 run.py:722] (val) algo optimal_bst step 6200: {'root': 0.9568014705882353, 'score': 0.9568014705882353, 'examples_seen': 246816, 'step': 6200, 'algorithm': 'optimal_bst'}
I0716 16:43:32.374375 132355217737216 run.py:722] (val) algo optimal_bst step 6250: {'root': 0.9535034602076125, 'score': 0.9535034602076125, 'examples_seen': 248880, 'step': 6250, 'algorithm': 'optimal_bst'}
I0716 16:43:35.248852 132355217737216 run.py:722] (val) algo optimal_bst step 6300: {'root': 0.930958044982699, 'score': 0.930958044982699, 'examples_seen': 250880, 'step': 6300, 'algorithm': 'optimal_bst'}
I0716 16:43:38.113377 132355217737216 run.py:722] (val) algo optimal_bst step 6350: {'root': 0.9487456747404844, 'score': 0.9487456747404844, 'examples_seen': 252880, 'step': 6350, 'algorithm': 'optimal_bst'}
I0716 16:43:40.966575 132355217737216 run.py:722] (val) algo optimal_bst step 6400: {'root': 0.9520977508650519, 'score': 0.9520977508650519, 'examples_seen': 254864, 'step': 6400, 'algorithm': 'optimal_bst'}
I0716 16:43:43.879508 132355217737216 run.py:722] (val) algo optimal_bst step 6450: {'root': 0.9509623702422145, 'score': 0.9509623702422145, 'examples_seen': 256816, 'step': 6450, 'algorithm': 'optimal_bst'}
I0716 16:43:46.813427 132355217737216 run.py:722] (val) algo optimal_bst step 6500: {'root': 0.9571799307958477, 'score': 0.9571799307958477, 'examples_seen': 258816, 'step': 6500, 'algorithm': 'optimal_bst'}
I0716 16:43:49.834094 132355217737216 run.py:722] (val) algo optimal_bst step 6550: {'root': 0.9521518166089965, 'score': 0.9521518166089965, 'examples_seen': 260752, 'step': 6550, 'algorithm': 'optimal_bst'}
I0716 16:43:52.727108 132355217737216 run.py:722] (val) algo optimal_bst step 6600: {'root': 0.9559904844290658, 'score': 0.9559904844290658, 'examples_seen': 262800, 'step': 6600, 'algorithm': 'optimal_bst'}
I0716 16:43:55.596910 132355217737216 run.py:722] (val) algo optimal_bst step 6650: {'root': 0.948961937716263, 'score': 0.948961937716263, 'examples_seen': 264832, 'step': 6650, 'algorithm': 'optimal_bst'}
I0716 16:43:58.468968 132355217737216 run.py:722] (val) algo optimal_bst step 6700: {'root': 0.934364186851211, 'score': 0.934364186851211, 'examples_seen': 266800, 'step': 6700, 'algorithm': 'optimal_bst'}
I0716 16:44:01.327364 132355217737216 run.py:722] (val) algo optimal_bst step 6750: {'root': 0.9559364186851211, 'score': 0.9559364186851211, 'examples_seen': 268800, 'step': 6750, 'algorithm': 'optimal_bst'}
I0716 16:44:04.224004 132355217737216 run.py:722] (val) algo optimal_bst step 6800: {'root': 0.9572339965397924, 'score': 0.9572339965397924, 'examples_seen': 270752, 'step': 6800, 'algorithm': 'optimal_bst'}
I0716 16:44:07.161884 132355217737216 run.py:722] (val) algo optimal_bst step 6850: {'root': 0.947015570934256, 'score': 0.947015570934256, 'examples_seen': 272736, 'step': 6850, 'algorithm': 'optimal_bst'}
I0716 16:44:10.165896 132355217737216 run.py:722] (val) algo optimal_bst step 6900: {'root': 0.9592884948096886, 'score': 0.9592884948096886, 'examples_seen': 274720, 'step': 6900, 'algorithm': 'optimal_bst'}
I0716 16:44:13.082950 132355217737216 run.py:722] (val) algo optimal_bst step 6950: {'root': 0.9521518166089965, 'score': 0.9521518166089965, 'examples_seen': 276736, 'step': 6950, 'algorithm': 'optimal_bst'}
I0716 16:44:15.942537 132355217737216 run.py:722] (val) algo optimal_bst step 7000: {'root': 0.9384191176470589, 'score': 0.9384191176470589, 'examples_seen': 278768, 'step': 7000, 'algorithm': 'optimal_bst'}
I0716 16:44:18.800162 132355217737216 run.py:722] (val) algo optimal_bst step 7050: {'root': 0.9604238754325259, 'score': 0.9604238754325259, 'examples_seen': 280752, 'step': 7050, 'algorithm': 'optimal_bst'}
I0716 16:44:21.685223 132355217737216 run.py:722] (val) algo optimal_bst step 7100: {'root': 0.954746972318339, 'score': 0.954746972318339, 'examples_seen': 282736, 'step': 7100, 'algorithm': 'optimal_bst'}
I0716 16:44:24.859160 132355217737216 run.py:722] (val) algo optimal_bst step 7150: {'root': 0.954746972318339, 'score': 0.954746972318339, 'examples_seen': 284720, 'step': 7150, 'algorithm': 'optimal_bst'}
I0716 16:44:27.782063 132355217737216 run.py:722] (val) algo optimal_bst step 7200: {'root': 0.9585315743944637, 'score': 0.9585315743944637, 'examples_seen': 286672, 'step': 7200, 'algorithm': 'optimal_bst'}
I0716 16:44:30.791326 132355217737216 run.py:722] (val) algo optimal_bst step 7250: {'root': 0.9528546712802768, 'score': 0.9528546712802768, 'examples_seen': 288640, 'step': 7250, 'algorithm': 'optimal_bst'}
I0716 16:44:33.671878 132355217737216 run.py:722] (val) algo optimal_bst step 7300: {'root': 0.9564230103806228, 'score': 0.9564230103806228, 'examples_seen': 290688, 'step': 7300, 'algorithm': 'optimal_bst'}
I0716 16:44:36.541389 132355217737216 run.py:722] (val) algo optimal_bst step 7350: {'root': 0.9396626297577855, 'score': 0.9396626297577855, 'examples_seen': 292688, 'step': 7350, 'algorithm': 'optimal_bst'}
I0716 16:44:39.404658 132355217737216 run.py:722] (val) algo optimal_bst step 7400: {'root': 0.950151384083045, 'score': 0.950151384083045, 'examples_seen': 294688, 'step': 7400, 'algorithm': 'optimal_bst'}
I0716 16:44:42.262940 132355217737216 run.py:722] (val) algo optimal_bst step 7450: {'root': 0.9347426470588235, 'score': 0.9347426470588235, 'examples_seen': 296672, 'step': 7450, 'algorithm': 'optimal_bst'}
I0716 16:44:45.170515 132355217737216 run.py:722] (val) algo optimal_bst step 7500: {'root': 0.9526924740484429, 'score': 0.9526924740484429, 'examples_seen': 298624, 'step': 7500, 'algorithm': 'optimal_bst'}
I0716 16:44:48.102672 132355217737216 run.py:722] (val) algo optimal_bst step 7550: {'root': 0.9491241349480969, 'score': 0.9491241349480969, 'examples_seen': 300624, 'step': 7550, 'algorithm': 'optimal_bst'}
I0716 16:44:51.107554 132355217737216 run.py:722] (val) algo optimal_bst step 7600: {'root': 0.9575043252595156, 'score': 0.9575043252595156, 'examples_seen': 302576, 'step': 7600, 'algorithm': 'optimal_bst'}
I0716 16:44:54.002353 132355217737216 run.py:722] (val) algo optimal_bst step 7650: {'root': 0.9499351211072664, 'score': 0.9499351211072664, 'examples_seen': 304608, 'step': 7650, 'algorithm': 'optimal_bst'}
I0716 16:44:56.863857 132355217737216 run.py:722] (val) algo optimal_bst step 7700: {'root': 0.9471237024221453, 'score': 0.9471237024221453, 'examples_seen': 306640, 'step': 7700, 'algorithm': 'optimal_bst'}
I0716 16:44:59.726678 132355217737216 run.py:722] (val) algo optimal_bst step 7750: {'root': 0.9559364186851211, 'score': 0.9559364186851211, 'examples_seen': 308608, 'step': 7750, 'algorithm': 'optimal_bst'}
I0716 16:45:02.566074 132355217737216 run.py:722] (val) algo optimal_bst step 7800: {'root': 0.9210099480968859, 'score': 0.9210099480968859, 'examples_seen': 310608, 'step': 7800, 'algorithm': 'optimal_bst'}
I0716 16:45:05.463372 132355217737216 run.py:722] (val) algo optimal_bst step 7850: {'root': 0.9515570934256056, 'score': 0.9515570934256056, 'examples_seen': 312576, 'step': 7850, 'algorithm': 'optimal_bst'}
I0716 16:45:08.393397 132355217737216 run.py:722] (val) algo optimal_bst step 7900: {'root': 0.958044982698962, 'score': 0.958044982698962, 'examples_seen': 314528, 'step': 7900, 'algorithm': 'optimal_bst'}
I0716 16:45:11.405135 132355217737216 run.py:722] (val) algo optimal_bst step 7950: {'root': 0.9554498269896193, 'score': 0.9554498269896193, 'examples_seen': 316528, 'step': 7950, 'algorithm': 'optimal_bst'}
I0716 16:45:14.305072 132355217737216 run.py:722] (val) algo optimal_bst step 8000: {'root': 0.9621539792387543, 'score': 0.9621539792387543, 'examples_seen': 318528, 'step': 8000, 'algorithm': 'optimal_bst'}
I0716 16:45:17.196719 132355217737216 run.py:722] (val) algo optimal_bst step 8050: {'root': 0.952530276816609, 'score': 0.952530276816609, 'examples_seen': 320560, 'step': 8050, 'algorithm': 'optimal_bst'}
I0716 16:45:20.042296 132355217737216 run.py:722] (val) algo optimal_bst step 8100: {'root': 0.9504757785467128, 'score': 0.9504757785467128, 'examples_seen': 322544, 'step': 8100, 'algorithm': 'optimal_bst'}
I0716 16:45:22.908472 132355217737216 run.py:722] (val) algo optimal_bst step 8150: {'root': 0.9623161764705882, 'score': 0.9623161764705882, 'examples_seen': 324528, 'step': 8150, 'algorithm': 'optimal_bst'}
I0716 16:45:25.829110 132355217737216 run.py:722] (val) algo optimal_bst step 8200: {'root': 0.9630730968858131, 'score': 0.9630730968858131, 'examples_seen': 326528, 'step': 8200, 'algorithm': 'optimal_bst'}
I0716 16:45:28.784998 132355217737216 run.py:722] (val) algo optimal_bst step 8250: {'root': 0.9630190311418685, 'score': 0.9630190311418685, 'examples_seen': 328464, 'step': 8250, 'algorithm': 'optimal_bst'}
I0716 16:45:31.797755 132355217737216 run.py:722] (val) algo optimal_bst step 8300: {'root': 0.954746972318339, 'score': 0.954746972318339, 'examples_seen': 330432, 'step': 8300, 'algorithm': 'optimal_bst'}
I0716 16:45:34.680142 132355217737216 run.py:722] (val) algo optimal_bst step 8350: {'root': 0.9555579584775087, 'score': 0.9555579584775087, 'examples_seen': 332480, 'step': 8350, 'algorithm': 'optimal_bst'}
I0716 16:45:37.554460 132355217737216 run.py:722] (val) algo optimal_bst step 8400: {'root': 0.9433391003460208, 'score': 0.9433391003460208, 'examples_seen': 334480, 'step': 8400, 'algorithm': 'optimal_bst'}
I0716 16:45:40.415769 132355217737216 run.py:722] (val) algo optimal_bst step 8450: {'root': 0.9597750865051903, 'score': 0.9597750865051903, 'examples_seen': 336480, 'step': 8450, 'algorithm': 'optimal_bst'}
I0716 16:45:43.275771 132355217737216 run.py:722] (val) algo optimal_bst step 8500: {'root': 0.9464749134948097, 'score': 0.9464749134948097, 'examples_seen': 338464, 'step': 8500, 'algorithm': 'optimal_bst'}
I0716 16:45:46.187991 132355217737216 run.py:722] (val) algo optimal_bst step 8550: {'root': 0.9481509515570934, 'score': 0.9481509515570934, 'examples_seen': 340432, 'step': 8550, 'algorithm': 'optimal_bst'}
I0716 16:45:49.118440 132355217737216 run.py:722] (val) algo optimal_bst step 8600: {'root': 0.9477184256055363, 'score': 0.9477184256055363, 'examples_seen': 342416, 'step': 8600, 'algorithm': 'optimal_bst'}
I0716 16:45:52.125460 132355217737216 run.py:722] (val) algo optimal_bst step 8650: {'root': 0.9598291522491349, 'score': 0.9598291522491349, 'examples_seen': 344368, 'step': 8650, 'algorithm': 'optimal_bst'}
I0716 16:45:55.018569 132355217737216 run.py:722] (val) algo optimal_bst step 8700: {'root': 0.9587478373702422, 'score': 0.9587478373702422, 'examples_seen': 346400, 'step': 8700, 'algorithm': 'optimal_bst'}
I0716 16:45:57.883041 132355217737216 run.py:722] (val) algo optimal_bst step 8750: {'root': 0.9597210207612457, 'score': 0.9597210207612457, 'examples_seen': 348432, 'step': 8750, 'algorithm': 'optimal_bst'}
I0716 16:46:00.749004 132355217737216 run.py:722] (val) algo optimal_bst step 8800: {'root': 0.9576665224913494, 'score': 0.9576665224913494, 'examples_seen': 350416, 'step': 8800, 'algorithm': 'optimal_bst'}
I0716 16:46:03.604417 132355217737216 run.py:722] (val) algo optimal_bst step 8850: {'root': 0.9502054498269896, 'score': 0.9502054498269896, 'examples_seen': 352400, 'step': 8850, 'algorithm': 'optimal_bst'}
I0716 16:46:06.503430 132355217737216 run.py:722] (val) algo optimal_bst step 8900: {'root': 0.9478806228373703, 'score': 0.9478806228373703, 'examples_seen': 354368, 'step': 8900, 'algorithm': 'optimal_bst'}
I0716 16:46:09.435217 132355217737216 run.py:722] (val) algo optimal_bst step 8950: {'root': 0.9575043252595156, 'score': 0.9575043252595156, 'examples_seen': 356320, 'step': 8950, 'algorithm': 'optimal_bst'}
I0716 16:46:12.431852 132355217737216 run.py:722] (val) algo optimal_bst step 9000: {'root': 0.9632893598615917, 'score': 0.9632893598615917, 'examples_seen': 358320, 'step': 9000, 'algorithm': 'optimal_bst'}
I0716 16:46:15.351596 132355217737216 run.py:722] (val) algo optimal_bst step 9050: {'root': 0.9542063148788927, 'score': 0.9542063148788927, 'examples_seen': 360320, 'step': 9050, 'algorithm': 'optimal_bst'}
I0716 16:46:18.224087 132355217737216 run.py:722] (val) algo optimal_bst step 9100: {'root': 0.9433931660899654, 'score': 0.9433931660899654, 'examples_seen': 362352, 'step': 9100, 'algorithm': 'optimal_bst'}
I0716 16:46:21.078185 132355217737216 run.py:722] (val) algo optimal_bst step 9150: {'root': 0.9558282871972318, 'score': 0.9558282871972318, 'examples_seen': 364352, 'step': 9150, 'algorithm': 'optimal_bst'}
I0716 16:46:23.932561 132355217737216 run.py:722] (val) algo optimal_bst step 9200: {'root': 0.9555579584775087, 'score': 0.9555579584775087, 'examples_seen': 366320, 'step': 9200, 'algorithm': 'optimal_bst'}
I0716 16:46:26.831289 132355217737216 run.py:722] (val) algo optimal_bst step 9250: {'root': 0.9555038927335641, 'score': 0.9555038927335641, 'examples_seen': 368320, 'step': 9250, 'algorithm': 'optimal_bst'}
I0716 16:46:29.762053 132355217737216 run.py:722] (val) algo optimal_bst step 9300: {'root': 0.962640570934256, 'score': 0.962640570934256, 'examples_seen': 370272, 'step': 9300, 'algorithm': 'optimal_bst'}
I0716 16:46:32.769255 132355217737216 run.py:722] (val) algo optimal_bst step 9350: {'root': 0.9528546712802768, 'score': 0.9528546712802768, 'examples_seen': 372240, 'step': 9350, 'algorithm': 'optimal_bst'}
I0716 16:46:35.652769 132355217737216 run.py:722] (val) algo optimal_bst step 9400: {'root': 0.9600994809688581, 'score': 0.9600994809688581, 'examples_seen': 374288, 'step': 9400, 'algorithm': 'optimal_bst'}
I0716 16:46:38.528437 132355217737216 run.py:722] (val) algo optimal_bst step 9450: {'root': 0.9452854671280276, 'score': 0.9452854671280276, 'examples_seen': 376288, 'step': 9450, 'algorithm': 'optimal_bst'}
I0716 16:46:41.396056 132355217737216 run.py:722] (val) algo optimal_bst step 9500: {'root': 0.9505298442906575, 'score': 0.9505298442906575, 'examples_seen': 378304, 'step': 9500, 'algorithm': 'optimal_bst'}
I0716 16:46:44.257459 132355217737216 run.py:722] (val) algo optimal_bst step 9550: {'root': 0.9264705882352942, 'score': 0.9264705882352942, 'examples_seen': 380272, 'step': 9550, 'algorithm': 'optimal_bst'}
I0716 16:46:47.167948 132355217737216 run.py:722] (val) algo optimal_bst step 9600: {'root': 0.9558282871972318, 'score': 0.9558282871972318, 'examples_seen': 382240, 'step': 9600, 'algorithm': 'optimal_bst'}
I0716 16:46:50.114150 132355217737216 run.py:722] (val) algo optimal_bst step 9650: {'root': 0.9591803633217993, 'score': 0.9591803633217993, 'examples_seen': 384224, 'step': 9650, 'algorithm': 'optimal_bst'}
I0716 16:46:53.119884 132355217737216 run.py:722] (val) algo optimal_bst step 9700: {'root': 0.956693339100346, 'score': 0.956693339100346, 'examples_seen': 386176, 'step': 9700, 'algorithm': 'optimal_bst'}
I0716 16:46:56.004420 132355217737216 run.py:722] (val) algo optimal_bst step 9750: {'root': 0.9492863321799307, 'score': 0.9492863321799307, 'examples_seen': 388224, 'step': 9750, 'algorithm': 'optimal_bst'}
I0716 16:46:58.857826 132355217737216 run.py:722] (val) algo optimal_bst step 9800: {'root': 0.9597210207612457, 'score': 0.9597210207612457, 'examples_seen': 390240, 'step': 9800, 'algorithm': 'optimal_bst'}
I0716 16:47:01.722811 132355217737216 run.py:722] (val) algo optimal_bst step 9850: {'root': 0.9602076124567474, 'score': 0.9602076124567474, 'examples_seen': 392224, 'step': 9850, 'algorithm': 'optimal_bst'}
I0716 16:47:04.583158 132355217737216 run.py:722] (val) algo optimal_bst step 9900: {'root': 0.957882785467128, 'score': 0.957882785467128, 'examples_seen': 394208, 'step': 9900, 'algorithm': 'optimal_bst'}
I0716 16:47:07.480341 132355217737216 run.py:722] (val) algo optimal_bst step 9950: {'root': 0.945231401384083, 'score': 0.945231401384083, 'examples_seen': 396176, 'step': 9950, 'algorithm': 'optimal_bst'}
I0716 16:47:10.147468 132355217737216 run.py:752] Restoring best model from checkpoint...
I0716 16:47:23.957207 132355217737216 run.py:767] (test) algo optimal_bst : {'root': 0.7964275147928994, 'score': 0.7964275147928994, 'examples_seen': 398112, 'step': 10000, 'algorithm': 'optimal_bst'}
I0716 16:47:23.957404 132355217737216 run.py:769] Done!
