I0715 17:22:15.784740 133499031156224 run.py:723] (val) algo optimal_bst step 0: {'root': 0.5055147058823529, 'score': 0.5055147058823529, 'examples_seen': 64, 'step': 0, 'algorithm': 'optimal_bst'}
I0715 17:23:57.539468 133499031156224 run.py:723] (val) algo optimal_bst step 50: {'root': 0.6064554498269896, 'score': 0.6064554498269896, 'examples_seen': 2080, 'step': 50, 'algorithm': 'optimal_bst'}
I0715 17:24:00.523936 133499031156224 run.py:723] (val) algo optimal_bst step 100: {'root': 0.6854995674740484, 'score': 0.6854995674740484, 'examples_seen': 4064, 'step': 100, 'algorithm': 'optimal_bst'}
I0715 17:24:03.547658 133499031156224 run.py:723] (val) algo optimal_bst step 150: {'root': 0.7589208477508651, 'score': 0.7589208477508651, 'examples_seen': 6016, 'step': 150, 'algorithm': 'optimal_bst'}
I0715 17:24:06.597152 133499031156224 run.py:723] (val) algo optimal_bst step 200: {'root': 0.7538386678200693, 'score': 0.7538386678200693, 'examples_seen': 8016, 'step': 200, 'algorithm': 'optimal_bst'}
I0715 17:24:09.694044 133499031156224 run.py:723] (val) algo optimal_bst step 250: {'root': 0.8197448096885813, 'score': 0.8197448096885813, 'examples_seen': 9952, 'step': 250, 'algorithm': 'optimal_bst'}
I0715 17:24:12.692391 133499031156224 run.py:723] (val) algo optimal_bst step 300: {'root': 0.8494809688581315, 'score': 0.8494809688581315, 'examples_seen': 12000, 'step': 300, 'algorithm': 'optimal_bst'}
I0715 17:24:15.663499 133499031156224 run.py:723] (val) algo optimal_bst step 350: {'root': 0.8556444636678201, 'score': 0.8556444636678201, 'examples_seen': 14032, 'step': 350, 'algorithm': 'optimal_bst'}
I0715 17:24:18.635664 133499031156224 run.py:723] (val) algo optimal_bst step 400: {'root': 0.8318014705882353, 'score': 0.8318014705882353, 'examples_seen': 16000, 'step': 400, 'algorithm': 'optimal_bst'}
I0715 17:24:21.578868 133499031156224 run.py:723] (val) algo optimal_bst step 450: {'root': 0.7070177335640139, 'score': 0.7070177335640139, 'examples_seen': 18000, 'step': 450, 'algorithm': 'optimal_bst'}
I0715 17:24:24.546331 133499031156224 run.py:723] (val) algo optimal_bst step 500: {'root': 0.8346128892733564, 'score': 0.8346128892733564, 'examples_seen': 19952, 'step': 500, 'algorithm': 'optimal_bst'}
I0715 17:24:27.570316 133499031156224 run.py:723] (val) algo optimal_bst step 550: {'root': 0.9106293252595156, 'score': 0.9106293252595156, 'examples_seen': 21920, 'step': 550, 'algorithm': 'optimal_bst'}
I0715 17:24:30.678377 133499031156224 run.py:723] (val) algo optimal_bst step 600: {'root': 0.9055471453287197, 'score': 0.9055471453287197, 'examples_seen': 23904, 'step': 600, 'algorithm': 'optimal_bst'}
I0715 17:24:33.666553 133499031156224 run.py:723] (val) algo optimal_bst step 650: {'root': 0.8921388408304498, 'score': 0.8921388408304498, 'examples_seen': 25920, 'step': 650, 'algorithm': 'optimal_bst'}
I0715 17:24:36.633776 133499031156224 run.py:723] (val) algo optimal_bst step 700: {'root': 0.7637867647058824, 'score': 0.7637867647058824, 'examples_seen': 27952, 'step': 700, 'algorithm': 'optimal_bst'}
I0715 17:24:39.576826 133499031156224 run.py:723] (val) algo optimal_bst step 750: {'root': 0.9107374567474048, 'score': 0.9107374567474048, 'examples_seen': 29936, 'step': 750, 'algorithm': 'optimal_bst'}
I0715 17:24:42.558392 133499031156224 run.py:723] (val) algo optimal_bst step 800: {'root': 0.909818339100346, 'score': 0.909818339100346, 'examples_seen': 31920, 'step': 800, 'algorithm': 'optimal_bst'}
I0715 17:24:45.549950 133499031156224 run.py:723] (val) algo optimal_bst step 850: {'root': 0.9147383217993079, 'score': 0.9147383217993079, 'examples_seen': 33904, 'step': 850, 'algorithm': 'optimal_bst'}
I0715 17:24:48.606073 133499031156224 run.py:723] (val) algo optimal_bst step 900: {'root': 0.9286332179930796, 'score': 0.9286332179930796, 'examples_seen': 35856, 'step': 900, 'algorithm': 'optimal_bst'}
I0715 17:24:51.725957 133499031156224 run.py:723] (val) algo optimal_bst step 950: {'root': 0.9272815743944637, 'score': 0.9272815743944637, 'examples_seen': 37808, 'step': 950, 'algorithm': 'optimal_bst'}
I0715 17:24:54.705973 133499031156224 run.py:723] (val) algo optimal_bst step 1000: {'root': 0.9267409169550173, 'score': 0.9267409169550173, 'examples_seen': 39872, 'step': 1000, 'algorithm': 'optimal_bst'}
I0715 17:24:57.647622 133499031156224 run.py:723] (val) algo optimal_bst step 1050: {'root': 0.8812175605536332, 'score': 0.8812175605536332, 'examples_seen': 41872, 'step': 1050, 'algorithm': 'optimal_bst'}
I0715 17:25:00.580732 133499031156224 run.py:723] (val) algo optimal_bst step 1100: {'root': 0.862510813148789, 'score': 0.862510813148789, 'examples_seen': 43872, 'step': 1100, 'algorithm': 'optimal_bst'}
I0715 17:25:03.537642 133499031156224 run.py:723] (val) algo optimal_bst step 1150: {'root': 0.9180363321799307, 'score': 0.9180363321799307, 'examples_seen': 45856, 'step': 1150, 'algorithm': 'optimal_bst'}
I0715 17:25:06.553190 133499031156224 run.py:723] (val) algo optimal_bst step 1200: {'root': 0.912791955017301, 'score': 0.912791955017301, 'examples_seen': 47808, 'step': 1200, 'algorithm': 'optimal_bst'}
I0715 17:25:09.590161 133499031156224 run.py:723] (val) algo optimal_bst step 1250: {'root': 0.8799740484429066, 'score': 0.8799740484429066, 'examples_seen': 49808, 'step': 1250, 'algorithm': 'optimal_bst'}
I0715 17:25:12.704936 133499031156224 run.py:723] (val) algo optimal_bst step 1300: {'root': 0.932742214532872, 'score': 0.932742214532872, 'examples_seen': 51760, 'step': 1300, 'algorithm': 'optimal_bst'}
I0715 17:25:15.714805 133499031156224 run.py:723] (val) algo optimal_bst step 1350: {'root': 0.9287954152249135, 'score': 0.9287954152249135, 'examples_seen': 53792, 'step': 1350, 'algorithm': 'optimal_bst'}
I0715 17:25:18.678047 133499031156224 run.py:723] (val) algo optimal_bst step 1400: {'root': 0.9233347750865052, 'score': 0.9233347750865052, 'examples_seen': 55824, 'step': 1400, 'algorithm': 'optimal_bst'}
I0715 17:25:21.638358 133499031156224 run.py:723] (val) algo optimal_bst step 1450: {'root': 0.9101967993079585, 'score': 0.9101967993079585, 'examples_seen': 57792, 'step': 1450, 'algorithm': 'optimal_bst'}
I0715 17:25:24.599213 133499031156224 run.py:723] (val) algo optimal_bst step 1500: {'root': 0.8995458477508651, 'score': 0.8995458477508651, 'examples_seen': 59792, 'step': 1500, 'algorithm': 'optimal_bst'}
I0715 17:25:27.602613 133499031156224 run.py:723] (val) algo optimal_bst step 1550: {'root': 0.9362564878892734, 'score': 0.9362564878892734, 'examples_seen': 61744, 'step': 1550, 'algorithm': 'optimal_bst'}
I0715 17:25:30.655927 133499031156224 run.py:723] (val) algo optimal_bst step 1600: {'root': 0.9404195501730104, 'score': 0.9404195501730104, 'examples_seen': 63712, 'step': 1600, 'algorithm': 'optimal_bst'}
I0715 17:25:33.784967 133499031156224 run.py:723] (val) algo optimal_bst step 1650: {'root': 0.9371215397923875, 'score': 0.9371215397923875, 'examples_seen': 65712, 'step': 1650, 'algorithm': 'optimal_bst'}
I0715 17:25:36.782191 133499031156224 run.py:723] (val) algo optimal_bst step 1700: {'root': 0.9389057093425606, 'score': 0.9389057093425606, 'examples_seen': 67712, 'step': 1700, 'algorithm': 'optimal_bst'}
I0715 17:25:39.755074 133499031156224 run.py:723] (val) algo optimal_bst step 1750: {'root': 0.9224156574394463, 'score': 0.9224156574394463, 'examples_seen': 69744, 'step': 1750, 'algorithm': 'optimal_bst'}
I0715 17:25:42.706741 133499031156224 run.py:723] (val) algo optimal_bst step 1800: {'root': 0.9255514705882353, 'score': 0.9255514705882353, 'examples_seen': 71728, 'step': 1800, 'algorithm': 'optimal_bst'}
I0715 17:25:45.676238 133499031156224 run.py:723] (val) algo optimal_bst step 1850: {'root': 0.9259839965397924, 'score': 0.9259839965397924, 'examples_seen': 73712, 'step': 1850, 'algorithm': 'optimal_bst'}
I0715 17:25:48.680808 133499031156224 run.py:723] (val) algo optimal_bst step 1900: {'root': 0.9298767301038062, 'score': 0.9298767301038062, 'examples_seen': 75712, 'step': 1900, 'algorithm': 'optimal_bst'}
I0715 17:25:51.714081 133499031156224 run.py:723] (val) algo optimal_bst step 1950: {'root': 0.9179822664359861, 'score': 0.9179822664359861, 'examples_seen': 77664, 'step': 1950, 'algorithm': 'optimal_bst'}
I0715 17:25:54.824882 133499031156224 run.py:723] (val) algo optimal_bst step 2000: {'root': 0.9463667820069204, 'score': 0.9463667820069204, 'examples_seen': 79632, 'step': 2000, 'algorithm': 'optimal_bst'}
I0715 17:25:57.829106 133499031156224 run.py:723] (val) algo optimal_bst step 2050: {'root': 0.9336613321799307, 'score': 0.9336613321799307, 'examples_seen': 81680, 'step': 2050, 'algorithm': 'optimal_bst'}
I0715 17:26:00.805200 133499031156224 run.py:723] (val) algo optimal_bst step 2100: {'root': 0.939121972318339, 'score': 0.939121972318339, 'examples_seen': 83680, 'step': 2100, 'algorithm': 'optimal_bst'}
I0715 17:26:03.770752 133499031156224 run.py:723] (val) algo optimal_bst step 2150: {'root': 0.9375, 'score': 0.9375, 'examples_seen': 85680, 'step': 2150, 'algorithm': 'optimal_bst'}
I0715 17:26:06.731398 133499031156224 run.py:723] (val) algo optimal_bst step 2200: {'root': 0.9203070934256056, 'score': 0.9203070934256056, 'examples_seen': 87664, 'step': 2200, 'algorithm': 'optimal_bst'}
I0715 17:26:09.746861 133499031156224 run.py:723] (val) algo optimal_bst step 2250: {'root': 0.8950043252595156, 'score': 0.8950043252595156, 'examples_seen': 89632, 'step': 2250, 'algorithm': 'optimal_bst'}
I0715 17:26:12.896600 133499031156224 run.py:723] (val) algo optimal_bst step 2300: {'root': 0.9447988754325259, 'score': 0.9447988754325259, 'examples_seen': 91616, 'step': 2300, 'algorithm': 'optimal_bst'}
I0715 17:26:16.069380 133499031156224 run.py:723] (val) algo optimal_bst step 2350: {'root': 0.9446366782006921, 'score': 0.9446366782006921, 'examples_seen': 93568, 'step': 2350, 'algorithm': 'optimal_bst'}
I0715 17:26:19.061977 133499031156224 run.py:723] (val) algo optimal_bst step 2400: {'root': 0.923226643598616, 'score': 0.923226643598616, 'examples_seen': 95600, 'step': 2400, 'algorithm': 'optimal_bst'}
I0715 17:26:22.030773 133499031156224 run.py:723] (val) algo optimal_bst step 2450: {'root': 0.9407439446366782, 'score': 0.9407439446366782, 'examples_seen': 97632, 'step': 2450, 'algorithm': 'optimal_bst'}
I0715 17:26:24.999995 133499031156224 run.py:723] (val) algo optimal_bst step 2500: {'root': 0.9475562283737025, 'score': 0.9475562283737025, 'examples_seen': 99600, 'step': 2500, 'algorithm': 'optimal_bst'}
I0715 17:26:27.985769 133499031156224 run.py:723] (val) algo optimal_bst step 2550: {'root': 0.8966803633217993, 'score': 0.8966803633217993, 'examples_seen': 101600, 'step': 2550, 'algorithm': 'optimal_bst'}
I0715 17:26:30.988147 133499031156224 run.py:723] (val) algo optimal_bst step 2600: {'root': 0.9327962802768166, 'score': 0.9327962802768166, 'examples_seen': 103568, 'step': 2600, 'algorithm': 'optimal_bst'}
I0715 17:26:34.024493 133499031156224 run.py:723] (val) algo optimal_bst step 2650: {'root': 0.9437175605536332, 'score': 0.9437175605536332, 'examples_seen': 105520, 'step': 2650, 'algorithm': 'optimal_bst'}
I0715 17:26:37.138361 133499031156224 run.py:723] (val) algo optimal_bst step 2700: {'root': 0.9446907439446367, 'score': 0.9446907439446367, 'examples_seen': 107520, 'step': 2700, 'algorithm': 'optimal_bst'}
I0715 17:26:40.140705 133499031156224 run.py:723] (val) algo optimal_bst step 2750: {'root': 0.9488538062283737, 'score': 0.9488538062283737, 'examples_seen': 109520, 'step': 2750, 'algorithm': 'optimal_bst'}
I0715 17:26:43.130800 133499031156224 run.py:723] (val) algo optimal_bst step 2800: {'root': 0.9288494809688581, 'score': 0.9288494809688581, 'examples_seen': 111552, 'step': 2800, 'algorithm': 'optimal_bst'}
I0715 17:26:46.090844 133499031156224 run.py:723] (val) algo optimal_bst step 2850: {'root': 0.8908412629757786, 'score': 0.8908412629757786, 'examples_seen': 113552, 'step': 2850, 'algorithm': 'optimal_bst'}
I0715 17:26:49.044537 133499031156224 run.py:723] (val) algo optimal_bst step 2900: {'root': 0.9141976643598616, 'score': 0.9141976643598616, 'examples_seen': 115520, 'step': 2900, 'algorithm': 'optimal_bst'}
I0715 17:26:52.049182 133499031156224 run.py:723] (val) algo optimal_bst step 2950: {'root': 0.9487456747404844, 'score': 0.9487456747404844, 'examples_seen': 117520, 'step': 2950, 'algorithm': 'optimal_bst'}
I0715 17:26:55.079573 133499031156224 run.py:723] (val) algo optimal_bst step 3000: {'root': 0.9462586505190311, 'score': 0.9462586505190311, 'examples_seen': 119456, 'step': 3000, 'algorithm': 'optimal_bst'}
I0715 17:26:58.194365 133499031156224 run.py:723] (val) algo optimal_bst step 3050: {'root': 0.9481509515570934, 'score': 0.9481509515570934, 'examples_seen': 121424, 'step': 3050, 'algorithm': 'optimal_bst'}
I0715 17:27:01.182085 133499031156224 run.py:723] (val) algo optimal_bst step 3100: {'root': 0.9431769031141869, 'score': 0.9431769031141869, 'examples_seen': 123472, 'step': 3100, 'algorithm': 'optimal_bst'}
I0715 17:27:04.139693 133499031156224 run.py:723] (val) algo optimal_bst step 3150: {'root': 0.9446907439446367, 'score': 0.9446907439446367, 'examples_seen': 125472, 'step': 3150, 'algorithm': 'optimal_bst'}
I0715 17:27:07.096884 133499031156224 run.py:723] (val) algo optimal_bst step 3200: {'root': 0.9201448961937716, 'score': 0.9201448961937716, 'examples_seen': 127488, 'step': 3200, 'algorithm': 'optimal_bst'}
I0715 17:27:10.058493 133499031156224 run.py:723] (val) algo optimal_bst step 3250: {'root': 0.9103589965397924, 'score': 0.9103589965397924, 'examples_seen': 129456, 'step': 3250, 'algorithm': 'optimal_bst'}
I0715 17:27:13.073052 133499031156224 run.py:723] (val) algo optimal_bst step 3300: {'root': 0.9229022491349481, 'score': 0.9229022491349481, 'examples_seen': 131424, 'step': 3300, 'algorithm': 'optimal_bst'}
I0715 17:27:16.111150 133499031156224 run.py:723] (val) algo optimal_bst step 3350: {'root': 0.9483131487889274, 'score': 0.9483131487889274, 'examples_seen': 133408, 'step': 3350, 'algorithm': 'optimal_bst'}
I0715 17:27:19.224024 133499031156224 run.py:723] (val) algo optimal_bst step 3400: {'root': 0.9482590830449827, 'score': 0.9482590830449827, 'examples_seen': 135360, 'step': 3400, 'algorithm': 'optimal_bst'}
I0715 17:27:22.219305 133499031156224 run.py:723] (val) algo optimal_bst step 3450: {'root': 0.94717776816609, 'score': 0.94717776816609, 'examples_seen': 137392, 'step': 3450, 'algorithm': 'optimal_bst'}
I0715 17:27:25.163447 133499031156224 run.py:723] (val) algo optimal_bst step 3500: {'root': 0.945231401384083, 'score': 0.945231401384083, 'examples_seen': 139424, 'step': 3500, 'algorithm': 'optimal_bst'}
I0715 17:27:28.119304 133499031156224 run.py:723] (val) algo optimal_bst step 3550: {'root': 0.9470696366782007, 'score': 0.9470696366782007, 'examples_seen': 141408, 'step': 3550, 'algorithm': 'optimal_bst'}
I0715 17:27:31.075968 133499031156224 run.py:723] (val) algo optimal_bst step 3600: {'root': 0.9552335640138409, 'score': 0.9552335640138409, 'examples_seen': 143392, 'step': 3600, 'algorithm': 'optimal_bst'}
I0715 17:27:34.085192 133499031156224 run.py:723] (val) algo optimal_bst step 3650: {'root': 0.9493403979238755, 'score': 0.9493403979238755, 'examples_seen': 145360, 'step': 3650, 'algorithm': 'optimal_bst'}
I0715 17:27:37.126583 133499031156224 run.py:723] (val) algo optimal_bst step 3700: {'root': 0.9509623702422145, 'score': 0.9509623702422145, 'examples_seen': 147312, 'step': 3700, 'algorithm': 'optimal_bst'}
I0715 17:27:40.240895 133499031156224 run.py:723] (val) algo optimal_bst step 3750: {'root': 0.9463667820069204, 'score': 0.9463667820069204, 'examples_seen': 149312, 'step': 3750, 'algorithm': 'optimal_bst'}
I0715 17:27:43.241599 133499031156224 run.py:723] (val) algo optimal_bst step 3800: {'root': 0.9458801903114187, 'score': 0.9458801903114187, 'examples_seen': 151328, 'step': 3800, 'algorithm': 'optimal_bst'}
I0715 17:27:46.210320 133499031156224 run.py:723] (val) algo optimal_bst step 3850: {'root': 0.9464208477508651, 'score': 0.9464208477508651, 'examples_seen': 153344, 'step': 3850, 'algorithm': 'optimal_bst'}
I0715 17:27:49.160812 133499031156224 run.py:723] (val) algo optimal_bst step 3900: {'root': 0.9478265570934256, 'score': 0.9478265570934256, 'examples_seen': 155344, 'step': 3900, 'algorithm': 'optimal_bst'}
I0715 17:27:52.110520 133499031156224 run.py:723] (val) algo optimal_bst step 3950: {'root': 0.9427443771626297, 'score': 0.9427443771626297, 'examples_seen': 157312, 'step': 3950, 'algorithm': 'optimal_bst'}
I0715 17:27:55.102348 133499031156224 run.py:723] (val) algo optimal_bst step 4000: {'root': 0.9451773356401384, 'score': 0.9451773356401384, 'examples_seen': 159312, 'step': 4000, 'algorithm': 'optimal_bst'}
I0715 17:27:58.143859 133499031156224 run.py:723] (val) algo optimal_bst step 4050: {'root': 0.9512326989619377, 'score': 0.9512326989619377, 'examples_seen': 161248, 'step': 4050, 'algorithm': 'optimal_bst'}
I0715 17:28:01.255185 133499031156224 run.py:723] (val) algo optimal_bst step 4100: {'root': 0.933931660899654, 'score': 0.933931660899654, 'examples_seen': 163216, 'step': 4100, 'algorithm': 'optimal_bst'}
I0715 17:28:04.242185 133499031156224 run.py:723] (val) algo optimal_bst step 4150: {'root': 0.9494485294117647, 'score': 0.9494485294117647, 'examples_seen': 165280, 'step': 4150, 'algorithm': 'optimal_bst'}
I0715 17:28:07.201757 133499031156224 run.py:723] (val) algo optimal_bst step 4200: {'root': 0.9407439446366782, 'score': 0.9407439446366782, 'examples_seen': 167264, 'step': 4200, 'algorithm': 'optimal_bst'}
I0715 17:28:10.167146 133499031156224 run.py:723] (val) algo optimal_bst step 4250: {'root': 0.9298226643598616, 'score': 0.9298226643598616, 'examples_seen': 169280, 'step': 4250, 'algorithm': 'optimal_bst'}
I0715 17:28:13.126370 133499031156224 run.py:723] (val) algo optimal_bst step 4300: {'root': 0.9496107266435986, 'score': 0.9496107266435986, 'examples_seen': 171248, 'step': 4300, 'algorithm': 'optimal_bst'}
I0715 17:28:16.138233 133499031156224 run.py:723] (val) algo optimal_bst step 4350: {'root': 0.9368512110726643, 'score': 0.9368512110726643, 'examples_seen': 173216, 'step': 4350, 'algorithm': 'optimal_bst'}
I0715 17:28:19.178656 133499031156224 run.py:723] (val) algo optimal_bst step 4400: {'root': 0.9535575259515571, 'score': 0.9535575259515571, 'examples_seen': 175232, 'step': 4400, 'algorithm': 'optimal_bst'}
I0715 17:28:22.263982 133499031156224 run.py:723] (val) algo optimal_bst step 4450: {'root': 0.9530168685121108, 'score': 0.9530168685121108, 'examples_seen': 177168, 'step': 4450, 'algorithm': 'optimal_bst'}
I0715 17:28:25.264544 133499031156224 run.py:723] (val) algo optimal_bst step 4500: {'root': 0.9264705882352942, 'score': 0.9264705882352942, 'examples_seen': 179216, 'step': 4500, 'algorithm': 'optimal_bst'}
I0715 17:28:28.227105 133499031156224 run.py:723] (val) algo optimal_bst step 4550: {'root': 0.9378243944636678, 'score': 0.9378243944636678, 'examples_seen': 181232, 'step': 4550, 'algorithm': 'optimal_bst'}
I0715 17:28:31.194980 133499031156224 run.py:723] (val) algo optimal_bst step 4600: {'root': 0.9251189446366782, 'score': 0.9251189446366782, 'examples_seen': 183216, 'step': 4600, 'algorithm': 'optimal_bst'}
I0715 17:28:34.153535 133499031156224 run.py:723] (val) algo optimal_bst step 4650: {'root': 0.9437716262975778, 'score': 0.9437716262975778, 'examples_seen': 185200, 'step': 4650, 'algorithm': 'optimal_bst'}
I0715 17:28:37.131444 133499031156224 run.py:723] (val) algo optimal_bst step 4700: {'root': 0.9438256920415224, 'score': 0.9438256920415224, 'examples_seen': 187168, 'step': 4700, 'algorithm': 'optimal_bst'}
I0715 17:28:40.159930 133499031156224 run.py:723] (val) algo optimal_bst step 4750: {'root': 0.9510705017301038, 'score': 0.9510705017301038, 'examples_seen': 189136, 'step': 4750, 'algorithm': 'optimal_bst'}
I0715 17:28:43.225204 133499031156224 run.py:723] (val) algo optimal_bst step 4800: {'root': 0.951503027681661, 'score': 0.951503027681661, 'examples_seen': 191120, 'step': 4800, 'algorithm': 'optimal_bst'}
I0715 17:28:46.206760 133499031156224 run.py:723] (val) algo optimal_bst step 4850: {'root': 0.9568014705882353, 'score': 0.9568014705882353, 'examples_seen': 193136, 'step': 4850, 'algorithm': 'optimal_bst'}
I0715 17:28:49.183319 133499031156224 run.py:723] (val) algo optimal_bst step 4900: {'root': 0.9459883217993079, 'score': 0.9459883217993079, 'examples_seen': 195152, 'step': 4900, 'algorithm': 'optimal_bst'}
I0715 17:28:52.139766 133499031156224 run.py:723] (val) algo optimal_bst step 4950: {'root': 0.9396626297577855, 'score': 0.9396626297577855, 'examples_seen': 197152, 'step': 4950, 'algorithm': 'optimal_bst'}
I0715 17:28:55.106152 133499031156224 run.py:723] (val) algo optimal_bst step 5000: {'root': 0.929606401384083, 'score': 0.929606401384083, 'examples_seen': 199120, 'step': 5000, 'algorithm': 'optimal_bst'}
I0715 17:28:58.102571 133499031156224 run.py:723] (val) algo optimal_bst step 5050: {'root': 0.932742214532872, 'score': 0.932742214532872, 'examples_seen': 201120, 'step': 5050, 'algorithm': 'optimal_bst'}
I0715 17:29:01.140303 133499031156224 run.py:723] (val) algo optimal_bst step 5100: {'root': 0.9451232698961938, 'score': 0.9451232698961938, 'examples_seen': 203072, 'step': 5100, 'algorithm': 'optimal_bst'}
I0715 17:29:04.248791 133499031156224 run.py:723] (val) algo optimal_bst step 5150: {'root': 0.9426903114186851, 'score': 0.9426903114186851, 'examples_seen': 205024, 'step': 5150, 'algorithm': 'optimal_bst'}
I0715 17:29:07.236296 133499031156224 run.py:723] (val) algo optimal_bst step 5200: {'root': 0.9463667820069204, 'score': 0.9463667820069204, 'examples_seen': 207088, 'step': 5200, 'algorithm': 'optimal_bst'}
I0715 17:29:10.211191 133499031156224 run.py:723] (val) algo optimal_bst step 5250: {'root': 0.9456639273356401, 'score': 0.9456639273356401, 'examples_seen': 209072, 'step': 5250, 'algorithm': 'optimal_bst'}
I0715 17:29:13.154581 133499031156224 run.py:723] (val) algo optimal_bst step 5300: {'root': 0.9518814878892734, 'score': 0.9518814878892734, 'examples_seen': 211088, 'step': 5300, 'algorithm': 'optimal_bst'}
I0715 17:29:16.122667 133499031156224 run.py:723] (val) algo optimal_bst step 5350: {'root': 0.9484753460207612, 'score': 0.9484753460207612, 'examples_seen': 213072, 'step': 5350, 'algorithm': 'optimal_bst'}
I0715 17:29:19.133302 133499031156224 run.py:723] (val) algo optimal_bst step 5400: {'root': 0.9292820069204152, 'score': 0.9292820069204152, 'examples_seen': 215024, 'step': 5400, 'algorithm': 'optimal_bst'}
I0715 17:29:22.173661 133499031156224 run.py:723] (val) algo optimal_bst step 5450: {'root': 0.9493403979238755, 'score': 0.9493403979238755, 'examples_seen': 217024, 'step': 5450, 'algorithm': 'optimal_bst'}
I0715 17:29:25.280908 133499031156224 run.py:723] (val) algo optimal_bst step 5500: {'root': 0.9538278546712803, 'score': 0.9538278546712803, 'examples_seen': 218960, 'step': 5500, 'algorithm': 'optimal_bst'}
I0715 17:29:28.278864 133499031156224 run.py:723] (val) algo optimal_bst step 5550: {'root': 0.9510164359861591, 'score': 0.9510164359861591, 'examples_seen': 221008, 'step': 5550, 'algorithm': 'optimal_bst'}
I0715 17:29:31.247281 133499031156224 run.py:723] (val) algo optimal_bst step 5600: {'root': 0.9495025951557093, 'score': 0.9495025951557093, 'examples_seen': 223024, 'step': 5600, 'algorithm': 'optimal_bst'}
I0715 17:29:34.209861 133499031156224 run.py:723] (val) algo optimal_bst step 5650: {'root': 0.9510705017301038, 'score': 0.9510705017301038, 'examples_seen': 225008, 'step': 5650, 'algorithm': 'optimal_bst'}
I0715 17:29:37.179444 133499031156224 run.py:723] (val) algo optimal_bst step 5700: {'root': 0.9387435121107266, 'score': 0.9387435121107266, 'examples_seen': 227008, 'step': 5700, 'algorithm': 'optimal_bst'}
I0715 17:29:40.181418 133499031156224 run.py:723] (val) algo optimal_bst step 5750: {'root': 0.9558282871972318, 'score': 0.9558282871972318, 'examples_seen': 228960, 'step': 5750, 'algorithm': 'optimal_bst'}
I0715 17:29:43.218979 133499031156224 run.py:723] (val) algo optimal_bst step 5800: {'root': 0.9402573529411765, 'score': 0.9402573529411765, 'examples_seen': 230928, 'step': 5800, 'algorithm': 'optimal_bst'}
I0715 17:29:46.328656 133499031156224 run.py:723] (val) algo optimal_bst step 5850: {'root': 0.9528546712802768, 'score': 0.9528546712802768, 'examples_seen': 232912, 'step': 5850, 'algorithm': 'optimal_bst'}
I0715 17:29:49.326008 133499031156224 run.py:723] (val) algo optimal_bst step 5900: {'root': 0.9518814878892734, 'score': 0.9518814878892734, 'examples_seen': 234928, 'step': 5900, 'algorithm': 'optimal_bst'}
I0715 17:29:52.300589 133499031156224 run.py:723] (val) algo optimal_bst step 5950: {'root': 0.949556660899654, 'score': 0.949556660899654, 'examples_seen': 236944, 'step': 5950, 'algorithm': 'optimal_bst'}
I0715 17:29:55.259431 133499031156224 run.py:723] (val) algo optimal_bst step 6000: {'root': 0.9387435121107266, 'score': 0.9387435121107266, 'examples_seen': 238944, 'step': 6000, 'algorithm': 'optimal_bst'}
I0715 17:29:58.227803 133499031156224 run.py:723] (val) algo optimal_bst step 6050: {'root': 0.9517192906574394, 'score': 0.9517192906574394, 'examples_seen': 240928, 'step': 6050, 'algorithm': 'optimal_bst'}
I0715 17:30:01.229125 133499031156224 run.py:723] (val) algo optimal_bst step 6100: {'root': 0.9557742214532872, 'score': 0.9557742214532872, 'examples_seen': 242912, 'step': 6100, 'algorithm': 'optimal_bst'}
I0715 17:30:04.265366 133499031156224 run.py:723] (val) algo optimal_bst step 6150: {'root': 0.9552876297577855, 'score': 0.9552876297577855, 'examples_seen': 244864, 'step': 6150, 'algorithm': 'optimal_bst'}
I0715 17:30:07.379796 133499031156224 run.py:723] (val) algo optimal_bst step 6200: {'root': 0.9557201557093425, 'score': 0.9557201557093425, 'examples_seen': 246816, 'step': 6200, 'algorithm': 'optimal_bst'}
I0715 17:30:10.364293 133499031156224 run.py:723] (val) algo optimal_bst step 6250: {'root': 0.9493944636678201, 'score': 0.9493944636678201, 'examples_seen': 248880, 'step': 6250, 'algorithm': 'optimal_bst'}
I0715 17:30:13.339267 133499031156224 run.py:723] (val) algo optimal_bst step 6300: {'root': 0.9545307093425606, 'score': 0.9545307093425606, 'examples_seen': 250880, 'step': 6300, 'algorithm': 'optimal_bst'}
I0715 17:30:16.304703 133499031156224 run.py:723] (val) algo optimal_bst step 6350: {'root': 0.9277141003460208, 'score': 0.9277141003460208, 'examples_seen': 252880, 'step': 6350, 'algorithm': 'optimal_bst'}
I0715 17:30:19.268843 133499031156224 run.py:723] (val) algo optimal_bst step 6400: {'root': 0.9534493944636678, 'score': 0.9534493944636678, 'examples_seen': 254864, 'step': 6400, 'algorithm': 'optimal_bst'}
I0715 17:30:22.281255 133499031156224 run.py:723] (val) algo optimal_bst step 6450: {'root': 0.9505298442906575, 'score': 0.9505298442906575, 'examples_seen': 256816, 'step': 6450, 'algorithm': 'optimal_bst'}
I0715 17:30:25.319454 133499031156224 run.py:723] (val) algo optimal_bst step 6500: {'root': 0.9516111591695502, 'score': 0.9516111591695502, 'examples_seen': 258816, 'step': 6500, 'algorithm': 'optimal_bst'}
I0715 17:30:28.430397 133499031156224 run.py:723] (val) algo optimal_bst step 6550: {'root': 0.9520436851211073, 'score': 0.9520436851211073, 'examples_seen': 260752, 'step': 6550, 'algorithm': 'optimal_bst'}
I0715 17:30:31.420840 133499031156224 run.py:723] (val) algo optimal_bst step 6600: {'root': 0.9569096020761245, 'score': 0.9569096020761245, 'examples_seen': 262800, 'step': 6600, 'algorithm': 'optimal_bst'}
I0715 17:30:34.401729 133499031156224 run.py:723] (val) algo optimal_bst step 6650: {'root': 0.9535034602076125, 'score': 0.9535034602076125, 'examples_seen': 264832, 'step': 6650, 'algorithm': 'optimal_bst'}
I0715 17:30:37.371654 133499031156224 run.py:723] (val) algo optimal_bst step 6700: {'root': 0.9491241349480969, 'score': 0.9491241349480969, 'examples_seen': 266800, 'step': 6700, 'algorithm': 'optimal_bst'}
I0715 17:30:40.336990 133499031156224 run.py:723] (val) algo optimal_bst step 6750: {'root': 0.9493944636678201, 'score': 0.9493944636678201, 'examples_seen': 268800, 'step': 6750, 'algorithm': 'optimal_bst'}
I0715 17:30:43.333572 133499031156224 run.py:723] (val) algo optimal_bst step 6800: {'root': 0.9497188581314879, 'score': 0.9497188581314879, 'examples_seen': 270752, 'step': 6800, 'algorithm': 'optimal_bst'}
I0715 17:30:46.360733 133499031156224 run.py:723] (val) algo optimal_bst step 6850: {'root': 0.9458261245674741, 'score': 0.9458261245674741, 'examples_seen': 272736, 'step': 6850, 'algorithm': 'optimal_bst'}
I0715 17:30:49.474949 133499031156224 run.py:723] (val) algo optimal_bst step 6900: {'root': 0.9580990484429066, 'score': 0.9580990484429066, 'examples_seen': 274720, 'step': 6900, 'algorithm': 'optimal_bst'}
I0715 17:30:52.503026 133499031156224 run.py:723] (val) algo optimal_bst step 6950: {'root': 0.9532871972318339, 'score': 0.9532871972318339, 'examples_seen': 276736, 'step': 6950, 'algorithm': 'optimal_bst'}
I0715 17:30:55.477141 133499031156224 run.py:723] (val) algo optimal_bst step 7000: {'root': 0.9550713667820069, 'score': 0.9550713667820069, 'examples_seen': 278768, 'step': 7000, 'algorithm': 'optimal_bst'}
I0715 17:30:58.431614 133499031156224 run.py:723] (val) algo optimal_bst step 7050: {'root': 0.9597210207612457, 'score': 0.9597210207612457, 'examples_seen': 280752, 'step': 7050, 'algorithm': 'optimal_bst'}
I0715 17:31:01.420893 133499031156224 run.py:723] (val) algo optimal_bst step 7100: {'root': 0.9327962802768166, 'score': 0.9327962802768166, 'examples_seen': 282736, 'step': 7100, 'algorithm': 'optimal_bst'}
I0715 17:31:04.422227 133499031156224 run.py:723] (val) algo optimal_bst step 7150: {'root': 0.9552335640138409, 'score': 0.9552335640138409, 'examples_seen': 284720, 'step': 7150, 'algorithm': 'optimal_bst'}
I0715 17:31:07.467651 133499031156224 run.py:723] (val) algo optimal_bst step 7200: {'root': 0.9569636678200693, 'score': 0.9569636678200693, 'examples_seen': 286672, 'step': 7200, 'algorithm': 'optimal_bst'}
I0715 17:31:10.582517 133499031156224 run.py:723] (val) algo optimal_bst step 7250: {'root': 0.9542063148788927, 'score': 0.9542063148788927, 'examples_seen': 288640, 'step': 7250, 'algorithm': 'optimal_bst'}
I0715 17:31:13.569585 133499031156224 run.py:723] (val) algo optimal_bst step 7300: {'root': 0.9558823529411765, 'score': 0.9558823529411765, 'examples_seen': 290688, 'step': 7300, 'algorithm': 'optimal_bst'}
I0715 17:31:16.546305 133499031156224 run.py:723] (val) algo optimal_bst step 7350: {'root': 0.9485834775086506, 'score': 0.9485834775086506, 'examples_seen': 292688, 'step': 7350, 'algorithm': 'optimal_bst'}
I0715 17:31:19.565046 133499031156224 run.py:723] (val) algo optimal_bst step 7400: {'root': 0.9351211072664359, 'score': 0.9351211072664359, 'examples_seen': 294688, 'step': 7400, 'algorithm': 'optimal_bst'}
I0715 17:31:22.557888 133499031156224 run.py:723] (val) algo optimal_bst step 7450: {'root': 0.9445285467128027, 'score': 0.9445285467128027, 'examples_seen': 296672, 'step': 7450, 'algorithm': 'optimal_bst'}
I0715 17:31:25.597505 133499031156224 run.py:723] (val) algo optimal_bst step 7500: {'root': 0.9546388408304498, 'score': 0.9546388408304498, 'examples_seen': 298624, 'step': 7500, 'algorithm': 'optimal_bst'}
I0715 17:31:28.652242 133499031156224 run.py:723] (val) algo optimal_bst step 7550: {'root': 0.951503027681661, 'score': 0.951503027681661, 'examples_seen': 300624, 'step': 7550, 'algorithm': 'optimal_bst'}
I0715 17:31:31.773533 133499031156224 run.py:723] (val) algo optimal_bst step 7600: {'root': 0.9581531141868512, 'score': 0.9581531141868512, 'examples_seen': 302576, 'step': 7600, 'algorithm': 'optimal_bst'}
I0715 17:31:34.796122 133499031156224 run.py:723] (val) algo optimal_bst step 7650: {'root': 0.9546929065743944, 'score': 0.9546929065743944, 'examples_seen': 304608, 'step': 7650, 'algorithm': 'optimal_bst'}
I0715 17:31:37.778806 133499031156224 run.py:723] (val) algo optimal_bst step 7700: {'root': 0.9538819204152249, 'score': 0.9538819204152249, 'examples_seen': 306640, 'step': 7700, 'algorithm': 'optimal_bst'}
I0715 17:31:40.762858 133499031156224 run.py:723] (val) algo optimal_bst step 7750: {'root': 0.9603698096885813, 'score': 0.9603698096885813, 'examples_seen': 308608, 'step': 7750, 'algorithm': 'optimal_bst'}
I0715 17:31:43.769911 133499031156224 run.py:723] (val) algo optimal_bst step 7800: {'root': 0.9505839100346021, 'score': 0.9505839100346021, 'examples_seen': 310608, 'step': 7800, 'algorithm': 'optimal_bst'}
I0715 17:31:46.791687 133499031156224 run.py:723] (val) algo optimal_bst step 7850: {'root': 0.9493944636678201, 'score': 0.9493944636678201, 'examples_seen': 312576, 'step': 7850, 'algorithm': 'optimal_bst'}
I0715 17:31:49.848523 133499031156224 run.py:723] (val) algo optimal_bst step 7900: {'root': 0.951340830449827, 'score': 0.951340830449827, 'examples_seen': 314528, 'step': 7900, 'algorithm': 'optimal_bst'}
I0715 17:31:52.980403 133499031156224 run.py:723] (val) algo optimal_bst step 7950: {'root': 0.954314446366782, 'score': 0.954314446366782, 'examples_seen': 316528, 'step': 7950, 'algorithm': 'optimal_bst'}
I0715 17:31:55.998223 133499031156224 run.py:723] (val) algo optimal_bst step 8000: {'root': 0.9631271626297578, 'score': 0.9631271626297578, 'examples_seen': 318528, 'step': 8000, 'algorithm': 'optimal_bst'}
I0715 17:31:59.009803 133499031156224 run.py:723] (val) algo optimal_bst step 8050: {'root': 0.9564230103806228, 'score': 0.9564230103806228, 'examples_seen': 320560, 'step': 8050, 'algorithm': 'optimal_bst'}
I0715 17:32:01.990068 133499031156224 run.py:723] (val) algo optimal_bst step 8100: {'root': 0.9506379757785467, 'score': 0.9506379757785467, 'examples_seen': 322544, 'step': 8100, 'algorithm': 'optimal_bst'}
I0715 17:32:04.979164 133499031156224 run.py:723] (val) algo optimal_bst step 8150: {'root': 0.9562067474048442, 'score': 0.9562067474048442, 'examples_seen': 324528, 'step': 8150, 'algorithm': 'optimal_bst'}
I0715 17:32:08.003939 133499031156224 run.py:723] (val) algo optimal_bst step 8200: {'root': 0.9560445501730104, 'score': 0.9560445501730104, 'examples_seen': 326528, 'step': 8200, 'algorithm': 'optimal_bst'}
I0715 17:32:11.063213 133499031156224 run.py:723] (val) algo optimal_bst step 8250: {'root': 0.9603157439446367, 'score': 0.9603157439446367, 'examples_seen': 328464, 'step': 8250, 'algorithm': 'optimal_bst'}
I0715 17:32:14.202516 133499031156224 run.py:723] (val) algo optimal_bst step 8300: {'root': 0.9577205882352942, 'score': 0.9577205882352942, 'examples_seen': 330432, 'step': 8300, 'algorithm': 'optimal_bst'}
I0715 17:32:17.213245 133499031156224 run.py:723] (val) algo optimal_bst step 8350: {'root': 0.9570177335640139, 'score': 0.9570177335640139, 'examples_seen': 332480, 'step': 8350, 'algorithm': 'optimal_bst'}
I0715 17:32:20.208272 133499031156224 run.py:723] (val) algo optimal_bst step 8400: {'root': 0.9375540657439446, 'score': 0.9375540657439446, 'examples_seen': 334480, 'step': 8400, 'algorithm': 'optimal_bst'}
I0715 17:32:23.197504 133499031156224 run.py:723] (val) algo optimal_bst step 8450: {'root': 0.9520436851211073, 'score': 0.9520436851211073, 'examples_seen': 336480, 'step': 8450, 'algorithm': 'optimal_bst'}
I0715 17:32:26.181188 133499031156224 run.py:723] (val) algo optimal_bst step 8500: {'root': 0.9419333910034602, 'score': 0.9419333910034602, 'examples_seen': 338464, 'step': 8500, 'algorithm': 'optimal_bst'}
I0715 17:32:29.216202 133499031156224 run.py:723] (val) algo optimal_bst step 8550: {'root': 0.9568555363321799, 'score': 0.9568555363321799, 'examples_seen': 340432, 'step': 8550, 'algorithm': 'optimal_bst'}
I0715 17:32:32.272948 133499031156224 run.py:723] (val) algo optimal_bst step 8600: {'root': 0.9579368512110726, 'score': 0.9579368512110726, 'examples_seen': 342416, 'step': 8600, 'algorithm': 'optimal_bst'}
I0715 17:32:35.405537 133499031156224 run.py:723] (val) algo optimal_bst step 8650: {'root': 0.9590181660899654, 'score': 0.9590181660899654, 'examples_seen': 344368, 'step': 8650, 'algorithm': 'optimal_bst'}
I0715 17:32:38.418025 133499031156224 run.py:723] (val) algo optimal_bst step 8700: {'root': 0.9557201557093425, 'score': 0.9557201557093425, 'examples_seen': 346400, 'step': 8700, 'algorithm': 'optimal_bst'}
I0715 17:32:41.401712 133499031156224 run.py:723] (val) algo optimal_bst step 8750: {'root': 0.9473940311418685, 'score': 0.9473940311418685, 'examples_seen': 348432, 'step': 8750, 'algorithm': 'optimal_bst'}
I0715 17:32:44.392193 133499031156224 run.py:723] (val) algo optimal_bst step 8800: {'root': 0.9559364186851211, 'score': 0.9559364186851211, 'examples_seen': 350416, 'step': 8800, 'algorithm': 'optimal_bst'}
I0715 17:32:47.378836 133499031156224 run.py:723] (val) algo optimal_bst step 8850: {'root': 0.9579909169550173, 'score': 0.9579909169550173, 'examples_seen': 352400, 'step': 8850, 'algorithm': 'optimal_bst'}
I0715 17:32:50.401127 133499031156224 run.py:723] (val) algo optimal_bst step 8900: {'root': 0.9589100346020761, 'score': 0.9589100346020761, 'examples_seen': 354368, 'step': 8900, 'algorithm': 'optimal_bst'}
I0715 17:32:53.463139 133499031156224 run.py:723] (val) algo optimal_bst step 8950: {'root': 0.9546388408304498, 'score': 0.9546388408304498, 'examples_seen': 356320, 'step': 8950, 'algorithm': 'optimal_bst'}
I0715 17:32:56.595534 133499031156224 run.py:723] (val) algo optimal_bst step 9000: {'root': 0.9599372837370242, 'score': 0.9599372837370242, 'examples_seen': 358320, 'step': 9000, 'algorithm': 'optimal_bst'}
I0715 17:32:59.615536 133499031156224 run.py:723] (val) algo optimal_bst step 9050: {'root': 0.9548551038062284, 'score': 0.9548551038062284, 'examples_seen': 360320, 'step': 9050, 'algorithm': 'optimal_bst'}
I0715 17:33:02.607351 133499031156224 run.py:723] (val) algo optimal_bst step 9100: {'root': 0.9506920415224913, 'score': 0.9506920415224913, 'examples_seen': 362352, 'step': 9100, 'algorithm': 'optimal_bst'}
I0715 17:33:05.587673 133499031156224 run.py:723] (val) algo optimal_bst step 9150: {'root': 0.9580990484429066, 'score': 0.9580990484429066, 'examples_seen': 364352, 'step': 9150, 'algorithm': 'optimal_bst'}
I0715 17:33:08.576766 133499031156224 run.py:723] (val) algo optimal_bst step 9200: {'root': 0.9550173010380623, 'score': 0.9550173010380623, 'examples_seen': 366320, 'step': 9200, 'algorithm': 'optimal_bst'}
I0715 17:33:11.599047 133499031156224 run.py:723] (val) algo optimal_bst step 9250: {'root': 0.9561526816608996, 'score': 0.9561526816608996, 'examples_seen': 368320, 'step': 9250, 'algorithm': 'optimal_bst'}
I0715 17:33:14.650526 133499031156224 run.py:723] (val) algo optimal_bst step 9300: {'root': 0.9592884948096886, 'score': 0.9592884948096886, 'examples_seen': 370272, 'step': 9300, 'algorithm': 'optimal_bst'}
I0715 17:33:17.783048 133499031156224 run.py:723] (val) algo optimal_bst step 9350: {'root': 0.9470696366782007, 'score': 0.9470696366782007, 'examples_seen': 372240, 'step': 9350, 'algorithm': 'optimal_bst'}
I0715 17:33:20.792566 133499031156224 run.py:723] (val) algo optimal_bst step 9400: {'root': 0.9602616782006921, 'score': 0.9602616782006921, 'examples_seen': 374288, 'step': 9400, 'algorithm': 'optimal_bst'}
I0715 17:33:23.788091 133499031156224 run.py:723] (val) algo optimal_bst step 9450: {'root': 0.9405817474048442, 'score': 0.9405817474048442, 'examples_seen': 376288, 'step': 9450, 'algorithm': 'optimal_bst'}
I0715 17:33:26.772724 133499031156224 run.py:723] (val) algo optimal_bst step 9500: {'root': 0.9546929065743944, 'score': 0.9546929065743944, 'examples_seen': 378304, 'step': 9500, 'algorithm': 'optimal_bst'}
I0715 17:33:29.757301 133499031156224 run.py:723] (val) algo optimal_bst step 9550: {'root': 0.9524221453287197, 'score': 0.9524221453287197, 'examples_seen': 380272, 'step': 9550, 'algorithm': 'optimal_bst'}
I0715 17:33:32.807431 133499031156224 run.py:723] (val) algo optimal_bst step 9600: {'root': 0.9587478373702422, 'score': 0.9587478373702422, 'examples_seen': 382240, 'step': 9600, 'algorithm': 'optimal_bst'}
I0715 17:33:35.876902 133499031156224 run.py:723] (val) algo optimal_bst step 9650: {'root': 0.960856401384083, 'score': 0.960856401384083, 'examples_seen': 384224, 'step': 9650, 'algorithm': 'optimal_bst'}
I0715 17:33:39.009560 133499031156224 run.py:723] (val) algo optimal_bst step 9700: {'root': 0.9557742214532872, 'score': 0.9557742214532872, 'examples_seen': 386176, 'step': 9700, 'algorithm': 'optimal_bst'}
I0715 17:33:42.026743 133499031156224 run.py:723] (val) algo optimal_bst step 9750: {'root': 0.9559904844290658, 'score': 0.9559904844290658, 'examples_seen': 388224, 'step': 9750, 'algorithm': 'optimal_bst'}
I0715 17:33:45.011616 133499031156224 run.py:723] (val) algo optimal_bst step 9800: {'root': 0.9538278546712803, 'score': 0.9538278546712803, 'examples_seen': 390240, 'step': 9800, 'algorithm': 'optimal_bst'}
I0715 17:33:47.993790 133499031156224 run.py:723] (val) algo optimal_bst step 9850: {'root': 0.9422037197231834, 'score': 0.9422037197231834, 'examples_seen': 392224, 'step': 9850, 'algorithm': 'optimal_bst'}
I0715 17:33:50.977696 133499031156224 run.py:723] (val) algo optimal_bst step 9900: {'root': 0.9436634948096886, 'score': 0.9436634948096886, 'examples_seen': 394208, 'step': 9900, 'algorithm': 'optimal_bst'}
I0715 17:33:53.999035 133499031156224 run.py:723] (val) algo optimal_bst step 9950: {'root': 0.9510164359861591, 'score': 0.9510164359861591, 'examples_seen': 396176, 'step': 9950, 'algorithm': 'optimal_bst'}