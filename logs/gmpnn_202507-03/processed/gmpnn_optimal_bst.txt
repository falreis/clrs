I0716 10:48:11.247673 137961844098560 run.py:722] (val) algo optimal_bst step 0: {'root': 0.5055147058823529, 'score': 0.5055147058823529, 'examples_seen': 64, 'step': 0, 'algorithm': 'optimal_bst'}
I0716 10:49:51.498093 137961844098560 run.py:722] (val) algo optimal_bst step 50: {'root': 0.6066176470588235, 'score': 0.6066176470588235, 'examples_seen': 2080, 'step': 50, 'algorithm': 'optimal_bst'}
I0716 10:49:54.469129 137961844098560 run.py:722] (val) algo optimal_bst step 100: {'root': 0.6773356401384083, 'score': 0.6773356401384083, 'examples_seen': 4064, 'step': 100, 'algorithm': 'optimal_bst'}
I0716 10:49:57.484036 137961844098560 run.py:722] (val) algo optimal_bst step 150: {'root': 0.7880082179930796, 'score': 0.7880082179930796, 'examples_seen': 6016, 'step': 150, 'algorithm': 'optimal_bst'}
I0716 10:50:00.524936 137961844098560 run.py:722] (val) algo optimal_bst step 200: {'root': 0.7787089100346021, 'score': 0.7787089100346021, 'examples_seen': 8016, 'step': 200, 'algorithm': 'optimal_bst'}
I0716 10:50:03.621313 137961844098560 run.py:722] (val) algo optimal_bst step 250: {'root': 0.7827638408304498, 'score': 0.7827638408304498, 'examples_seen': 9952, 'step': 250, 'algorithm': 'optimal_bst'}
I0716 10:50:06.593855 137961844098560 run.py:722] (val) algo optimal_bst step 300: {'root': 0.7648140138408305, 'score': 0.7648140138408305, 'examples_seen': 12000, 'step': 300, 'algorithm': 'optimal_bst'}
I0716 10:50:09.533462 137961844098560 run.py:722] (val) algo optimal_bst step 350: {'root': 0.8754865916955017, 'score': 0.8754865916955017, 'examples_seen': 14032, 'step': 350, 'algorithm': 'optimal_bst'}
I0716 10:50:12.498664 137961844098560 run.py:722] (val) algo optimal_bst step 400: {'root': 0.8841911764705882, 'score': 0.8841911764705882, 'examples_seen': 16000, 'step': 400, 'algorithm': 'optimal_bst'}
I0716 10:50:15.460242 137961844098560 run.py:722] (val) algo optimal_bst step 450: {'root': 0.8872188581314879, 'score': 0.8872188581314879, 'examples_seen': 18000, 'step': 450, 'algorithm': 'optimal_bst'}
I0716 10:50:18.464389 137961844098560 run.py:722] (val) algo optimal_bst step 500: {'root': 0.9039251730103807, 'score': 0.9039251730103807, 'examples_seen': 19952, 'step': 500, 'algorithm': 'optimal_bst'}
I0716 10:50:21.498511 137961844098560 run.py:722] (val) algo optimal_bst step 550: {'root': 0.8878135813148789, 'score': 0.8878135813148789, 'examples_seen': 21920, 'step': 550, 'algorithm': 'optimal_bst'}
I0716 10:50:24.593986 137961844098560 run.py:722] (val) algo optimal_bst step 600: {'root': 0.9052768166089965, 'score': 0.9052768166089965, 'examples_seen': 23904, 'step': 600, 'algorithm': 'optimal_bst'}
I0716 10:50:27.592694 137961844098560 run.py:722] (val) algo optimal_bst step 650: {'root': 0.8726751730103807, 'score': 0.8726751730103807, 'examples_seen': 25920, 'step': 650, 'algorithm': 'optimal_bst'}
I0716 10:50:30.548414 137961844098560 run.py:722] (val) algo optimal_bst step 700: {'root': 0.8713235294117647, 'score': 0.8713235294117647, 'examples_seen': 27952, 'step': 700, 'algorithm': 'optimal_bst'}
I0716 10:50:33.488290 137961844098560 run.py:722] (val) algo optimal_bst step 750: {'root': 0.9021410034602076, 'score': 0.9021410034602076, 'examples_seen': 29936, 'step': 750, 'algorithm': 'optimal_bst'}
I0716 10:50:36.442063 137961844098560 run.py:722] (val) algo optimal_bst step 800: {'root': 0.929768598615917, 'score': 0.929768598615917, 'examples_seen': 31920, 'step': 800, 'algorithm': 'optimal_bst'}
I0716 10:50:39.432017 137961844098560 run.py:722] (val) algo optimal_bst step 850: {'root': 0.8921929065743944, 'score': 0.8921929065743944, 'examples_seen': 33904, 'step': 850, 'algorithm': 'optimal_bst'}
I0716 10:50:42.451015 137961844098560 run.py:722] (val) algo optimal_bst step 900: {'root': 0.920685553633218, 'score': 0.920685553633218, 'examples_seen': 35856, 'step': 900, 'algorithm': 'optimal_bst'}
I0716 10:50:45.547764 137961844098560 run.py:722] (val) algo optimal_bst step 950: {'root': 0.9297145328719724, 'score': 0.9297145328719724, 'examples_seen': 37808, 'step': 950, 'algorithm': 'optimal_bst'}
I0716 10:50:48.518475 137961844098560 run.py:722] (val) algo optimal_bst step 1000: {'root': 0.8847318339100346, 'score': 0.8847318339100346, 'examples_seen': 39872, 'step': 1000, 'algorithm': 'optimal_bst'}
I0716 10:50:51.474333 137961844098560 run.py:722] (val) algo optimal_bst step 1050: {'root': 0.9154411764705882, 'score': 0.9154411764705882, 'examples_seen': 41872, 'step': 1050, 'algorithm': 'optimal_bst'}
I0716 10:50:54.422151 137961844098560 run.py:722] (val) algo optimal_bst step 1100: {'root': 0.889273356401384, 'score': 0.889273356401384, 'examples_seen': 43872, 'step': 1100, 'algorithm': 'optimal_bst'}
I0716 10:50:57.368256 137961844098560 run.py:722] (val) algo optimal_bst step 1150: {'root': 0.8650519031141869, 'score': 0.8650519031141869, 'examples_seen': 45856, 'step': 1150, 'algorithm': 'optimal_bst'}
I0716 10:51:00.363650 137961844098560 run.py:722] (val) algo optimal_bst step 1200: {'root': 0.9255514705882353, 'score': 0.9255514705882353, 'examples_seen': 47808, 'step': 1200, 'algorithm': 'optimal_bst'}
I0716 10:51:03.387737 137961844098560 run.py:722] (val) algo optimal_bst step 1250: {'root': 0.9157115051903114, 'score': 0.9157115051903114, 'examples_seen': 49808, 'step': 1250, 'algorithm': 'optimal_bst'}
I0716 10:51:06.488640 137961844098560 run.py:722] (val) algo optimal_bst step 1300: {'root': 0.9297145328719724, 'score': 0.9297145328719724, 'examples_seen': 51760, 'step': 1300, 'algorithm': 'optimal_bst'}
I0716 10:51:09.472373 137961844098560 run.py:722] (val) algo optimal_bst step 1350: {'root': 0.9322556228373703, 'score': 0.9322556228373703, 'examples_seen': 53792, 'step': 1350, 'algorithm': 'optimal_bst'}
I0716 10:51:12.444948 137961844098560 run.py:722] (val) algo optimal_bst step 1400: {'root': 0.9045739619377162, 'score': 0.9045739619377162, 'examples_seen': 55824, 'step': 1400, 'algorithm': 'optimal_bst'}
I0716 10:51:15.397186 137961844098560 run.py:722] (val) algo optimal_bst step 1450: {'root': 0.933336937716263, 'score': 0.933336937716263, 'examples_seen': 57792, 'step': 1450, 'algorithm': 'optimal_bst'}
I0716 10:51:18.372783 137961844098560 run.py:722] (val) algo optimal_bst step 1500: {'root': 0.9023572664359861, 'score': 0.9023572664359861, 'examples_seen': 59792, 'step': 1500, 'algorithm': 'optimal_bst'}
I0716 10:51:21.363677 137961844098560 run.py:722] (val) algo optimal_bst step 1550: {'root': 0.9313365051903114, 'score': 0.9313365051903114, 'examples_seen': 61744, 'step': 1550, 'algorithm': 'optimal_bst'}
I0716 10:51:24.388302 137961844098560 run.py:722] (val) algo optimal_bst step 1600: {'root': 0.9374459342560554, 'score': 0.9374459342560554, 'examples_seen': 63712, 'step': 1600, 'algorithm': 'optimal_bst'}
I0716 10:51:27.508577 137961844098560 run.py:722] (val) algo optimal_bst step 1650: {'root': 0.9416089965397924, 'score': 0.9416089965397924, 'examples_seen': 65712, 'step': 1650, 'algorithm': 'optimal_bst'}
I0716 10:51:30.518131 137961844098560 run.py:722] (val) algo optimal_bst step 1700: {'root': 0.9359320934256056, 'score': 0.9359320934256056, 'examples_seen': 67712, 'step': 1700, 'algorithm': 'optimal_bst'}
I0716 10:51:33.478712 137961844098560 run.py:722] (val) algo optimal_bst step 1750: {'root': 0.9160358996539792, 'score': 0.9160358996539792, 'examples_seen': 69744, 'step': 1750, 'algorithm': 'optimal_bst'}
I0716 10:51:36.422255 137961844098560 run.py:722] (val) algo optimal_bst step 1800: {'root': 0.9154411764705882, 'score': 0.9154411764705882, 'examples_seen': 71728, 'step': 1800, 'algorithm': 'optimal_bst'}
I0716 10:51:39.373912 137961844098560 run.py:722] (val) algo optimal_bst step 1850: {'root': 0.9083585640138409, 'score': 0.9083585640138409, 'examples_seen': 73712, 'step': 1850, 'algorithm': 'optimal_bst'}
I0716 10:51:42.367545 137961844098560 run.py:722] (val) algo optimal_bst step 1900: {'root': 0.9124134948096886, 'score': 0.9124134948096886, 'examples_seen': 75712, 'step': 1900, 'algorithm': 'optimal_bst'}
I0716 10:51:45.396753 137961844098560 run.py:722] (val) algo optimal_bst step 1950: {'root': 0.9425821799307958, 'score': 0.9425821799307958, 'examples_seen': 77664, 'step': 1950, 'algorithm': 'optimal_bst'}
I0716 10:51:48.519206 137961844098560 run.py:722] (val) algo optimal_bst step 2000: {'root': 0.94344723183391, 'score': 0.94344723183391, 'examples_seen': 79632, 'step': 2000, 'algorithm': 'optimal_bst'}
I0716 10:51:51.515723 137961844098560 run.py:722] (val) algo optimal_bst step 2050: {'root': 0.9449070069204152, 'score': 0.9449070069204152, 'examples_seen': 81680, 'step': 2050, 'algorithm': 'optimal_bst'}
I0716 10:51:54.498617 137961844098560 run.py:722] (val) algo optimal_bst step 2100: {'root': 0.9114943771626297, 'score': 0.9114943771626297, 'examples_seen': 83680, 'step': 2100, 'algorithm': 'optimal_bst'}
I0716 10:51:57.454080 137961844098560 run.py:722] (val) algo optimal_bst step 2150: {'root': 0.923226643598616, 'score': 0.923226643598616, 'examples_seen': 85680, 'step': 2150, 'algorithm': 'optimal_bst'}
I0716 10:52:00.404858 137961844098560 run.py:722] (val) algo optimal_bst step 2200: {'root': 0.9011678200692042, 'score': 0.9011678200692042, 'examples_seen': 87664, 'step': 2200, 'algorithm': 'optimal_bst'}
I0716 10:52:03.404767 137961844098560 run.py:722] (val) algo optimal_bst step 2250: {'root': 0.9354455017301038, 'score': 0.9354455017301038, 'examples_seen': 89632, 'step': 2250, 'algorithm': 'optimal_bst'}
I0716 10:52:06.433541 137961844098560 run.py:722] (val) algo optimal_bst step 2300: {'root': 0.9449610726643599, 'score': 0.9449610726643599, 'examples_seen': 91616, 'step': 2300, 'algorithm': 'optimal_bst'}
I0716 10:52:09.536064 137961844098560 run.py:722] (val) algo optimal_bst step 2350: {'root': 0.9437175605536332, 'score': 0.9437175605536332, 'examples_seen': 93568, 'step': 2350, 'algorithm': 'optimal_bst'}
I0716 10:52:12.505149 137961844098560 run.py:722] (val) algo optimal_bst step 2400: {'root': 0.9214965397923875, 'score': 0.9214965397923875, 'examples_seen': 95600, 'step': 2400, 'algorithm': 'optimal_bst'}
I0716 10:52:15.449213 137961844098560 run.py:722] (val) algo optimal_bst step 2450: {'root': 0.9352833044982699, 'score': 0.9352833044982699, 'examples_seen': 97632, 'step': 2450, 'algorithm': 'optimal_bst'}
I0716 10:52:18.392427 137961844098560 run.py:722] (val) algo optimal_bst step 2500: {'root': 0.91219723183391, 'score': 0.91219723183391, 'examples_seen': 99600, 'step': 2500, 'algorithm': 'optimal_bst'}
I0716 10:52:21.327895 137961844098560 run.py:722] (val) algo optimal_bst step 2550: {'root': 0.8963559688581315, 'score': 0.8963559688581315, 'examples_seen': 101600, 'step': 2550, 'algorithm': 'optimal_bst'}
I0716 10:52:24.301338 137961844098560 run.py:722] (val) algo optimal_bst step 2600: {'root': 0.9465289792387543, 'score': 0.9465289792387543, 'examples_seen': 103568, 'step': 2600, 'algorithm': 'optimal_bst'}
I0716 10:52:27.345449 137961844098560 run.py:722] (val) algo optimal_bst step 2650: {'root': 0.9430687716262975, 'score': 0.9430687716262975, 'examples_seen': 105520, 'step': 2650, 'algorithm': 'optimal_bst'}
I0716 10:52:30.449662 137961844098560 run.py:722] (val) algo optimal_bst step 2700: {'root': 0.9422037197231834, 'score': 0.9422037197231834, 'examples_seen': 107520, 'step': 2700, 'algorithm': 'optimal_bst'}
I0716 10:52:33.435661 137961844098560 run.py:722] (val) algo optimal_bst step 2750: {'root': 0.9191717128027682, 'score': 0.9191717128027682, 'examples_seen': 109520, 'step': 2750, 'algorithm': 'optimal_bst'}
I0716 10:52:36.395071 137961844098560 run.py:722] (val) algo optimal_bst step 2800: {'root': 0.9421496539792388, 'score': 0.9421496539792388, 'examples_seen': 111552, 'step': 2800, 'algorithm': 'optimal_bst'}
I0716 10:52:39.340734 137961844098560 run.py:722] (val) algo optimal_bst step 2850: {'root': 0.9403114186851211, 'score': 0.9403114186851211, 'examples_seen': 113552, 'step': 2850, 'algorithm': 'optimal_bst'}
I0716 10:52:42.296889 137961844098560 run.py:722] (val) algo optimal_bst step 2900: {'root': 0.939121972318339, 'score': 0.939121972318339, 'examples_seen': 115520, 'step': 2900, 'algorithm': 'optimal_bst'}
I0716 10:52:45.268971 137961844098560 run.py:722] (val) algo optimal_bst step 2950: {'root': 0.9405817474048442, 'score': 0.9405817474048442, 'examples_seen': 117520, 'step': 2950, 'algorithm': 'optimal_bst'}
I0716 10:52:48.292298 137961844098560 run.py:722] (val) algo optimal_bst step 3000: {'root': 0.9435012975778547, 'score': 0.9435012975778547, 'examples_seen': 119456, 'step': 3000, 'algorithm': 'optimal_bst'}
I0716 10:52:51.395085 137961844098560 run.py:722] (val) algo optimal_bst step 3050: {'root': 0.9439338235294118, 'score': 0.9439338235294118, 'examples_seen': 121424, 'step': 3050, 'algorithm': 'optimal_bst'}
I0716 10:52:54.371173 137961844098560 run.py:722] (val) algo optimal_bst step 3100: {'root': 0.9351211072664359, 'score': 0.9351211072664359, 'examples_seen': 123472, 'step': 3100, 'algorithm': 'optimal_bst'}
I0716 10:52:57.331882 137961844098560 run.py:722] (val) algo optimal_bst step 3150: {'root': 0.9427984429065744, 'score': 0.9427984429065744, 'examples_seen': 125472, 'step': 3150, 'algorithm': 'optimal_bst'}
I0716 10:53:00.271365 137961844098560 run.py:722] (val) algo optimal_bst step 3200: {'root': 0.9198205017301038, 'score': 0.9198205017301038, 'examples_seen': 127488, 'step': 3200, 'algorithm': 'optimal_bst'}
I0716 10:53:03.209400 137961844098560 run.py:722] (val) algo optimal_bst step 3250: {'root': 0.9493944636678201, 'score': 0.9493944636678201, 'examples_seen': 129456, 'step': 3250, 'algorithm': 'optimal_bst'}
I0716 10:53:06.238785 137961844098560 run.py:722] (val) algo optimal_bst step 3300: {'root': 0.9180363321799307, 'score': 0.9180363321799307, 'examples_seen': 131424, 'step': 3300, 'algorithm': 'optimal_bst'}
I0716 10:53:09.263478 137961844098560 run.py:722] (val) algo optimal_bst step 3350: {'root': 0.9453395328719724, 'score': 0.9453395328719724, 'examples_seen': 133408, 'step': 3350, 'algorithm': 'optimal_bst'}
I0716 10:53:12.365649 137961844098560 run.py:722] (val) algo optimal_bst step 3400: {'root': 0.9419333910034602, 'score': 0.9419333910034602, 'examples_seen': 135360, 'step': 3400, 'algorithm': 'optimal_bst'}
I0716 10:53:15.351552 137961844098560 run.py:722] (val) algo optimal_bst step 3450: {'root': 0.9445285467128027, 'score': 0.9445285467128027, 'examples_seen': 137392, 'step': 3450, 'algorithm': 'optimal_bst'}
I0716 10:53:18.307819 137961844098560 run.py:722] (val) algo optimal_bst step 3500: {'root': 0.9297145328719724, 'score': 0.9297145328719724, 'examples_seen': 139424, 'step': 3500, 'algorithm': 'optimal_bst'}
I0716 10:53:21.262141 137961844098560 run.py:722] (val) algo optimal_bst step 3550: {'root': 0.9156574394463668, 'score': 0.9156574394463668, 'examples_seen': 141408, 'step': 3550, 'algorithm': 'optimal_bst'}
I0716 10:53:24.213360 137961844098560 run.py:722] (val) algo optimal_bst step 3600: {'root': 0.9486375432525952, 'score': 0.9486375432525952, 'examples_seen': 143392, 'step': 3600, 'algorithm': 'optimal_bst'}
I0716 10:53:27.205456 137961844098560 run.py:722] (val) algo optimal_bst step 3650: {'root': 0.9423118512110726, 'score': 0.9423118512110726, 'examples_seen': 145360, 'step': 3650, 'algorithm': 'optimal_bst'}
I0716 10:53:30.230617 137961844098560 run.py:722] (val) algo optimal_bst step 3700: {'root': 0.9522058823529411, 'score': 0.9522058823529411, 'examples_seen': 147312, 'step': 3700, 'algorithm': 'optimal_bst'}
I0716 10:53:33.352472 137961844098560 run.py:722] (val) algo optimal_bst step 3750: {'root': 0.951773356401384, 'score': 0.951773356401384, 'examples_seen': 149312, 'step': 3750, 'algorithm': 'optimal_bst'}
I0716 10:53:36.340870 137961844098560 run.py:722] (val) algo optimal_bst step 3800: {'root': 0.926038062283737, 'score': 0.926038062283737, 'examples_seen': 151328, 'step': 3800, 'algorithm': 'optimal_bst'}
I0716 10:53:39.299538 137961844098560 run.py:722] (val) algo optimal_bst step 3850: {'root': 0.9232807093425606, 'score': 0.9232807093425606, 'examples_seen': 153344, 'step': 3850, 'algorithm': 'optimal_bst'}
I0716 10:53:42.245206 137961844098560 run.py:722] (val) algo optimal_bst step 3900: {'root': 0.9458801903114187, 'score': 0.9458801903114187, 'examples_seen': 155344, 'step': 3900, 'algorithm': 'optimal_bst'}
I0716 10:53:45.200283 137961844098560 run.py:722] (val) algo optimal_bst step 3950: {'root': 0.9479346885813149, 'score': 0.9479346885813149, 'examples_seen': 157312, 'step': 3950, 'algorithm': 'optimal_bst'}
I0716 10:53:48.194691 137961844098560 run.py:722] (val) algo optimal_bst step 4000: {'root': 0.9478806228373703, 'score': 0.9478806228373703, 'examples_seen': 159312, 'step': 4000, 'algorithm': 'optimal_bst'}
I0716 10:53:51.223092 137961844098560 run.py:722] (val) algo optimal_bst step 4050: {'root': 0.9504757785467128, 'score': 0.9504757785467128, 'examples_seen': 161248, 'step': 4050, 'algorithm': 'optimal_bst'}
I0716 10:53:54.325411 137961844098560 run.py:722] (val) algo optimal_bst step 4100: {'root': 0.9462045847750865, 'score': 0.9462045847750865, 'examples_seen': 163216, 'step': 4100, 'algorithm': 'optimal_bst'}
I0716 10:53:57.299246 137961844098560 run.py:722] (val) algo optimal_bst step 4150: {'root': 0.9535034602076125, 'score': 0.9535034602076125, 'examples_seen': 165280, 'step': 4150, 'algorithm': 'optimal_bst'}
I0716 10:54:00.282374 137961844098560 run.py:722] (val) algo optimal_bst step 4200: {'root': 0.9312824394463668, 'score': 0.9312824394463668, 'examples_seen': 167264, 'step': 4200, 'algorithm': 'optimal_bst'}
I0716 10:54:03.243759 137961844098560 run.py:722] (val) algo optimal_bst step 4250: {'root': 0.9429606401384083, 'score': 0.9429606401384083, 'examples_seen': 169280, 'step': 4250, 'algorithm': 'optimal_bst'}
I0716 10:54:06.193470 137961844098560 run.py:722] (val) algo optimal_bst step 4300: {'root': 0.9464749134948097, 'score': 0.9464749134948097, 'examples_seen': 171248, 'step': 4300, 'algorithm': 'optimal_bst'}
I0716 10:54:09.194964 137961844098560 run.py:722] (val) algo optimal_bst step 4350: {'root': 0.9107374567474048, 'score': 0.9107374567474048, 'examples_seen': 173216, 'step': 4350, 'algorithm': 'optimal_bst'}
I0716 10:54:12.221328 137961844098560 run.py:722] (val) algo optimal_bst step 4400: {'root': 0.9505298442906575, 'score': 0.9505298442906575, 'examples_seen': 175232, 'step': 4400, 'algorithm': 'optimal_bst'}
I0716 10:54:15.317657 137961844098560 run.py:722] (val) algo optimal_bst step 4450: {'root': 0.9487456747404844, 'score': 0.9487456747404844, 'examples_seen': 177168, 'step': 4450, 'algorithm': 'optimal_bst'}
I0716 10:54:18.300843 137961844098560 run.py:722] (val) algo optimal_bst step 4500: {'root': 0.9511245674740484, 'score': 0.9511245674740484, 'examples_seen': 179216, 'step': 4500, 'algorithm': 'optimal_bst'}
I0716 10:54:21.253973 137961844098560 run.py:722] (val) algo optimal_bst step 4550: {'root': 0.9412305363321799, 'score': 0.9412305363321799, 'examples_seen': 181232, 'step': 4550, 'algorithm': 'optimal_bst'}
I0716 10:54:24.207992 137961844098560 run.py:722] (val) algo optimal_bst step 4600: {'root': 0.9365808823529411, 'score': 0.9365808823529411, 'examples_seen': 183216, 'step': 4600, 'algorithm': 'optimal_bst'}
I0716 10:54:27.159950 137961844098560 run.py:722] (val) algo optimal_bst step 4650: {'root': 0.9432850346020761, 'score': 0.9432850346020761, 'examples_seen': 185200, 'step': 4650, 'algorithm': 'optimal_bst'}
I0716 10:54:30.150695 137961844098560 run.py:722] (val) algo optimal_bst step 4700: {'root': 0.917711937716263, 'score': 0.917711937716263, 'examples_seen': 187168, 'step': 4700, 'algorithm': 'optimal_bst'}
I0716 10:54:33.186657 137961844098560 run.py:722] (val) algo optimal_bst step 4750: {'root': 0.9511786332179931, 'score': 0.9511786332179931, 'examples_seen': 189136, 'step': 4750, 'algorithm': 'optimal_bst'}
I0716 10:54:36.249084 137961844098560 run.py:722] (val) algo optimal_bst step 4800: {'root': 0.9504217128027682, 'score': 0.9504217128027682, 'examples_seen': 191120, 'step': 4800, 'algorithm': 'optimal_bst'}
I0716 10:54:39.234663 137961844098560 run.py:722] (val) algo optimal_bst step 4850: {'root': 0.9564230103806228, 'score': 0.9564230103806228, 'examples_seen': 193136, 'step': 4850, 'algorithm': 'optimal_bst'}
I0716 10:54:42.220072 137961844098560 run.py:722] (val) algo optimal_bst step 4900: {'root': 0.9548551038062284, 'score': 0.9548551038062284, 'examples_seen': 195152, 'step': 4900, 'algorithm': 'optimal_bst'}
I0716 10:54:45.166079 137961844098560 run.py:722] (val) algo optimal_bst step 4950: {'root': 0.950151384083045, 'score': 0.950151384083045, 'examples_seen': 197152, 'step': 4950, 'algorithm': 'optimal_bst'}
I0716 10:54:48.121787 137961844098560 run.py:722] (val) algo optimal_bst step 5000: {'root': 0.9409602076124568, 'score': 0.9409602076124568, 'examples_seen': 199120, 'step': 5000, 'algorithm': 'optimal_bst'}
I0716 10:54:51.112006 137961844098560 run.py:722] (val) algo optimal_bst step 5050: {'root': 0.9498810553633218, 'score': 0.9498810553633218, 'examples_seen': 201120, 'step': 5050, 'algorithm': 'optimal_bst'}
I0716 10:54:54.137751 137961844098560 run.py:722] (val) algo optimal_bst step 5100: {'root': 0.942419982698962, 'score': 0.942419982698962, 'examples_seen': 203072, 'step': 5100, 'algorithm': 'optimal_bst'}
I0716 10:54:57.237317 137961844098560 run.py:722] (val) algo optimal_bst step 5150: {'root': 0.9508542387543253, 'score': 0.9508542387543253, 'examples_seen': 205024, 'step': 5150, 'algorithm': 'optimal_bst'}
I0716 10:55:00.211199 137961844098560 run.py:722] (val) algo optimal_bst step 5200: {'root': 0.9449070069204152, 'score': 0.9449070069204152, 'examples_seen': 207088, 'step': 5200, 'algorithm': 'optimal_bst'}
I0716 10:55:03.176302 137961844098560 run.py:722] (val) algo optimal_bst step 5250: {'root': 0.9473399653979239, 'score': 0.9473399653979239, 'examples_seen': 209072, 'step': 5250, 'algorithm': 'optimal_bst'}
I0716 10:55:06.127198 137961844098560 run.py:722] (val) algo optimal_bst step 5300: {'root': 0.948961937716263, 'score': 0.948961937716263, 'examples_seen': 211088, 'step': 5300, 'algorithm': 'optimal_bst'}
I0716 10:55:09.078468 137961844098560 run.py:722] (val) algo optimal_bst step 5350: {'root': 0.9535575259515571, 'score': 0.9535575259515571, 'examples_seen': 213072, 'step': 5350, 'algorithm': 'optimal_bst'}
I0716 10:55:12.083166 137961844098560 run.py:722] (val) algo optimal_bst step 5400: {'root': 0.9365268166089965, 'score': 0.9365268166089965, 'examples_seen': 215024, 'step': 5400, 'algorithm': 'optimal_bst'}
I0716 10:55:15.110300 137961844098560 run.py:722] (val) algo optimal_bst step 5450: {'root': 0.9524221453287197, 'score': 0.9524221453287197, 'examples_seen': 217024, 'step': 5450, 'algorithm': 'optimal_bst'}
I0716 10:55:18.210331 137961844098560 run.py:722] (val) algo optimal_bst step 5500: {'root': 0.9537737889273357, 'score': 0.9537737889273357, 'examples_seen': 218960, 'step': 5500, 'algorithm': 'optimal_bst'}
I0716 10:55:21.191829 137961844098560 run.py:722] (val) algo optimal_bst step 5550: {'root': 0.9485834775086506, 'score': 0.9485834775086506, 'examples_seen': 221008, 'step': 5550, 'algorithm': 'optimal_bst'}
I0716 10:55:24.146423 137961844098560 run.py:722] (val) algo optimal_bst step 5600: {'root': 0.9570177335640139, 'score': 0.9570177335640139, 'examples_seen': 223024, 'step': 5600, 'algorithm': 'optimal_bst'}
I0716 10:55:27.122201 137961844098560 run.py:722] (val) algo optimal_bst step 5650: {'root': 0.9428525086505191, 'score': 0.9428525086505191, 'examples_seen': 225008, 'step': 5650, 'algorithm': 'optimal_bst'}
I0716 10:55:30.071488 137961844098560 run.py:722] (val) algo optimal_bst step 5700: {'root': 0.9485834775086506, 'score': 0.9485834775086506, 'examples_seen': 227008, 'step': 5700, 'algorithm': 'optimal_bst'}
I0716 10:55:33.059282 137961844098560 run.py:722] (val) algo optimal_bst step 5750: {'root': 0.9560445501730104, 'score': 0.9560445501730104, 'examples_seen': 228960, 'step': 5750, 'algorithm': 'optimal_bst'}
I0716 10:55:36.083172 137961844098560 run.py:722] (val) algo optimal_bst step 5800: {'root': 0.9521518166089965, 'score': 0.9521518166089965, 'examples_seen': 230928, 'step': 5800, 'algorithm': 'optimal_bst'}
I0716 10:55:39.180791 137961844098560 run.py:722] (val) algo optimal_bst step 5850: {'root': 0.9529087370242214, 'score': 0.9529087370242214, 'examples_seen': 232912, 'step': 5850, 'algorithm': 'optimal_bst'}
I0716 10:55:42.169104 137961844098560 run.py:722] (val) algo optimal_bst step 5900: {'root': 0.9511245674740484, 'score': 0.9511245674740484, 'examples_seen': 234928, 'step': 5900, 'algorithm': 'optimal_bst'}
I0716 10:55:45.129246 137961844098560 run.py:722] (val) algo optimal_bst step 5950: {'root': 0.9498269896193772, 'score': 0.9498269896193772, 'examples_seen': 236944, 'step': 5950, 'algorithm': 'optimal_bst'}
I0716 10:55:48.071551 137961844098560 run.py:722] (val) algo optimal_bst step 6000: {'root': 0.9231185121107266, 'score': 0.9231185121107266, 'examples_seen': 238944, 'step': 6000, 'algorithm': 'optimal_bst'}
I0716 10:55:51.029441 137961844098560 run.py:722] (val) algo optimal_bst step 6050: {'root': 0.954476643598616, 'score': 0.954476643598616, 'examples_seen': 240928, 'step': 6050, 'algorithm': 'optimal_bst'}
I0716 10:55:54.017584 137961844098560 run.py:722] (val) algo optimal_bst step 6100: {'root': 0.9524221453287197, 'score': 0.9524221453287197, 'examples_seen': 242912, 'step': 6100, 'algorithm': 'optimal_bst'}
I0716 10:55:57.040959 137961844098560 run.py:722] (val) algo optimal_bst step 6150: {'root': 0.9570717993079585, 'score': 0.9570717993079585, 'examples_seen': 244864, 'step': 6150, 'algorithm': 'optimal_bst'}
I0716 10:56:00.163192 137961844098560 run.py:722] (val) algo optimal_bst step 6200: {'root': 0.9544225778546713, 'score': 0.9544225778546713, 'examples_seen': 246816, 'step': 6200, 'algorithm': 'optimal_bst'}
I0716 10:56:03.139595 137961844098560 run.py:722] (val) algo optimal_bst step 6250: {'root': 0.9506379757785467, 'score': 0.9506379757785467, 'examples_seen': 248880, 'step': 6250, 'algorithm': 'optimal_bst'}
I0716 10:56:06.101946 137961844098560 run.py:722] (val) algo optimal_bst step 6300: {'root': 0.9484212802768166, 'score': 0.9484212802768166, 'examples_seen': 250880, 'step': 6300, 'algorithm': 'optimal_bst'}
I0716 10:56:09.056394 137961844098560 run.py:722] (val) algo optimal_bst step 6350: {'root': 0.9539900519031141, 'score': 0.9539900519031141, 'examples_seen': 252880, 'step': 6350, 'algorithm': 'optimal_bst'}
I0716 10:56:12.007802 137961844098560 run.py:722] (val) algo optimal_bst step 6400: {'root': 0.9529628027681661, 'score': 0.9529628027681661, 'examples_seen': 254864, 'step': 6400, 'algorithm': 'optimal_bst'}
I0716 10:56:15.009256 137961844098560 run.py:722] (val) algo optimal_bst step 6450: {'root': 0.9543685121107266, 'score': 0.9543685121107266, 'examples_seen': 256816, 'step': 6450, 'algorithm': 'optimal_bst'}
I0716 10:56:18.035415 137961844098560 run.py:722] (val) algo optimal_bst step 6500: {'root': 0.9583153114186851, 'score': 0.9583153114186851, 'examples_seen': 258816, 'step': 6500, 'algorithm': 'optimal_bst'}
I0716 10:56:21.156302 137961844098560 run.py:722] (val) algo optimal_bst step 6550: {'root': 0.9510164359861591, 'score': 0.9510164359861591, 'examples_seen': 260752, 'step': 6550, 'algorithm': 'optimal_bst'}
I0716 10:56:24.138928 137961844098560 run.py:722] (val) algo optimal_bst step 6600: {'root': 0.9557742214532872, 'score': 0.9557742214532872, 'examples_seen': 262800, 'step': 6600, 'algorithm': 'optimal_bst'}
I0716 10:56:27.093839 137961844098560 run.py:722] (val) algo optimal_bst step 6650: {'root': 0.9551794982698962, 'score': 0.9551794982698962, 'examples_seen': 264832, 'step': 6650, 'algorithm': 'optimal_bst'}
I0716 10:56:30.049415 137961844098560 run.py:722] (val) algo optimal_bst step 6700: {'root': 0.9538278546712803, 'score': 0.9538278546712803, 'examples_seen': 266800, 'step': 6700, 'algorithm': 'optimal_bst'}
I0716 10:56:33.001604 137961844098560 run.py:722] (val) algo optimal_bst step 6750: {'root': 0.9522058823529411, 'score': 0.9522058823529411, 'examples_seen': 268800, 'step': 6750, 'algorithm': 'optimal_bst'}
I0716 10:56:35.993953 137961844098560 run.py:722] (val) algo optimal_bst step 6800: {'root': 0.9555038927335641, 'score': 0.9555038927335641, 'examples_seen': 270752, 'step': 6800, 'algorithm': 'optimal_bst'}
I0716 10:56:39.022499 137961844098560 run.py:722] (val) algo optimal_bst step 6850: {'root': 0.954314446366782, 'score': 0.954314446366782, 'examples_seen': 272736, 'step': 6850, 'algorithm': 'optimal_bst'}
I0716 10:56:42.120900 137961844098560 run.py:722] (val) algo optimal_bst step 6900: {'root': 0.9591803633217993, 'score': 0.9591803633217993, 'examples_seen': 274720, 'step': 6900, 'algorithm': 'optimal_bst'}
I0716 10:56:45.125710 137961844098560 run.py:722] (val) algo optimal_bst step 6950: {'root': 0.9559364186851211, 'score': 0.9559364186851211, 'examples_seen': 276736, 'step': 6950, 'algorithm': 'optimal_bst'}
I0716 10:56:48.085265 137961844098560 run.py:722] (val) algo optimal_bst step 7000: {'root': 0.9492863321799307, 'score': 0.9492863321799307, 'examples_seen': 278768, 'step': 7000, 'algorithm': 'optimal_bst'}
I0716 10:56:51.030036 137961844098560 run.py:722] (val) algo optimal_bst step 7050: {'root': 0.9559904844290658, 'score': 0.9559904844290658, 'examples_seen': 280752, 'step': 7050, 'algorithm': 'optimal_bst'}
I0716 10:56:53.985777 137961844098560 run.py:722] (val) algo optimal_bst step 7100: {'root': 0.9323096885813149, 'score': 0.9323096885813149, 'examples_seen': 282736, 'step': 7100, 'algorithm': 'optimal_bst'}
I0716 10:56:56.977671 137961844098560 run.py:722] (val) algo optimal_bst step 7150: {'root': 0.9536115916955017, 'score': 0.9536115916955017, 'examples_seen': 284720, 'step': 7150, 'algorithm': 'optimal_bst'}
I0716 10:57:00.015817 137961844098560 run.py:722] (val) algo optimal_bst step 7200: {'root': 0.9580990484429066, 'score': 0.9580990484429066, 'examples_seen': 286672, 'step': 7200, 'algorithm': 'optimal_bst'}
I0716 10:57:03.116448 137961844098560 run.py:722] (val) algo optimal_bst step 7250: {'root': 0.9528006055363322, 'score': 0.9528006055363322, 'examples_seen': 288640, 'step': 7250, 'algorithm': 'optimal_bst'}
I0716 10:57:06.095959 137961844098560 run.py:722] (val) algo optimal_bst step 7300: {'root': 0.9526924740484429, 'score': 0.9526924740484429, 'examples_seen': 290688, 'step': 7300, 'algorithm': 'optimal_bst'}
I0716 10:57:09.058350 137961844098560 run.py:722] (val) algo optimal_bst step 7350: {'root': 0.9577746539792388, 'score': 0.9577746539792388, 'examples_seen': 292688, 'step': 7350, 'algorithm': 'optimal_bst'}
I0716 10:57:12.013060 137961844098560 run.py:722] (val) algo optimal_bst step 7400: {'root': 0.9548010380622838, 'score': 0.9548010380622838, 'examples_seen': 294688, 'step': 7400, 'algorithm': 'optimal_bst'}
I0716 10:57:14.961963 137961844098560 run.py:722] (val) algo optimal_bst step 7450: {'root': 0.9323637543252595, 'score': 0.9323637543252595, 'examples_seen': 296672, 'step': 7450, 'algorithm': 'optimal_bst'}
I0716 10:57:17.962289 137961844098560 run.py:722] (val) algo optimal_bst step 7500: {'root': 0.9532331314878892, 'score': 0.9532331314878892, 'examples_seen': 298624, 'step': 7500, 'algorithm': 'optimal_bst'}
I0716 10:57:20.985073 137961844098560 run.py:722] (val) algo optimal_bst step 7550: {'root': 0.9595047577854672, 'score': 0.9595047577854672, 'examples_seen': 300624, 'step': 7550, 'algorithm': 'optimal_bst'}
I0716 10:57:24.105469 137961844098560 run.py:722] (val) algo optimal_bst step 7600: {'root': 0.9588019031141869, 'score': 0.9588019031141869, 'examples_seen': 302576, 'step': 7600, 'algorithm': 'optimal_bst'}
I0716 10:57:27.086648 137961844098560 run.py:722] (val) algo optimal_bst step 7650: {'root': 0.956260813148789, 'score': 0.956260813148789, 'examples_seen': 304608, 'step': 7650, 'algorithm': 'optimal_bst'}
I0716 10:57:30.038612 137961844098560 run.py:722] (val) algo optimal_bst step 7700: {'root': 0.9475562283737025, 'score': 0.9475562283737025, 'examples_seen': 306640, 'step': 7700, 'algorithm': 'optimal_bst'}
I0716 10:57:32.995606 137961844098560 run.py:722] (val) algo optimal_bst step 7750: {'root': 0.9438797577854672, 'score': 0.9438797577854672, 'examples_seen': 308608, 'step': 7750, 'algorithm': 'optimal_bst'}
I0716 10:57:35.948018 137961844098560 run.py:722] (val) algo optimal_bst step 7800: {'root': 0.9569096020761245, 'score': 0.9569096020761245, 'examples_seen': 310608, 'step': 7800, 'algorithm': 'optimal_bst'}
I0716 10:57:38.940695 137961844098560 run.py:722] (val) algo optimal_bst step 7850: {'root': 0.9542063148788927, 'score': 0.9542063148788927, 'examples_seen': 312576, 'step': 7850, 'algorithm': 'optimal_bst'}
I0716 10:57:41.966096 137961844098560 run.py:722] (val) algo optimal_bst step 7900: {'root': 0.9542603806228374, 'score': 0.9542603806228374, 'examples_seen': 314528, 'step': 7900, 'algorithm': 'optimal_bst'}
I0716 10:57:45.068135 137961844098560 run.py:722] (val) algo optimal_bst step 7950: {'root': 0.959666955017301, 'score': 0.959666955017301, 'examples_seen': 316528, 'step': 7950, 'algorithm': 'optimal_bst'}
I0716 10:57:48.075573 137961844098560 run.py:722] (val) algo optimal_bst step 8000: {'root': 0.9593425605536332, 'score': 0.9593425605536332, 'examples_seen': 318528, 'step': 8000, 'algorithm': 'optimal_bst'}
I0716 10:57:51.034150 137961844098560 run.py:722] (val) algo optimal_bst step 8050: {'root': 0.9478265570934256, 'score': 0.9478265570934256, 'examples_seen': 320560, 'step': 8050, 'algorithm': 'optimal_bst'}
I0716 10:57:53.980229 137961844098560 run.py:722] (val) algo optimal_bst step 8100: {'root': 0.9529087370242214, 'score': 0.9529087370242214, 'examples_seen': 322544, 'step': 8100, 'algorithm': 'optimal_bst'}
I0716 10:57:56.936700 137961844098560 run.py:722] (val) algo optimal_bst step 8150: {'root': 0.9602076124567474, 'score': 0.9602076124567474, 'examples_seen': 324528, 'step': 8150, 'algorithm': 'optimal_bst'}
I0716 10:57:59.952422 137961844098560 run.py:722] (val) algo optimal_bst step 8200: {'root': 0.9611807958477508, 'score': 0.9611807958477508, 'examples_seen': 326528, 'step': 8200, 'algorithm': 'optimal_bst'}
I0716 10:58:02.995819 137961844098560 run.py:722] (val) algo optimal_bst step 8250: {'root': 0.9616133217993079, 'score': 0.9616133217993079, 'examples_seen': 328464, 'step': 8250, 'algorithm': 'optimal_bst'}
I0716 10:58:06.120091 137961844098560 run.py:722] (val) algo optimal_bst step 8300: {'root': 0.9588559688581315, 'score': 0.9588559688581315, 'examples_seen': 330432, 'step': 8300, 'algorithm': 'optimal_bst'}
I0716 10:58:09.093598 137961844098560 run.py:722] (val) algo optimal_bst step 8350: {'root': 0.9558823529411765, 'score': 0.9558823529411765, 'examples_seen': 332480, 'step': 8350, 'algorithm': 'optimal_bst'}
I0716 10:58:12.055920 137961844098560 run.py:722] (val) algo optimal_bst step 8400: {'root': 0.9425281141868512, 'score': 0.9425281141868512, 'examples_seen': 334480, 'step': 8400, 'algorithm': 'optimal_bst'}
I0716 10:58:15.015445 137961844098560 run.py:722] (val) algo optimal_bst step 8450: {'root': 0.9549632352941176, 'score': 0.9549632352941176, 'examples_seen': 336480, 'step': 8450, 'algorithm': 'optimal_bst'}
I0716 10:58:17.965483 137961844098560 run.py:722] (val) algo optimal_bst step 8500: {'root': 0.9389057093425606, 'score': 0.9389057093425606, 'examples_seen': 338464, 'step': 8500, 'algorithm': 'optimal_bst'}
I0716 10:58:20.969954 137961844098560 run.py:722] (val) algo optimal_bst step 8550: {'root': 0.9576124567474048, 'score': 0.9576124567474048, 'examples_seen': 340432, 'step': 8550, 'algorithm': 'optimal_bst'}
I0716 10:58:23.996800 137961844098560 run.py:722] (val) algo optimal_bst step 8600: {'root': 0.9570177335640139, 'score': 0.9570177335640139, 'examples_seen': 342416, 'step': 8600, 'algorithm': 'optimal_bst'}
I0716 10:58:27.098626 137961844098560 run.py:722] (val) algo optimal_bst step 8650: {'root': 0.9580990484429066, 'score': 0.9580990484429066, 'examples_seen': 344368, 'step': 8650, 'algorithm': 'optimal_bst'}
I0716 10:58:30.081750 137961844098560 run.py:722] (val) algo optimal_bst step 8700: {'root': 0.9600454152249135, 'score': 0.9600454152249135, 'examples_seen': 346400, 'step': 8700, 'algorithm': 'optimal_bst'}
I0716 10:58:33.037255 137961844098560 run.py:722] (val) algo optimal_bst step 8750: {'root': 0.9536115916955017, 'score': 0.9536115916955017, 'examples_seen': 348432, 'step': 8750, 'algorithm': 'optimal_bst'}
I0716 10:58:35.989845 137961844098560 run.py:722] (val) algo optimal_bst step 8800: {'root': 0.9532871972318339, 'score': 0.9532871972318339, 'examples_seen': 350416, 'step': 8800, 'algorithm': 'optimal_bst'}
I0716 10:58:38.941002 137961844098560 run.py:722] (val) algo optimal_bst step 8850: {'root': 0.956098615916955, 'score': 0.956098615916955, 'examples_seen': 352400, 'step': 8850, 'algorithm': 'optimal_bst'}
I0716 10:58:41.933307 137961844098560 run.py:722] (val) algo optimal_bst step 8900: {'root': 0.9572339965397924, 'score': 0.9572339965397924, 'examples_seen': 354368, 'step': 8900, 'algorithm': 'optimal_bst'}
I0716 10:58:44.959229 137961844098560 run.py:722] (val) algo optimal_bst step 8950: {'root': 0.9469615051903114, 'score': 0.9469615051903114, 'examples_seen': 356320, 'step': 8950, 'algorithm': 'optimal_bst'}
I0716 10:58:48.062641 137961844098560 run.py:722] (val) algo optimal_bst step 9000: {'root': 0.964586937716263, 'score': 0.964586937716263, 'examples_seen': 358320, 'step': 9000, 'algorithm': 'optimal_bst'}
I0716 10:58:51.069843 137961844098560 run.py:722] (val) algo optimal_bst step 9050: {'root': 0.957882785467128, 'score': 0.957882785467128, 'examples_seen': 360320, 'step': 9050, 'algorithm': 'optimal_bst'}
I0716 10:58:54.017217 137961844098560 run.py:722] (val) algo optimal_bst step 9100: {'root': 0.9480968858131488, 'score': 0.9480968858131488, 'examples_seen': 362352, 'step': 9100, 'algorithm': 'optimal_bst'}
I0716 10:58:56.964138 137961844098560 run.py:722] (val) algo optimal_bst step 9150: {'root': 0.9605860726643599, 'score': 0.9605860726643599, 'examples_seen': 364352, 'step': 9150, 'algorithm': 'optimal_bst'}
I0716 10:58:59.925832 137961844098560 run.py:722] (val) algo optimal_bst step 9200: {'root': 0.9566392733564014, 'score': 0.9566392733564014, 'examples_seen': 366320, 'step': 9200, 'algorithm': 'optimal_bst'}
I0716 10:59:02.917247 137961844098560 run.py:722] (val) algo optimal_bst step 9250: {'root': 0.9585315743944637, 'score': 0.9585315743944637, 'examples_seen': 368320, 'step': 9250, 'algorithm': 'optimal_bst'}
I0716 10:59:05.943742 137961844098560 run.py:722] (val) algo optimal_bst step 9300: {'root': 0.9620458477508651, 'score': 0.9620458477508651, 'examples_seen': 370272, 'step': 9300, 'algorithm': 'optimal_bst'}
I0716 10:59:09.045036 137961844098560 run.py:722] (val) algo optimal_bst step 9350: {'root': 0.9565852076124568, 'score': 0.9565852076124568, 'examples_seen': 372240, 'step': 9350, 'algorithm': 'optimal_bst'}
I0716 10:59:12.010767 137961844098560 run.py:722] (val) algo optimal_bst step 9400: {'root': 0.9526924740484429, 'score': 0.9526924740484429, 'examples_seen': 374288, 'step': 9400, 'algorithm': 'optimal_bst'}
I0716 10:59:14.965592 137961844098560 run.py:722] (val) algo optimal_bst step 9450: {'root': 0.9366890138408305, 'score': 0.9366890138408305, 'examples_seen': 376288, 'step': 9450, 'algorithm': 'optimal_bst'}
I0716 10:59:17.919068 137961844098560 run.py:722] (val) algo optimal_bst step 9500: {'root': 0.9565852076124568, 'score': 0.9565852076124568, 'examples_seen': 378304, 'step': 9500, 'algorithm': 'optimal_bst'}
I0716 10:59:20.855005 137961844098560 run.py:722] (val) algo optimal_bst step 9550: {'root': 0.9598291522491349, 'score': 0.9598291522491349, 'examples_seen': 380272, 'step': 9550, 'algorithm': 'optimal_bst'}
I0716 10:59:23.859951 137961844098560 run.py:722] (val) algo optimal_bst step 9600: {'root': 0.957882785467128, 'score': 0.957882785467128, 'examples_seen': 382240, 'step': 9600, 'algorithm': 'optimal_bst'}
I0716 10:59:26.899456 137961844098560 run.py:722] (val) algo optimal_bst step 9650: {'root': 0.95907223183391, 'score': 0.95907223183391, 'examples_seen': 384224, 'step': 9650, 'algorithm': 'optimal_bst'}
I0716 10:59:29.998544 137961844098560 run.py:722] (val) algo optimal_bst step 9700: {'root': 0.9606942041522492, 'score': 0.9606942041522492, 'examples_seen': 386176, 'step': 9700, 'algorithm': 'optimal_bst'}
I0716 10:59:32.983402 137961844098560 run.py:722] (val) algo optimal_bst step 9750: {'root': 0.9568014705882353, 'score': 0.9568014705882353, 'examples_seen': 388224, 'step': 9750, 'algorithm': 'optimal_bst'}
I0716 10:59:35.937798 137961844098560 run.py:722] (val) algo optimal_bst step 9800: {'root': 0.9597210207612457, 'score': 0.9597210207612457, 'examples_seen': 390240, 'step': 9800, 'algorithm': 'optimal_bst'}
I0716 10:59:38.896038 137961844098560 run.py:722] (val) algo optimal_bst step 9850: {'root': 0.9569096020761245, 'score': 0.9569096020761245, 'examples_seen': 392224, 'step': 9850, 'algorithm': 'optimal_bst'}
I0716 10:59:41.845664 137961844098560 run.py:722] (val) algo optimal_bst step 9900: {'root': 0.9540981833910035, 'score': 0.9540981833910035, 'examples_seen': 394208, 'step': 9900, 'algorithm': 'optimal_bst'}
I0716 10:59:44.835979 137961844098560 run.py:722] (val) algo optimal_bst step 9950: {'root': 0.9583153114186851, 'score': 0.9583153114186851, 'examples_seen': 396176, 'step': 9950, 'algorithm': 'optimal_bst'}
I0716 10:59:47.541339 137961844098560 run.py:752] Restoring best model from checkpoint...
I0716 11:00:02.593102 137961844098560 run.py:767] (test) algo optimal_bst : {'root': 0.8145488165680473, 'score': 0.8145488165680473, 'examples_seen': 398112, 'step': 10000, 'algorithm': 'optimal_bst'}
I0716 11:00:02.593274 137961844098560 run.py:769] Done!
